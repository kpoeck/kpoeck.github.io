<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2342" onload="init(evt)" viewBox="0 0 1200 2342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="2342.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="2325" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="2325" > </text>
<g id="frames">
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="732.5" y="453" width="0.7" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="735.53" y="463.5" ></text>
</g>
<g >
<title>`free (1 samples, 0.05%)</title><rect x="157.8" y="565" width="0.7" height="15.0" fill="rgb(203,203,60)" rx="2" ry="2" />
<text  x="160.82" y="575.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Va (2 samples, 0.11%)</title><rect x="20.8" y="533" width="1.3" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="23.83" y="543.5" ></text>
</g>
<g >
<title>`llvm::isPotentiallyReachable(llvm::BasicBlock const*, llvm::Bas (1 samples, 0.05%)</title><rect x="543.3" y="421" width="0.6" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="546.29" y="431.5" ></text>
</g>
<g >
<title>`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="723.6" y="341" width="0.6" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="726.61" y="351.5" ></text>
</g>
<g >
<title>`llvm::SSAUpdaterImpl&lt;llvm::SSAUpdater&gt;::FindDominators(llvm::Sm (1 samples, 0.05%)</title><rect x="601.3" y="373" width="0.6" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="604.27" y="383.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm::Basi (1 samples, 0.05%)</title><rect x="661.2" y="389" width="0.6" height="15.0" fill="rgb(99,244,99)" rx="2" ry="2" />
<text  x="664.17" y="399.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="657.3" y="293" width="0.7" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="660.34" y="303.5" ></text>
</g>
<g >
<title>`llvm::GraphTraits&lt;llvm::BasicBlock*&gt;::child_end(llvm::BasicBloc (1 samples, 0.05%)</title><rect x="564.3" y="485" width="0.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="567.32" y="495.5" ></text>
</g>
<g >
<title>`std::__1::function&lt;bool (clang::ValueDecl const*)&gt;::operator()( (1 samples, 0.05%)</title><rect x="1125.6" y="437" width="0.7" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="1128.65" y="447.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm::DomT (1 samples, 0.05%)</title><rect x="601.9" y="341" width="0.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="604.91" y="351.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="723.6" y="357" width="0.6" height="15.0" fill="rgb(177,177,50)" rx="2" ry="2" />
<text  x="726.61" y="367.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="406.3" y="261" width="0.6" height="15.0" fill="rgb(183,183,53)" rx="2" ry="2" />
<text  x="409.31" y="271.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::getBackedgeTakenInfo(llvm::Loop const*) (1 samples, 0.05%)</title><rect x="1160.1" y="485" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="1163.05" y="495.5" ></text>
</g>
<g >
<title>`llvm::removeUnreachableBlocks(llvm::Function&amp;, llvm::LazyValueI (2 samples, 0.11%)</title><rect x="242.6" y="645" width="1.2" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="245.56" y="655.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoCache::hasCachedValueInfo(l (3 samples, 0.16%)</title><rect x="377.6" y="453" width="1.9" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="380.63" y="463.5" ></text>
</g>
<g >
<title>`getAllocationData(llvm::Value const*, AllocType, llvm::TargetLi (1 samples, 0.05%)</title><rect x="1094.4" y="453" width="0.7" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="1097.43" y="463.5" ></text>
</g>
<g >
<title>`CATCH-LAMBDA^CC-GENERATE-AST^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="2005" width="1180.0" height="15.0" fill="rgb(55,169,169)" rx="2" ry="2" />
<text  x="13.00" y="2015.5" >`CATCH-LAMBDA^CC-GENERATE-AST^FN^^</text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="587.9" y="389" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="590.89" y="399.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatticeElement, llvm::D (1 samples, 0.05%)</title><rect x="35.5" y="421" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="38.49" y="431.5" ></text>
</g>
<g >
<title>`llvm::isMathLibCallNoop(llvm::CallSite, llvm::TargetLibraryInfo (1 samples, 0.05%)</title><rect x="332.4" y="597" width="0.6" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="335.40" y="607.5" ></text>
</g>
<g >
<title>`llvm::LoopInfoBase&lt;llvm::BasicBlock, llvm::Loop&gt;::changeLoopFor (1 samples, 0.05%)</title><rect x="339.4" y="613" width="0.6" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="342.41" y="623.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::computeBackedgeTakenCount(llvm::Loop con (1 samples, 0.05%)</title><rect x="250.8" y="485" width="0.7" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="253.84" y="495.5" ></text>
</g>
<g >
<title>`small_malloc_from_free_list (1 samples, 0.05%)</title><rect x="350.2" y="437" width="0.7" height="15.0" fill="rgb(217,217,65)" rx="2" ry="2" />
<text  x="353.24" y="447.5" ></text>
</g>
<g >
<title>`top.lsp-top130^522^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1765" width="1180.0" height="15.0" fill="rgb(54,169,169)" rx="2" ry="2" />
<text  x="13.00" y="1775.5" >`top.lsp-top130^522^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::InstCombiner::visitCallSite(llvm::CallSite) (7 samples, 0.38%)</title><rect x="486.6" y="485" width="4.4" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="489.59" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solveBlockValueImpl(l (1 samples, 0.05%)</title><rect x="406.3" y="389" width="0.6" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="409.31" y="399.5" ></text>
</g>
<g >
<title>`llvm::APInt::APInt(llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="28.5" y="453" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="31.48" y="463.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::PointerIntPair&lt;llvm::Value const*, 1u, boo (1 samples, 0.05%)</title><rect x="157.8" y="597" width="0.7" height="15.0" fill="rgb(96,243,96)" rx="2" ry="2" />
<text  x="160.82" y="607.5" ></text>
</g>
<g >
<title>`compiler-conditions.lsp-compiler-conditions125^205^TOP-COMPILE- (1,852 samples, 100.00%)</title><rect x="10.0" y="1269" width="1180.0" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="13.00" y="1279.5" >`compiler-conditions.lsp-compiler-conditions125^205^TOP-COMPILE-</text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (3 samples, 0.16%)</title><rect x="686.7" y="405" width="1.9" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="689.65" y="415.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::CallGraphNode*, unsigne (1 samples, 0.05%)</title><rect x="352.1" y="629" width="0.7" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="355.15" y="639.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="405.7" y="421" width="0.6" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="408.67" y="431.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="29.8" y="565" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="32.75" y="575.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="440.7" y="485" width="0.6" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="443.71" y="495.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::BasicBlock*, llvm::DomTreeBuil (1 samples, 0.05%)</title><rect x="438.8" y="485" width="0.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="441.80" y="495.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatticeElement, llvm::D (1 samples, 0.05%)</title><rect x="377.0" y="437" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="380.00" y="447.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatticeElement, llvm::D (2 samples, 0.11%)</title><rect x="408.9" y="325" width="1.2" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="411.86" y="335.5" ></text>
</g>
<g >
<title>`llvm::sroa::AllocaSliceRewriter::visit((anonymous namespace)::S (5 samples, 0.27%)</title><rect x="705.1" y="469" width="3.2" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="708.13" y="479.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (1 samples, 0.05%)</title><rect x="680.9" y="405" width="0.7" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="683.92" y="415.5" ></text>
</g>
<g >
<title>`llvm::isAllocLikeFn(llvm::Value const*, llvm::TargetLibraryInfo (2 samples, 0.11%)</title><rect x="288.4" y="565" width="1.3" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="291.43" y="575.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;std::__1::pair&lt;unsigned i (1 samples, 0.05%)</title><rect x="698.1" y="469" width="0.7" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="701.12" y="479.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getSimplePointerDependencyFrom(l (5 samples, 0.27%)</title><rect x="202.4" y="453" width="3.2" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="205.42" y="463.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::GlobalValue const*&gt;::find(llvm::Glo (1 samples, 0.05%)</title><rect x="1131.4" y="389" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="1134.38" y="399.5" ></text>
</g>
<g >
<title>`llvm::ValueHandleBase::operator=(llvm::Value*) (1 samples, 0.05%)</title><rect x="726.2" y="533" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="729.16" y="543.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitSelectInst(llvm::SelectInst&amp;) (5 samples, 0.27%)</title><rect x="116.4" y="597" width="3.2" height="15.0" fill="rgb(101,246,101)" rx="2" ry="2" />
<text  x="119.40" y="607.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (5 samples, 0.27%)</title><rect x="1134.6" y="421" width="3.2" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="1137.57" y="431.5" ></text>
</g>
<g >
<title>`llvm::Constant::isNullValue() const (1 samples, 0.05%)</title><rect x="463.7" y="453" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="466.65" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="97.3" y="533" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="100.29" y="543.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::getOrCreate(llvm:: (1 samples, 0.05%)</title><rect x="57.1" y="533" width="0.7" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="60.15" y="543.5" ></text>
</g>
<g >
<title>`llvm::GVN::findLeader(llvm::BasicBlock const*, unsigned int) (1 samples, 0.05%)</title><rect x="171.8" y="565" width="0.7" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="174.84" y="575.5" ></text>
</g>
<g >
<title>`llvm::APInt::clearUnusedBits() (1 samples, 0.05%)</title><rect x="420.3" y="389" width="0.7" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="423.32" y="399.5" ></text>
</g>
<g >
<title>`realloc (1 samples, 0.05%)</title><rect x="259.8" y="549" width="0.6" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="262.76" y="559.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Va (1 samples, 0.05%)</title><rect x="17.0" y="581" width="0.6" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="20.01" y="591.5" ></text>
</g>
<g >
<title>`void std::__1::vector&lt;llvm::BasicBlock*, std::__1::allocator&lt;ll (1 samples, 0.05%)</title><rect x="412.7" y="453" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="415.68" y="463.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="327.9" y="597" width="0.7" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="330.94" y="607.5" ></text>
</g>
<g >
<title>`llvm::hash_value(llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="72.4" y="485" width="0.7" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="75.44" y="495.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (1 samples, 0.05%)</title><rect x="647.1" y="117" width="0.7" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="650.15" y="127.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="295.4" y="501" width="0.7" height="15.0" fill="rgb(82,230,82)" rx="2" ry="2" />
<text  x="298.44" y="511.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp_big(void const*) (1 samples, 0.05%)</title><rect x="638.2" y="373" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="641.23" y="383.5" ></text>
</g>
<g >
<title>`llvm::ValueHandleBase::AddToUseList() (152 samples, 8.21%)</title><rect x="975.9" y="453" width="96.9" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="978.92" y="463.5" >`llvm::Valu..</text>
</g>
<g >
<title>`llvm::ScalarEvolution::getSCEV(llvm::Value*) (1 samples, 0.05%)</title><rect x="131.1" y="341" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="134.06" y="351.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="209.4" y="469" width="0.7" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="212.43" y="479.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="247.7" y="453" width="0.6" height="15.0" fill="rgb(71,220,71)" rx="2" ry="2" />
<text  x="250.66" y="463.5" ></text>
</g>
<g >
<title>`llvm::StringMapImpl::LookupBucketFor(llvm::StringRef) (1 samples, 0.05%)</title><rect x="412.0" y="389" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="415.04" y="399.5" ></text>
</g>
<g >
<title>`llvm::AAResults::pointsToConstantMemory(llvm::MemoryLocation co (1 samples, 0.05%)</title><rect x="568.1" y="437" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="571.14" y="447.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getSimplePointerDependencyFrom(l (39 samples, 2.11%)</title><rect x="613.4" y="389" width="24.8" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="616.38" y="399.5" >`..</text>
</g>
<g >
<title>`llvm::SimplifySelectInst(llvm::Value*, llvm::Value*, llvm::Valu (1 samples, 0.05%)</title><rect x="224.7" y="549" width="0.7" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="227.72" y="559.5" ></text>
</g>
<g >
<title>`top.lsp-top130^378^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1973" width="1180.0" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="13.00" y="1983.5" >`top.lsp-top130^378^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::APInt::udiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="449.6" y="453" width="0.7" height="15.0" fill="rgb(94,241,94)" rx="2" ry="2" />
<text  x="452.63" y="463.5" ></text>
</g>
<g >
<title>`tiny_size (2 samples, 0.11%)</title><rect x="155.9" y="565" width="1.3" height="15.0" fill="rgb(224,224,68)" rx="2" ry="2" />
<text  x="158.91" y="575.5" ></text>
</g>
<g >
<title>`llvm::SSAUpdater::GetValueAtEndOfBlockInternal(llvm::BasicBlock (1 samples, 0.05%)</title><rect x="737.0" y="453" width="0.6" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="739.99" y="463.5" ></text>
</g>
<g >
<title>`llvm::CallGraphNode::addCalledFunction(llvm::CallSite, llvm::Ca (1 samples, 0.05%)</title><rect x="729.3" y="533" width="0.7" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="732.34" y="543.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="572.6" y="389" width="0.6" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="575.60" y="399.5" ></text>
</g>
<g >
<title>`llvm::AAResultsWrapperPass::runOnFunction(llvm::Function&amp;) (4 samples, 0.22%)</title><rect x="429.9" y="549" width="2.5" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="432.88" y="559.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::findAnalysisPass(void const*, bool) (2 samples, 0.11%)</title><rect x="44.4" y="613" width="1.3" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="47.41" y="623.5" ></text>
</g>
<g >
<title>`llvm::GetPointerBaseWithConstantOffset(llvm::Value*, long long&amp; (1 samples, 0.05%)</title><rect x="600.6" y="405" width="0.7" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="603.64" y="415.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;std::__1::pair&lt;llvm::Value*, llvm (1 samples, 0.05%)</title><rect x="699.4" y="485" width="0.6" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="702.40" y="495.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getPointerABIAlignment(unsigned int) const (1 samples, 0.05%)</title><rect x="275.1" y="517" width="0.6" height="15.0" fill="rgb(76,223,76)" rx="2" ry="2" />
<text  x="278.05" y="527.5" ></text>
</g>
<g >
<title>`isObjectSmallerThan(llvm::Value const*, unsigned long long, llv (1 samples, 0.05%)</title><rect x="191.6" y="341" width="0.6" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="194.59" y="351.5" ></text>
</g>
<g >
<title>`llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm::MemoryLocation, llvm:: (1 samples, 0.05%)</title><rect x="631.2" y="325" width="0.7" height="15.0" fill="rgb(69,218,69)" rx="2" ry="2" />
<text  x="634.22" y="335.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value*&gt;::find(llvm::Value const*) c (1 samples, 0.05%)</title><rect x="14.5" y="501" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="17.46" y="511.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::assignExpNewValueNum(llvm::GVN::Expressi (1 samples, 0.05%)</title><rect x="672.6" y="437" width="0.7" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="675.63" y="447.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeBase&lt;llvm::BasicBlock, false&gt;::dominates(llv (1 samples, 0.05%)</title><rect x="143.2" y="613" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="146.16" y="623.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitAllocaInst(llvm::AllocaInst&amp;) (491 samples, 26.51%)</title><rect x="778.4" y="501" width="312.8" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="781.40" y="511.5" >`llvm::InstCombiner::visitAllocaInst(llvm:..</text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (2 samples, 0.11%)</title><rect x="751.6" y="485" width="1.3" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="754.64" y="495.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::AnalyzeGlobals(llvm::Module&amp;) (1 samples, 0.05%)</title><rect x="351.5" y="645" width="0.6" height="15.0" fill="rgb(83,231,83)" rx="2" ry="2" />
<text  x="354.51" y="655.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_range_impl&lt; (1 samples, 0.05%)</title><rect x="723.0" y="453" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="725.97" y="463.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (1 samples, 0.05%)</title><rect x="119.6" y="565" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="122.59" y="575.5" ></text>
</g>
<g >
<title>`llvm::LoopBase&lt;llvm::BasicBlock, llvm::Loop&gt;::getExitingBlock() (1 samples, 0.05%)</title><rect x="555.4" y="437" width="0.6" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="558.40" y="447.5" ></text>
</g>
<g >
<title>`getFoldedCast(llvm::Instruction::CastOps, llvm::Constant*, llvm (1 samples, 0.05%)</title><rect x="451.5" y="485" width="0.7" height="15.0" fill="rgb(71,220,71)" rx="2" ry="2" />
<text  x="454.54" y="495.5" ></text>
</g>
<g >
<title>`top.lsp-top130^378^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1957" width="1180.0" height="15.0" fill="rgb(69,182,182)" rx="2" ry="2" />
<text  x="13.00" y="1967.5" >`top.lsp-top130^378^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`foldLogOpOfMaskedICmps(llvm::ICmpInst*, llvm::ICmpInst*, bool,  (1 samples, 0.05%)</title><rect x="285.2" y="565" width="0.7" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="288.25" y="575.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Va (1 samples, 0.05%)</title><rect x="415.2" y="453" width="0.7" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="418.23" y="463.5" ></text>
</g>
<g >
<title>`llvm::APInt::APInt(unsigned int, unsigned long long, bool) (1 samples, 0.05%)</title><rect x="683.5" y="453" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="686.47" y="463.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getPointerABIAlignment(unsigned int) const (1 samples, 0.05%)</title><rect x="513.3" y="373" width="0.7" height="15.0" fill="rgb(53,202,53)" rx="2" ry="2" />
<text  x="516.35" y="383.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (1 samples, 0.05%)</title><rect x="84.5" y="533" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="87.55" y="543.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::u (1 samples, 0.05%)</title><rect x="273.1" y="501" width="0.7" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="276.14" y="511.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getIndexedOffsetInType(llvm::Type*, llvm::Arr (1 samples, 0.05%)</title><rect x="67.3" y="533" width="0.7" height="15.0" fill="rgb(94,241,94)" rx="2" ry="2" />
<text  x="70.34" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solveBlockValueImpl(l (3 samples, 0.16%)</title><rect x="387.2" y="453" width="1.9" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="390.19" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantExprKeyType::getHash() const (1 samples, 0.05%)</title><rect x="461.7" y="373" width="0.7" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="464.74" y="383.5" ></text>
</g>
<g >
<title>`llvm::canSinkOrHoistInst(llvm::Instruction&amp;, llvm::AAResults*,  (1 samples, 0.05%)</title><rect x="1159.4" y="485" width="0.7" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="1162.42" y="495.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1109" width="1180.0" height="15.0" fill="rgb(79,191,191)" rx="2" ry="2" />
<text  x="13.00" y="1119.5" >`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="350.2" y="517" width="0.7" height="15.0" fill="rgb(194,194,57)" rx="2" ry="2" />
<text  x="353.24" y="527.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getStructLayout(llvm::StructType*) const (1 samples, 0.05%)</title><rect x="645.9" y="245" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="648.87" y="255.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::BasicBlock*&gt;::insert(llvm::BasicBlo (1 samples, 0.05%)</title><rect x="128.5" y="613" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="131.51" y="623.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv_ov(llvm::APInt const&amp;, bool&amp;) const (1 samples, 0.05%)</title><rect x="762.5" y="453" width="0.6" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="765.47" y="463.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::Valu (3 samples, 0.16%)</title><rect x="998.9" y="437" width="1.9" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="1001.86" y="447.5" ></text>
</g>
<g >
<title>`llvm::GVN::Expression::operator==(llvm::GVN::Expression const&amp;) (1 samples, 0.05%)</title><rect x="227.3" y="517" width="0.6" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="230.27" y="527.5" ></text>
</g>
<g >
<title>`llvm::ReassociatePass::run(llvm::Function&amp;, llvm::AnalysisManag (2 samples, 0.11%)</title><rect x="428.0" y="533" width="1.2" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="430.97" y="543.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="28.5" y="549" width="0.6" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="31.48" y="559.5" ></text>
</g>
<g >
<title>`llvm::ValueLatticeElement::getNot(llvm::Constant*) (1 samples, 0.05%)</title><rect x="419.7" y="373" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="422.69" y="383.5" ></text>
</g>
<g >
<title>`llvm::getConstantStringInfo(llvm::Value const*, llvm::StringRef (1 samples, 0.05%)</title><rect x="301.2" y="469" width="0.6" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="304.18" y="479.5" ></text>
</g>
<g >
<title>`llvm::GVN::AnalyzeLoadAvailability(llvm::LoadInst*, llvm::MemDe (1 samples, 0.05%)</title><rect x="176.3" y="533" width="0.6" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="179.30" y="543.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="731.9" y="421" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="734.89" y="431.5" ></text>
</g>
<g >
<title>`llvm::GetPointerBaseWithConstantOffset(llvm::Value*, long long&amp; (1 samples, 0.05%)</title><rect x="176.3" y="501" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="179.30" y="511.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::freePass(llvm::Pass*, llvm::StringRef, llv (7 samples, 0.38%)</title><rect x="1163.2" y="533" width="4.5" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="1166.24" y="543.5" ></text>
</g>
<g >
<title>`unsigned int llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorT (4 samples, 0.22%)</title><rect x="438.2" y="517" width="2.5" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="441.16" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::getOrCreate(llvm:: (3 samples, 0.16%)</title><rect x="502.5" y="325" width="1.9" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="505.52" y="335.5" ></text>
</g>
<g >
<title>`llvm::AttributeList::getNumAttrSets() const (1 samples, 0.05%)</title><rect x="1186.8" y="693" width="0.7" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="1189.81" y="703.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;llvm::Value*, unsigned i (1 samples, 0.05%)</title><rect x="161.6" y="597" width="0.7" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="164.64" y="607.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::intersectAssumeOrGuar (1 samples, 0.05%)</title><rect x="38.7" y="501" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="41.67" y="511.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="647.8" y="149" width="0.6" height="15.0" fill="rgb(108,254,108)" rx="2" ry="2" />
<text  x="650.79" y="159.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="132.3" y="437" width="0.7" height="15.0" fill="rgb(182,182,52)" rx="2" ry="2" />
<text  x="135.33" y="447.5" ></text>
</g>
<g >
<title>`llvm::AssumptionCache::assumptionsFor(llvm::Value const*) (1 samples, 0.05%)</title><rect x="734.4" y="437" width="0.7" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="737.44" y="447.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;(anonymous namespace)::S (1 samples, 0.05%)</title><rect x="23.4" y="613" width="0.6" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="26.38" y="623.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (2 samples, 0.11%)</title><rect x="333.7" y="501" width="1.2" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="336.67" y="511.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeBase&lt;llvm::BasicBlock, false&gt;::dominates(llv (2 samples, 0.11%)</title><rect x="773.9" y="437" width="1.3" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="776.94" y="447.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="194.8" y="357" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="197.77" y="367.5" ></text>
</g>
<g >
<title>`llvm::Function::dropAllReferences() (5 samples, 0.27%)</title><rect x="1176.0" y="725" width="3.2" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="1178.98" y="735.5" ></text>
</g>
<g >
<title>`llvm::getConstantDataArrayInfo(llvm::Value const*, llvm::Consta (2 samples, 0.11%)</title><rect x="475.1" y="453" width="1.3" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="478.12" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (2 samples, 0.11%)</title><rect x="92.2" y="469" width="1.3" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="95.19" y="479.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solveBlockValueImpl(l (8 samples, 0.43%)</title><rect x="379.5" y="453" width="5.1" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="382.55" y="463.5" ></text>
</g>
<g >
<title>`unsigned int llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorT (1 samples, 0.05%)</title><rect x="601.9" y="357" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="604.91" y="367.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SimplifyCFGOpt::isValueEqualityCompariso (1 samples, 0.05%)</title><rect x="718.5" y="485" width="0.6" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="721.51" y="495.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std:: (1 samples, 0.05%)</title><rect x="677.1" y="389" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="680.10" y="399.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="194.1" y="261" width="0.7" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="197.14" y="271.5" ></text>
</g>
<g >
<title>`simplifyFunctionCFG(llvm::Function&amp;, llvm::TargetTransformInfo  (23 samples, 1.24%)</title><rect x="711.5" y="549" width="14.7" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="714.50" y="559.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value const*&gt;::insert(llvm::Value c (1 samples, 0.05%)</title><rect x="233.6" y="501" width="0.7" height="15.0" fill="rgb(59,209,59)" rx="2" ry="2" />
<text  x="236.64" y="511.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (2 samples, 0.11%)</title><rect x="502.5" y="277" width="1.3" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="505.52" y="287.5" ></text>
</g>
<g >
<title>`isDereferenceableAndAlignedPointer(llvm::Value const*, unsigned (1 samples, 0.05%)</title><rect x="715.3" y="421" width="0.7" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="718.32" y="431.5" ></text>
</g>
<g >
<title>`getValueFromCondition(llvm::Value*, llvm::Value*, bool) (1 samples, 0.05%)</title><rect x="377.0" y="453" width="0.6" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="380.00" y="463.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (7 samples, 0.38%)</title><rect x="257.9" y="629" width="4.4" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="260.85" y="639.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitLShr(llvm::BinaryOperator&amp;) (5 samples, 0.27%)</title><rect x="521.6" y="501" width="3.2" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="524.63" y="511.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1122.5" y="405" width="0.6" height="15.0" fill="rgb(82,230,82)" rx="2" ry="2" />
<text  x="1125.46" y="415.5" ></text>
</g>
<g >
<title>`llvm::computePeelCount(llvm::Loop*, unsigned int, llvm::TargetT (1 samples, 0.05%)</title><rect x="561.1" y="517" width="0.7" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="564.13" y="527.5" ></text>
</g>
<g >
<title>`llvm::TargetLibraryInfoImpl::getLibFunc(llvm::StringRef, llvm:: (1 samples, 0.05%)</title><rect x="554.8" y="485" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="557.76" y="495.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;std::__1::pair&lt;unsigned int, llvm::B (1 samples, 0.05%)</title><rect x="697.5" y="421" width="0.6" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="700.48" y="431.5" ></text>
</g>
<g >
<title>`llvm::Instruction::getMetadataImpl(unsigned int) const (1 samples, 0.05%)</title><rect x="389.1" y="517" width="0.6" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="392.10" y="527.5" ></text>
</g>
<g >
<title>`free_small (1 samples, 0.05%)</title><rect x="579.0" y="485" width="0.6" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="581.97" y="495.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="1174.7" y="453" width="0.6" height="15.0" fill="rgb(229,229,69)" rx="2" ry="2" />
<text  x="1177.71" y="463.5" ></text>
</g>
<g >
<title>`llvm::TargetTransformInfoWrapperPass::getTTI(llvm::Function con (1 samples, 0.05%)</title><rect x="245.7" y="629" width="0.7" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="248.75" y="639.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldCastInstruction(unsigned int, llvm::Constant* (1 samples, 0.05%)</title><rect x="59.1" y="565" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="62.06" y="575.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::apint_match::match&lt;llvm::Value const&gt;( (1 samples, 0.05%)</title><rect x="122.8" y="485" width="0.6" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="125.78" y="495.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::alias(llvm::MemoryLocation const&amp;, llvm: (2 samples, 0.11%)</title><rect x="617.2" y="229" width="1.3" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="620.20" y="239.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="409.5" y="277" width="0.6" height="15.0" fill="rgb(185,185,53)" rx="2" ry="2" />
<text  x="412.49" y="287.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1124.4" y="293" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="1127.37" y="303.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv_ov(llvm::APInt const&amp;, bool&amp;) const (1 samples, 0.05%)</title><rect x="55.9" y="565" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="58.87" y="575.5" ></text>
</g>
<g >
<title>`llvm::GetElementPtrInst::getIndexedType(llvm::Type*, llvm::Arra (1 samples, 0.05%)</title><rect x="413.3" y="341" width="0.7" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="416.32" y="351.5" ></text>
</g>
<g >
<title>`llvm::PHINode::Create(llvm::Type*, unsigned int, llvm::Twine co (1 samples, 0.05%)</title><rect x="703.2" y="485" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="706.22" y="495.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm:: (2 samples, 0.11%)</title><rect x="631.9" y="357" width="1.2" height="15.0" fill="rgb(95,242,95)" rx="2" ry="2" />
<text  x="634.86" y="367.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, ll (1 samples, 0.05%)</title><rect x="104.3" y="501" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="107.30" y="511.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="442.6" y="373" width="0.7" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="445.62" y="383.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;unsigned int, llvm::GVN::Lead (1 samples, 0.05%)</title><rect x="171.2" y="501" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="174.20" y="511.5" ></text>
</g>
<g >
<title>`getAllocationDataForFunction(llvm::Function const*, AllocType,  (1 samples, 0.05%)</title><rect x="1094.4" y="437" width="0.7" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="1097.43" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solve() (3 samples, 0.16%)</title><rect x="373.8" y="485" width="1.9" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="376.81" y="495.5" ></text>
</g>
<g >
<title>`llvm::SimplifyGEPInst(llvm::Type*, llvm::ArrayRef&lt;llvm::Value*&gt; (2 samples, 0.11%)</title><rect x="1099.5" y="485" width="1.3" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="1102.52" y="495.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitShl(llvm::BinaryOperator&amp;) (1 samples, 0.05%)</title><rect x="543.3" y="501" width="0.6" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="546.29" y="511.5" ></text>
</g>
<g >
<title>`free_tiny (1 samples, 0.05%)</title><rect x="579.6" y="421" width="0.6" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="582.61" y="431.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="308.8" y="517" width="0.7" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="311.82" y="527.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="71.8" y="453" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="74.80" y="463.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (21 samples, 1.13%)</title><rect x="296.1" y="565" width="13.4" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="299.08" y="575.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getAlignment(llvm::Type*, bool) const (1 samples, 0.05%)</title><rect x="136.8" y="485" width="0.6" height="15.0" fill="rgb(82,230,82)" rx="2" ry="2" />
<text  x="139.79" y="495.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldOpIntoPhi(llvm::Instruction&amp;, llvm::PHI (1 samples, 0.05%)</title><rect x="543.3" y="437" width="0.6" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="546.29" y="447.5" ></text>
</g>
<g >
<title>`unsigned int llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorT (2 samples, 0.11%)</title><rect x="261.0" y="613" width="1.3" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="264.04" y="623.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::mergeAliasSetsForPointer(llvm::Value con (2 samples, 0.11%)</title><rect x="134.2" y="533" width="1.3" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="137.24" y="543.5" ></text>
</g>
<g >
<title>`std::__1::__split_buffer&lt;std::__1::pair&lt;llvm::BasicBlock const* (1 samples, 0.05%)</title><rect x="744.6" y="485" width="0.7" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="747.63" y="495.5" ></text>
</g>
<g >
<title>`ltvc_toplevel_funcall (1,852 samples, 100.00%)</title><rect x="10.0" y="2101" width="1180.0" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="13.00" y="2111.5" >`ltvc_toplevel_funcall</text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std::__1:: (1 samples, 0.05%)</title><rect x="325.4" y="469" width="0.6" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="328.39" y="479.5" ></text>
</g>
<g >
<title>`CATCH-FUNCTION^CORE^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="1653" width="1180.0" height="15.0" fill="rgb(103,213,213)" rx="2" ry="2" />
<text  x="13.00" y="1663.5" >`CATCH-FUNCTION^CORE^FN^^</text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::StoreInst const*, llvm::Me (3 samples, 0.16%)</title><rect x="633.1" y="357" width="1.9" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="636.13" y="367.5" ></text>
</g>
<g >
<title>`llvm::BinaryOperator::isNeg(llvm::Value const*) (1 samples, 0.05%)</title><rect x="278.9" y="581" width="0.6" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="281.88" y="591.5" ></text>
</g>
<g >
<title>`llvm::ReversePostOrderTraversal&lt;llvm::Function*, llvm::GraphTra (1 samples, 0.05%)</title><rect x="226.0" y="597" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="228.99" y="607.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (19 samples, 1.03%)</title><rect x="1078.5" y="469" width="12.1" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="1081.50" y="479.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="1174.7" y="517" width="0.6" height="15.0" fill="rgb(184,184,53)" rx="2" ry="2" />
<text  x="1177.71" y="527.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (1 samples, 0.05%)</title><rect x="225.4" y="533" width="0.6" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="228.36" y="543.5" ></text>
</g>
<g >
<title>`default_zone_malloc (1 samples, 0.05%)</title><rect x="699.4" y="421" width="0.6" height="15.0" fill="rgb(192,192,56)" rx="2" ry="2" />
<text  x="702.40" y="431.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="97.3" y="517" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="100.29" y="527.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::ConstantExpr*, llv (1 samples, 0.05%)</title><rect x="686.7" y="357" width="0.6" height="15.0" fill="rgb(76,223,76)" rx="2" ry="2" />
<text  x="689.65" y="367.5" ></text>
</g>
<g >
<title>`llvm::MemorySSAWrapperPass::runOnFunction(llvm::Function&amp;) (13 samples, 0.70%)</title><rect x="566.2" y="549" width="8.3" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="569.23" y="559.5" ></text>
</g>
<g >
<title>`runSCCP(llvm::Function&amp;, llvm::DataLayout const&amp;, llvm::TargetL (4 samples, 0.22%)</title><rect x="229.8" y="645" width="2.6" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="232.82" y="655.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="732.5" y="421" width="0.7" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="735.53" y="431.5" ></text>
</g>
<g >
<title>`llvm::isAllocLikeFn(llvm::Value const*, llvm::TargetLibraryInfo (1 samples, 0.05%)</title><rect x="1112.9" y="453" width="0.6" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="1115.90" y="463.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitStoreInst(llvm::StoreInst&amp;) (1 samples, 0.05%)</title><rect x="326.0" y="597" width="0.7" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="329.03" y="607.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedBits(llvm::Instruction*, un (4 samples, 0.22%)</title><rect x="517.8" y="469" width="2.6" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="520.81" y="479.5" ></text>
</g>
<g >
<title>`llvm::GVN::processNonLocalLoad(llvm::LoadInst*) (58 samples, 3.13%)</title><rect x="175.0" y="565" width="37.0" height="15.0" fill="rgb(106,252,106)" rx="2" ry="2" />
<text  x="178.02" y="575.5" >`ll..</text>
</g>
<g >
<title>`llvm::MemorySSA::MemorySSA(llvm::Function&amp;, llvm::AAResults*, l (9 samples, 0.49%)</title><rect x="148.3" y="629" width="5.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="151.26" y="639.5" ></text>
</g>
<g >
<title>`llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm::MemoryLocation, llvm:: (1 samples, 0.05%)</title><rect x="196.7" y="421" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="199.68" y="431.5" ></text>
</g>
<g >
<title>`default_zone_malloc (1 samples, 0.05%)</title><rect x="1111.0" y="245" width="0.6" height="15.0" fill="rgb(191,191,55)" rx="2" ry="2" />
<text  x="1113.99" y="255.5" ></text>
</g>
<g >
<title>`llvm::TargetLibraryInfoImpl::getLibFunc(llvm::Function const&amp;,  (1 samples, 0.05%)</title><rect x="331.8" y="597" width="0.6" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="334.76" y="607.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1135.8" y="389" width="0.7" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="1138.84" y="399.5" ></text>
</g>
<g >
<title>`llvm::GVN::performPRE(llvm::Function&amp;) (10 samples, 0.54%)</title><rect x="694.3" y="517" width="6.4" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="697.30" y="527.5" ></text>
</g>
<g >
<title>`llvm::SimplifyCall(llvm::ImmutableCallSite, llvm::SimplifyQuery (1 samples, 0.05%)</title><rect x="657.3" y="261" width="0.7" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="660.34" y="271.5" ></text>
</g>
<g >
<title>`llvm::PMTopLevelManager::findAnalysisUsage(llvm::Pass*) (1 samples, 0.05%)</title><rect x="345.8" y="629" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="348.78" y="639.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getNonLocalPointerDependency(llv (53 samples, 2.86%)</title><rect x="178.2" y="549" width="33.8" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="181.21" y="559.5" >`l..</text>
</g>
<g >
<title>`llvm::KnownBits::zextOrTrunc(unsigned int) (1 samples, 0.05%)</title><rect x="374.4" y="389" width="0.7" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="377.45" y="399.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="315.2" y="517" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="318.19" y="527.5" ></text>
</g>
<g >
<title>`llvm::Value::setValueName(llvm::StringMapEntry&lt;llvm::Value*&gt;*) (1 samples, 0.05%)</title><rect x="707.0" y="373" width="0.7" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="710.04" y="383.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="326.0" y="517" width="0.7" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="329.03" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldGetElementPtr(llvm::Type*, llvm::Constant*, b (1 samples, 0.05%)</title><rect x="1109.7" y="325" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="1112.72" y="335.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm (1 samples, 0.05%)</title><rect x="651.6" y="181" width="0.6" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="654.61" y="191.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::MaxMin_match&lt;llvm::ICmpInst, llvm::Pat (1 samples, 0.05%)</title><rect x="101.7" y="581" width="0.7" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="104.75" y="591.5" ></text>
</g>
<g >
<title>`std::__1::__split_buffer&lt;llvm::Constant*, std::__1::allocator&lt;l (1 samples, 0.05%)</title><rect x="1111.0" y="309" width="0.6" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="1113.99" y="319.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;llvm::Constant*, ll (1 samples, 0.05%)</title><rect x="274.4" y="549" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="277.42" y="559.5" ></text>
</g>
<g >
<title>`tiny_malloc_from_free_list (2 samples, 0.11%)</title><rect x="47.6" y="517" width="1.3" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="50.59" y="527.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Type*, llvm::PointerTyp (1 samples, 0.05%)</title><rect x="29.1" y="485" width="0.7" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="32.11" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value*&gt;::find(llvm::Value const*) c (1 samples, 0.05%)</title><rect x="417.1" y="373" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="420.14" y="383.5" ></text>
</g>
<g >
<title>`llvm::Constant::removeDeadConstantUsers() const (1 samples, 0.05%)</title><rect x="241.9" y="629" width="0.7" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="244.92" y="639.5" ></text>
</g>
<g >
<title>`szone_realloc (2 samples, 0.11%)</title><rect x="867.0" y="405" width="1.2" height="15.0" fill="rgb(219,219,66)" rx="2" ry="2" />
<text  x="869.97" y="415.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (1 samples, 0.05%)</title><rect x="647.8" y="229" width="0.6" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="650.79" y="239.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, unsi (1 samples, 0.05%)</title><rect x="270.0" y="597" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="272.96" y="607.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeWrapperPass::runOnFunction(llvm::Function&amp;) (7 samples, 0.38%)</title><rect x="257.9" y="645" width="4.4" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="260.85" y="655.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm:: (5 samples, 0.27%)</title><rect x="1128.8" y="437" width="3.2" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="1131.83" y="447.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (2 samples, 0.11%)</title><rect x="522.3" y="325" width="1.2" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="525.27" y="335.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="572.6" y="421" width="0.6" height="15.0" fill="rgb(216,216,65)" rx="2" ry="2" />
<text  x="575.60" y="431.5" ></text>
</g>
<g >
<title>`core::SingleDispatchMethodFunction_O::entry_point(core::T_O*, u (1,268 samples, 68.47%)</title><rect x="368.1" y="629" width="807.9" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="371.08" y="639.5" >`core::SingleDispatchMethodFunction_O::entry_point(core::T_O*, u</text>
</g>
<g >
<title>`llvm::AliasSetTracker::getAliasSetForPointer(llvm::Value*, unsi (2 samples, 0.11%)</title><rect x="556.7" y="453" width="1.2" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="559.67" y="463.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Use*&gt;::insert(llvm::Use*) (1 samples, 0.05%)</title><rect x="10.0" y="629" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getSimplePointerDependencyFrom(l (4 samples, 0.22%)</title><rect x="172.5" y="517" width="2.5" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="175.47" y="527.5" ></text>
</g>
<g >
<title>`llvm::LPPassManager::runOnFunction(llvm::Function&amp;) (21 samples, 1.13%)</title><rect x="129.8" y="645" width="13.4" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="132.78" y="655.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="1139.7" y="485" width="0.6" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="1142.67" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::GlobalValue*&gt;::insert(llvm::GlobalV (1 samples, 0.05%)</title><rect x="241.3" y="629" width="0.6" height="15.0" fill="rgb(65,213,65)" rx="2" ry="2" />
<text  x="244.29" y="639.5" ></text>
</g>
<g >
<title>`llvm::Instruction::clone() const (1 samples, 0.05%)</title><rect x="716.6" y="469" width="0.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="719.60" y="479.5" ></text>
</g>
<g >
<title>`top.lsp-top130^378^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1829" width="1180.0" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="13.00" y="1839.5" >`top.lsp-top130^378^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="224.1" y="453" width="0.6" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="227.08" y="463.5" ></text>
</g>
<g >
<title>`llvm::sroa::AllocaSlices::AllocaSlices(llvm::DataLayout const&amp;, (1 samples, 0.05%)</title><rect x="708.3" y="501" width="0.7" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="711.32" y="511.5" ></text>
</g>
<g >
<title>`getValueFromCondition(llvm::Value*, llvm::Value*, bool) (1 samples, 0.05%)</title><rect x="415.2" y="437" width="0.7" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="418.23" y="447.5" ></text>
</g>
<g >
<title>`llvm::APInt::udiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="762.5" y="437" width="0.6" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="765.47" y="447.5" ></text>
</g>
<g >
<title>`llvm::ConstantExprKeyType::getHash() const (2 samples, 0.11%)</title><rect x="502.5" y="293" width="1.3" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="505.52" y="303.5" ></text>
</g>
<g >
<title>`llvm::formLCSSARecursively(llvm::Loop&amp;, llvm::DominatorTree&amp;, l (1 samples, 0.05%)</title><rect x="737.6" y="501" width="0.7" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="740.62" y="511.5" ></text>
</g>
<g >
<title>`stripAndComputeConstantOffsets(llvm::DataLayout const&amp;, llvm::V (1 samples, 0.05%)</title><rect x="1114.2" y="453" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="1117.18" y="463.5" ></text>
</g>
<g >
<title>`llvm::Value::stripPointerCasts() const (1 samples, 0.05%)</title><rect x="475.8" y="437" width="0.6" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="478.76" y="447.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1113.5" y="405" width="0.7" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="1116.54" y="415.5" ></text>
</g>
<g >
<title>`llvm::generic_gep_type_iterator&lt;llvm::Use const*&gt;::operator+ (1 samples, 0.05%)</title><rect x="691.1" y="389" width="0.6" height="15.0" fill="rgb(59,209,59)" rx="2" ry="2" />
<text  x="694.11" y="399.5" ></text>
</g>
<g >
<title>`llvm::generic_gep_type_iterator&lt;llvm::Use const*&gt;::operator+ (1 samples, 0.05%)</title><rect x="320.9" y="501" width="0.7" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="323.93" y="511.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (3 samples, 0.16%)</title><rect x="1105.3" y="453" width="1.9" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="1108.26" y="463.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::GetNonLocalInfoForBlock(llvm::In (32 samples, 1.73%)</title><rect x="181.4" y="517" width="20.4" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="184.39" y="527.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolutionWrapperPass::runOnFunction(llvm::Function&amp; (1 samples, 0.05%)</title><rect x="1168.3" y="549" width="0.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="1171.34" y="559.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (3 samples, 0.16%)</title><rect x="218.3" y="533" width="2.0" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="221.35" y="543.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="132.3" y="405" width="0.7" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="135.33" y="415.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::BasicBlock(llvm::LLVMContext&amp;, llvm::Twine co (1 samples, 0.05%)</title><rect x="412.0" y="453" width="0.7" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="415.04" y="463.5" ></text>
</g>
<g >
<title>`llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm::MemoryLocation, llvm:: (1 samples, 0.05%)</title><rect x="596.8" y="357" width="0.7" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="599.81" y="367.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="271.9" y="437" width="0.6" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="274.87" y="447.5" ></text>
</g>
<g >
<title>`llvm::hashing::detail::hash_short(char const*, unsigned long, u (1 samples, 0.05%)</title><rect x="687.9" y="325" width="0.7" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="690.93" y="335.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::CFGSimplifyPass::runOnFunction(llvm::Fun (1 samples, 0.05%)</title><rect x="245.1" y="645" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="248.11" y="655.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedUseBits(llvm::Value*, llvm: (2 samples, 0.11%)</title><rect x="1121.8" y="453" width="1.3" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="1124.83" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="469.4" y="469" width="0.6" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="472.38" y="479.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (2 samples, 0.11%)</title><rect x="617.2" y="197" width="1.3" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="620.20" y="207.5" ></text>
</g>
<g >
<title>`simplifyFunctionCFG(llvm::Function&amp;, llvm::TargetTransformInfo  (11 samples, 0.59%)</title><rect x="232.4" y="645" width="7.0" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="235.37" y="655.5" ></text>
</g>
<g >
<title>`llvm::GVN::findLeader(llvm::BasicBlock const*, unsigned int) (1 samples, 0.05%)</title><rect x="229.2" y="581" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="232.18" y="591.5" ></text>
</g>
<g >
<title>`isObjectDereferencedInBlock(llvm::Value*, llvm::BasicBlock*) (1 samples, 0.05%)</title><rect x="18.3" y="549" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="21.28" y="559.5" ></text>
</g>
<g >
<title>`llvm::salvageDebugInfo(llvm::Instruction&amp;) (1 samples, 0.05%)</title><rect x="278.2" y="581" width="0.7" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="281.24" y="591.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (12 samples, 0.65%)</title><rect x="499.3" y="405" width="7.7" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="502.33" y="415.5" ></text>
</g>
<g >
<title>`llvm::MemorySSAWalker::getClobberingMemoryAccess(llvm::Instruct (5 samples, 0.27%)</title><rect x="568.1" y="485" width="3.2" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="571.14" y="495.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std::__1:: (1 samples, 0.05%)</title><rect x="1104.6" y="453" width="0.7" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="1107.62" y="463.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="90.9" y="453" width="0.7" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="93.92" y="463.5" ></text>
</g>
<g >
<title>`0x5 (1,852 samples, 100.00%)</title><rect x="10.0" y="2277" width="1180.0" height="15.0" fill="rgb(185,185,53)" rx="2" ry="2" />
<text  x="13.00" y="2287.5" >`0x5</text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="557.3" y="309" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="560.31" y="319.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::AnalyzeUsesOfPointer(llvm::Value*, llvm: (1 samples, 0.05%)</title><rect x="351.5" y="629" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="354.51" y="639.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="72.4" y="517" width="0.7" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="75.44" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="450.3" y="469" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="453.27" y="479.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;std::__1::pair&lt;llvm::Basi (1 samples, 0.05%)</title><rect x="709.0" y="485" width="0.6" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="711.95" y="495.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Type*, llvm::PointerTyp (1 samples, 0.05%)</title><rect x="764.4" y="421" width="0.6" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="767.38" y="431.5" ></text>
</g>
<g >
<title>`llvm::getOrEnforceKnownAlignment(llvm::Value*, unsigned int, ll (6 samples, 0.32%)</title><rect x="110.0" y="581" width="3.9" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="113.03" y="591.5" ></text>
</g>
<g >
<title>`void llvm::BitstreamWriter::EmitRecordWithAbbrevImpl&lt;unsigned l (1 samples, 0.05%)</title><rect x="1183.6" y="677" width="0.7" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="1186.63" y="687.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getValueOnEdge(llvm:: (6 samples, 0.32%)</title><rect x="407.6" y="453" width="3.8" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="410.58" y="463.5" ></text>
</g>
<g >
<title>`llvm::GVN::findLeader(llvm::BasicBlock const*, unsigned int) (3 samples, 0.16%)</title><rect x="673.3" y="453" width="1.9" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="676.27" y="463.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (1 samples, 0.05%)</title><rect x="1123.7" y="453" width="0.7" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="1126.74" y="463.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="241.9" y="613" width="0.7" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="244.92" y="623.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="409.5" y="261" width="0.6" height="15.0" fill="rgb(200,200,59)" rx="2" ry="2" />
<text  x="412.49" y="271.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatticeElement, llvm::D (1 samples, 0.05%)</title><rect x="387.8" y="405" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="390.83" y="415.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasPHI(llvm::PHINode const*, unsigned lo (2 samples, 0.11%)</title><rect x="651.0" y="229" width="1.2" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="653.97" y="239.5" ></text>
</g>
<g >
<title>`void llvm::SmallVectorImpl&lt;llvm::BasicBlock*&gt;::append&lt;std::__1: (1 samples, 0.05%)</title><rect x="582.2" y="453" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="585.16" y="463.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (9 samples, 0.49%)</title><rect x="533.7" y="437" width="5.8" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="536.74" y="447.5" ></text>
</g>
<g >
<title>`getValueFromCondition(llvm::Value*, llvm::Value*, bool) (1 samples, 0.05%)</title><rect x="17.6" y="533" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="20.65" y="543.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="357.9" y="597" width="0.6" height="15.0" fill="rgb(216,216,65)" rx="2" ry="2" />
<text  x="360.88" y="607.5" ></text>
</g>
<g >
<title>`llvm::scc_iterator&lt;llvm::Function const*, llvm::GraphTraits&lt;llv (1 samples, 0.05%)</title><rect x="257.2" y="613" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="260.21" y="623.5" ></text>
</g>
<g >
<title>`std::__1::__split_buffer&lt;llvm::BasicBlock*, std::__1::allocator (1 samples, 0.05%)</title><rect x="412.7" y="437" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="415.68" y="447.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="437.5" y="469" width="0.7" height="15.0" fill="rgb(221,221,67)" rx="2" ry="2" />
<text  x="440.53" y="479.5" ></text>
</g>
<g >
<title>`llvm::BranchProbabilityInfo::calculate(llvm::Function const&amp;, l (7 samples, 0.38%)</title><rect x="741.4" y="533" width="4.5" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="744.45" y="543.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="250.2" y="581" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="253.21" y="591.5" ></text>
</g>
<g >
<title>`llvm::InstVisitor&lt;llvm::InstCombiner, llvm::Instruction*&gt;::dele (1 samples, 0.05%)</title><rect x="552.2" y="517" width="0.7" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="555.21" y="527.5" ></text>
</g>
<g >
<title>`llvm::ValueHandleBase::AddToExistingUseList(llvm::ValueHandleBa (27 samples, 1.46%)</title><rect x="958.1" y="421" width="17.2" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="961.08" y="431.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="284.6" y="469" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="287.61" y="479.5" ></text>
</g>
<g >
<title>`llvm::LazyValueInfo::getConstant(llvm::Value*, llvm::BasicBlock (6 samples, 0.32%)</title><rect x="13.2" y="613" width="3.8" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="16.19" y="623.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (4 samples, 0.22%)</title><rect x="247.0" y="613" width="2.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="250.02" y="623.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (24 samples, 1.30%)</title><rect x="461.1" y="501" width="15.3" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="464.10" y="511.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::zextOrTrunc(unsigned int) (1 samples, 0.05%)</title><rect x="549.0" y="437" width="0.7" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="552.03" y="447.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*) (2 samples, 0.11%)</title><rect x="580.9" y="549" width="1.3" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="583.89" y="559.5" ></text>
</g>
<g >
<title>`llvm::WeakTrackingVH* std::__1::uninitialized_copy&lt;std::__1::mo (32 samples, 1.73%)</title><rect x="954.9" y="437" width="20.4" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="957.89" y="447.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm: (1 samples, 0.05%)</title><rect x="582.8" y="485" width="0.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="585.80" y="495.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="96.0" y="437" width="0.7" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="99.02" y="447.5" ></text>
</g>
<g >
<title>`RUN-ALL/Users/karstenpoeck/lisp/compiler/clasp-karsten/src/lisp (1,852 samples, 100.00%)</title><rect x="10.0" y="2149" width="1180.0" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="13.00" y="2159.5" >`RUN-ALL/Users/karstenpoeck/lisp/compiler/clasp-karsten/src/lisp</text>
</g>
<g >
<title>`llvm::BasicAAResult::getModRefInfo(llvm::ImmutableCallSite, llv (2 samples, 0.11%)</title><rect x="108.1" y="501" width="1.3" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="111.12" y="511.5" ></text>
</g>
<g >
<title>`small_malloc_should_clear (1 samples, 0.05%)</title><rect x="157.2" y="517" width="0.6" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="160.18" y="527.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::Instruction*, llvm::SmallPtrSet&lt;llvm::Poin (1 samples, 0.05%)</title><rect x="642.7" y="357" width="0.6" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="645.69" y="367.5" ></text>
</g>
<g >
<title>`llvm::isFreeCall(llvm::Value const*, llvm::TargetLibraryInfo co (1 samples, 0.05%)</title><rect x="491.0" y="485" width="0.7" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="494.05" y="495.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::BasicBlock const*, std::__1::unique_ptr&lt;ll (1 samples, 0.05%)</title><rect x="579.6" y="485" width="0.6" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="582.61" y="495.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::DecomposeGEPExpression(llvm::Value const*, (1 samples, 0.05%)</title><rect x="203.1" y="373" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="206.06" y="383.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(llvm (51 samples, 2.75%)</title><rect x="178.2" y="533" width="32.5" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="181.21" y="543.5" >`l..</text>
</g>
<g >
<title>`instructionClobbersQuery(llvm::MemoryDef*, llvm::MemoryLocation (1 samples, 0.05%)</title><rect x="148.9" y="565" width="0.6" height="15.0" fill="rgb(99,244,99)" rx="2" ry="2" />
<text  x="151.90" y="575.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Type*, llvm::PointerTyp (1 samples, 0.05%)</title><rect x="1110.4" y="309" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="1113.36" y="319.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="731.9" y="389" width="0.6" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="734.89" y="399.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::Create(llvm::LLVMContext&amp;, llvm::Twine const&amp; (1 samples, 0.05%)</title><rect x="412.0" y="469" width="0.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="415.04" y="479.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (3 samples, 0.16%)</title><rect x="56.5" y="565" width="1.9" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="59.51" y="575.5" ></text>
</g>
<g >
<title>`getValueFromCondition(llvm::Value*, llvm::Value*, bool, llvm::D (1 samples, 0.05%)</title><rect x="35.5" y="469" width="0.6" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="38.49" y="479.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (3 samples, 0.16%)</title><rect x="1095.7" y="453" width="1.9" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="1098.70" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="731.9" y="405" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="734.89" y="415.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="601.9" y="389" width="0.6" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="604.91" y="399.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (3 samples, 0.16%)</title><rect x="627.4" y="293" width="1.9" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="630.40" y="303.5" ></text>
</g>
<g >
<title>`llvm::ConstantExprKeyType::getHash() const (1 samples, 0.05%)</title><rect x="748.5" y="405" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="751.46" y="415.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv_ov(llvm::APInt const&amp;, bool&amp;) const (2 samples, 0.11%)</title><rect x="69.3" y="549" width="1.2" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="72.25" y="559.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="619.1" y="165" width="0.7" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="622.11" y="175.5" ></text>
</g>
<g >
<title>`APPLY^COMMON-LISP^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="1525" width="1180.0" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="13.00" y="1535.5" >`APPLY^COMMON-LISP^FN^^</text>
</g>
<g >
<title>`bool llvm::PatternMatch::apint_match::match&lt;llvm::Value const&gt;( (1 samples, 0.05%)</title><rect x="317.7" y="533" width="0.7" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="320.74" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getValueOnEdge(llvm:: (1 samples, 0.05%)</title><rect x="406.3" y="421" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="409.31" y="431.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldGetElementPtr(llvm::Type*, llvm::Constant*, b (1 samples, 0.05%)</title><rect x="501.9" y="325" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="504.88" y="335.5" ></text>
</g>
<g >
<title>`llvm::getOrEnforceKnownAlignment(llvm::Value*, unsigned int, ll (6 samples, 0.32%)</title><rect x="1141.6" y="485" width="3.8" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="1144.58" y="495.5" ></text>
</g>
<g >
<title>`isUseTriviallyOptimizableToLiveOnEntry(llvm::AAResults&amp;, llvm:: (1 samples, 0.05%)</title><rect x="149.5" y="549" width="0.7" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="152.54" y="559.5" ></text>
</g>
<g >
<title>`llvm::ReplaceableMetadataImpl::getIfExists(llvm::Metadata&amp;) (1 samples, 0.05%)</title><rect x="76.9" y="565" width="0.6" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="79.90" y="575.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (2 samples, 0.11%)</title><rect x="222.8" y="517" width="1.3" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="225.81" y="527.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="260.4" y="549" width="0.6" height="15.0" fill="rgb(200,200,59)" rx="2" ry="2" />
<text  x="263.40" y="559.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedUseBits(llvm::Value*, llvm: (1 samples, 0.05%)</title><rect x="517.8" y="421" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="520.81" y="431.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value*&gt;::insert(llvm::Value*) (1 samples, 0.05%)</title><rect x="247.0" y="549" width="0.7" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="250.02" y="559.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="680.3" y="325" width="0.6" height="15.0" fill="rgb(223,223,67)" rx="2" ry="2" />
<text  x="683.28" y="335.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::Valu (1 samples, 0.05%)</title><rect x="849.1" y="421" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="852.13" y="431.5" ></text>
</g>
<g >
<title>`llvm::BranchProbabilityInfo::calculate(llvm::Function const&amp;, l (2 samples, 0.11%)</title><rect x="256.6" y="629" width="1.3" height="15.0" fill="rgb(59,209,59)" rx="2" ry="2" />
<text  x="259.58" y="639.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::IntegerType*, unsigned long long,  (1 samples, 0.05%)</title><rect x="767.6" y="421" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="770.57" y="431.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock const*, (1 samples, 0.05%)</title><rect x="567.5" y="469" width="0.6" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="570.51" y="479.5" ></text>
</g>
<g >
<title>`llvm::AAResults::Model&lt;llvm::TypeBasedAAResult&gt;::~Model() (1 samples, 0.05%)</title><rect x="429.9" y="533" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="432.88" y="543.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getSimplePointerDependencyFrom(l (24 samples, 1.30%)</title><rect x="644.0" y="357" width="15.3" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="646.96" y="367.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (8 samples, 0.43%)</title><rect x="121.5" y="581" width="5.1" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="124.50" y="591.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="685.4" y="293" width="0.6" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="688.38" y="303.5" ></text>
</g>
<g >
<title>`ThreadCmpOverSelect(llvm::CmpInst::Predicate, llvm::Value*, llv (1 samples, 0.05%)</title><rect x="295.4" y="565" width="0.7" height="15.0" fill="rgb(99,244,99)" rx="2" ry="2" />
<text  x="298.44" y="575.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getIndexedOffsetInType(llvm::Type*, llvm::Arr (1 samples, 0.05%)</title><rect x="443.9" y="453" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="446.90" y="463.5" ></text>
</g>
<g >
<title>`getFoldedCast(llvm::Instruction::CastOps, llvm::Constant*, llvm (1 samples, 0.05%)</title><rect x="262.9" y="581" width="0.7" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="265.95" y="591.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::Instruction*, llvm::SmallPtrSe (1 samples, 0.05%)</title><rect x="642.7" y="373" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="645.69" y="383.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="1126.9" y="485" width="0.7" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="1129.92" y="495.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (3 samples, 0.16%)</title><rect x="173.1" y="437" width="1.9" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="176.11" y="447.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="271.9" y="485" width="0.6" height="15.0" fill="rgb(199,199,59)" rx="2" ry="2" />
<text  x="274.87" y="495.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (3 samples, 0.16%)</title><rect x="83.3" y="549" width="1.9" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="86.27" y="559.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;llvm::Value const*, true&gt;::push_b (1 samples, 0.05%)</title><rect x="315.8" y="501" width="0.7" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="318.83" y="511.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, llvm (1 samples, 0.05%)</title><rect x="612.1" y="389" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="615.11" y="399.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="324.1" y="549" width="0.7" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="327.11" y="559.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldICmpUsingKnownBits(llvm::ICmpInst&amp;) (3 samples, 0.16%)</title><rect x="313.9" y="581" width="1.9" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="316.92" y="591.5" ></text>
</g>
<g >
<title>`llvm::CompositeType::getTypeAtIndex(llvm::Value const*) const (1 samples, 0.05%)</title><rect x="413.3" y="325" width="0.7" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="416.32" y="335.5" ></text>
</g>
<g >
<title>`llvm::getConstantDataArrayInfo(llvm::Value const*, llvm::Consta (1 samples, 0.05%)</title><rect x="74.4" y="549" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="77.35" y="559.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (2 samples, 0.11%)</title><rect x="218.3" y="469" width="1.3" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="221.35" y="479.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::Value*, llvm::ValueLatticeElem (1 samples, 0.05%)</title><rect x="35.5" y="437" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="38.49" y="447.5" ></text>
</g>
<g >
<title>`tiny_free_no_lock (2 samples, 0.11%)</title><rect x="577.7" y="469" width="1.3" height="15.0" fill="rgb(177,177,51)" rx="2" ry="2" />
<text  x="580.70" y="479.5" ></text>
</g>
<g >
<title>`llvm::MetadataTracking::untrack(void*, llvm::Metadata&amp;) (1 samples, 0.05%)</title><rect x="238.7" y="581" width="0.7" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="241.74" y="591.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::computeExitLimitFromCondImpl(llvm::Scala (1 samples, 0.05%)</title><rect x="250.8" y="421" width="0.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="253.84" y="431.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefBehavior(llvm::ImmutableCallSite) (1 samples, 0.05%)</title><rect x="571.3" y="469" width="0.7" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="574.33" y="479.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::createAddRecFromPHI(llvm::PHINode*) (1 samples, 0.05%)</title><rect x="131.1" y="469" width="0.6" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="134.06" y="479.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (1 samples, 0.05%)</title><rect x="413.3" y="421" width="0.7" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="416.32" y="431.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(llvm (104 samples, 5.62%)</title><rect x="604.5" y="437" width="66.2" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="607.46" y="447.5" >`llvm::..</text>
</g>
<g >
<title>`std::__1::__function::__func&lt;combineInstructionsOverFunction(ll (1 samples, 0.05%)</title><rect x="1125.6" y="421" width="0.7" height="15.0" fill="rgb(65,213,65)" rx="2" ry="2" />
<text  x="1128.65" y="431.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="685.4" y="277" width="0.6" height="15.0" fill="rgb(189,189,55)" rx="2" ry="2" />
<text  x="688.38" y="287.5" ></text>
</g>
<g >
<title>`llvm::Type::getScalarSizeInBits() const (1 samples, 0.05%)</title><rect x="521.6" y="421" width="0.7" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="524.63" y="431.5" ></text>
</g>
<g >
<title>`llvm::OperandBundleUser&lt;llvm::CallInst, llvm::Use*&gt;::getNumOper (1 samples, 0.05%)</title><rect x="617.2" y="133" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="620.20" y="143.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (3 samples, 0.16%)</title><rect x="70.5" y="533" width="1.9" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="73.53" y="543.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (2 samples, 0.11%)</title><rect x="34.2" y="501" width="1.3" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="37.21" y="511.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolutionWrapperPass::runOnFunction(llvm::Function&amp; (1 samples, 0.05%)</title><rect x="160.4" y="645" width="0.6" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="163.37" y="655.5" ></text>
</g>
<g >
<title>`llvm::TerminatorInst::getSuccessor(unsigned int) const (1 samples, 0.05%)</title><rect x="582.2" y="421" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="585.16" y="431.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="1119.9" y="421" width="0.7" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="1122.91" y="431.5" ></text>
</g>
<g >
<title>`llvm::Value* SimplifyCall&lt;llvm::Use*&gt;(llvm::ImmutableCallSite,  (1 samples, 0.05%)</title><rect x="1097.6" y="469" width="0.7" height="15.0" fill="rgb(95,242,95)" rx="2" ry="2" />
<text  x="1100.61" y="479.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (1 samples, 0.05%)</title><rect x="28.5" y="581" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="31.48" y="591.5" ></text>
</g>
<g >
<title>`getAllocationDataForFunction(llvm::Function const*, AllocType,  (1 samples, 0.05%)</title><rect x="201.1" y="421" width="0.7" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="204.14" y="431.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="572.0" y="453" width="0.6" height="15.0" fill="rgb(181,181,52)" rx="2" ry="2" />
<text  x="574.97" y="463.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1091.9" y="405" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="1094.88" y="415.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::CastClass_match&lt;llvm::PatternMatch::bi (1 samples, 0.05%)</title><rect x="312.0" y="581" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="315.01" y="591.5" ></text>
</g>
<g >
<title>`top.lsp-top130^522^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1685" width="1180.0" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="13.00" y="1695.5" >`top.lsp-top130^522^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`runImpl(llvm::Function&amp;, llvm::LazyValueInfo*, llvm::SimplifyQu (17 samples, 0.92%)</title><rect x="12.5" y="629" width="10.9" height="15.0" fill="rgb(83,231,83)" rx="2" ry="2" />
<text  x="15.55" y="639.5" ></text>
</g>
<g >
<title>`llvm::hashing::detail::hash_combine_recursive_helper::combine(u (1 samples, 0.05%)</title><rect x="166.7" y="485" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="169.74" y="495.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (1 samples, 0.05%)</title><rect x="134.2" y="453" width="0.7" height="15.0" fill="rgb(101,246,101)" rx="2" ry="2" />
<text  x="137.24" y="463.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&amp; (1 samples, 0.05%)</title><rect x="1116.7" y="389" width="0.7" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="1119.73" y="399.5" ></text>
</g>
<g >
<title>`llvm::LoopBase&lt;llvm::BasicBlock, llvm::Loop&gt;::getExitBlocks(llv (1 samples, 0.05%)</title><rect x="561.8" y="453" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="564.77" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (1 samples, 0.05%)</title><rect x="192.2" y="309" width="0.7" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="195.22" y="319.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::IndVarSimplify::run(llvm::Loop*) (1 samples, 0.05%)</title><rect x="555.4" y="517" width="0.6" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="558.40" y="527.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;void const*, llvm::PassI (1 samples, 0.05%)</title><rect x="342.0" y="597" width="0.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="344.95" y="607.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="247.7" y="533" width="0.6" height="15.0" fill="rgb(75,222,75)" rx="2" ry="2" />
<text  x="250.66" y="543.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::lookupOrAdd(llvm::Value*) (1 samples, 0.05%)</title><rect x="162.9" y="581" width="0.7" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="165.92" y="591.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="573.9" y="405" width="0.6" height="15.0" fill="rgb(210,210,62)" rx="2" ry="2" />
<text  x="576.88" y="415.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (2 samples, 0.11%)</title><rect x="522.3" y="373" width="1.2" height="15.0" fill="rgb(63,211,63)" rx="2" ry="2" />
<text  x="525.27" y="383.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="217.7" y="373" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="220.71" y="383.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="750.4" y="373" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="753.37" y="383.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (2 samples, 0.11%)</title><rect x="48.9" y="517" width="1.2" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="51.87" y="527.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitOr(llvm::BinaryOperator&amp;) (3 samples, 0.16%)</title><rect x="113.9" y="597" width="1.9" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="116.86" y="607.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="440.7" y="501" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="443.71" y="511.5" ></text>
</g>
<g >
<title>`std::__1::vector&lt;llvm::Constant*, std::__1::allocator&lt;llvm::Con (1 samples, 0.05%)</title><rect x="442.6" y="421" width="0.7" height="15.0" fill="rgb(89,235,89)" rx="2" ry="2" />
<text  x="445.62" y="431.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorImpl&lt;llvm::WeakTrackingVH&gt;::~SmallVectorImpl() (1 samples, 0.05%)</title><rect x="283.3" y="565" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="286.34" y="575.5" ></text>
</g>
<g >
<title>`instructionClobbersQuery(llvm::MemoryDef*, llvm::MemoryLocation (3 samples, 0.16%)</title><rect x="569.4" y="421" width="1.9" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="572.42" y="431.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (2 samples, 0.11%)</title><rect x="522.3" y="357" width="1.2" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="525.27" y="367.5" ></text>
</g>
<g >
<title>`core::SingleDispatchGenericFunctionClosure_O::entry_point(core: (6 samples, 0.32%)</title><rect x="1176.0" y="837" width="3.8" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="1178.98" y="847.5" ></text>
</g>
<g >
<title>`llvm::isPotentiallyReachable(llvm::BasicBlock const*, llvm::Bas (1 samples, 0.05%)</title><rect x="277.6" y="581" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="280.60" y="591.5" ></text>
</g>
<g >
<title>`free_tiny (1 samples, 0.05%)</title><rect x="70.5" y="517" width="0.7" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="73.53" y="527.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedUseBits(llvm::Value*, llvm: (1 samples, 0.05%)</title><rect x="81.4" y="565" width="0.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="84.36" y="575.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (1 samples, 0.05%)</title><rect x="405.0" y="389" width="0.7" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="408.03" y="399.5" ></text>
</g>
<g >
<title>`llvm::Value::setName(llvm::Twine const&amp;) (1 samples, 0.05%)</title><rect x="412.0" y="437" width="0.7" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="415.04" y="447.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::KnownBits(unsigned int) (1 samples, 0.05%)</title><rect x="539.5" y="437" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="542.47" y="447.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorBase::grow_pod(void*, unsigned long, unsigned  (1 samples, 0.05%)</title><rect x="140.6" y="549" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="143.62" y="559.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="90.9" y="485" width="0.7" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="93.92" y="495.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (1 samples, 0.05%)</title><rect x="557.3" y="293" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="560.31" y="303.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::zextOrTrunc(unsigned int) (1 samples, 0.05%)</title><rect x="306.9" y="453" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="309.91" y="463.5" ></text>
</g>
<g >
<title>`llvm::generic_gep_type_iterator&lt;llvm::Use const*&gt;::operator+ (1 samples, 0.05%)</title><rect x="594.3" y="309" width="0.6" height="15.0" fill="rgb(88,234,88)" rx="2" ry="2" />
<text  x="597.27" y="319.5" ></text>
</g>
<g >
<title>`free_tiny (1 samples, 0.05%)</title><rect x="155.3" y="565" width="0.6" height="15.0" fill="rgb(217,217,65)" rx="2" ry="2" />
<text  x="158.27" y="575.5" ></text>
</g>
<g >
<title>`llvm::isIdentifiedObject(llvm::Value const*) (1 samples, 0.05%)</title><rect x="620.4" y="245" width="0.6" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="623.39" y="255.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (2 samples, 0.11%)</title><rect x="522.3" y="437" width="1.2" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="525.27" y="447.5" ></text>
</g>
<g >
<title>`llvm::hashing::detail::hash_combine_recursive_helper::combine(u (1 samples, 0.05%)</title><rect x="410.1" y="325" width="0.7" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="413.13" y="335.5" ></text>
</g>
<g >
<title>`llvm::SROA::deleteDeadInstructions(llvm::SmallPtrSetImpl&lt;llvm:: (2 samples, 0.11%)</title><rect x="700.7" y="517" width="1.2" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="703.67" y="527.5" ></text>
</g>
<g >
<title>`llvm::APInt::APInt(unsigned int, unsigned long long, bool) (1 samples, 0.05%)</title><rect x="60.3" y="581" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="63.33" y="591.5" ></text>
</g>
<g >
<title>`bool llvm::OptBisect::shouldRunPass&lt;llvm::Function&gt;(llvm::Pass  (1 samples, 0.05%)</title><rect x="245.1" y="613" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="248.11" y="623.5" ></text>
</g>
<g >
<title>`computeOverflowForSignedAdd(llvm::Value const*, llvm::Value con (1 samples, 0.05%)</title><rect x="79.4" y="565" width="0.7" height="15.0" fill="rgb(77,224,77)" rx="2" ry="2" />
<text  x="82.45" y="575.5" ></text>
</g>
<g >
<title>`compiler-conditions.lsp-compiler-conditions125^205^TOP-COMPILE- (1,852 samples, 100.00%)</title><rect x="10.0" y="1221" width="1180.0" height="15.0" fill="rgb(55,169,169)" rx="2" ry="2" />
<text  x="13.00" y="1231.5" >`compiler-conditions.lsp-compiler-conditions125^205^TOP-COMPILE-</text>
</g>
<g >
<title>`llvm::InstCombiner::commonCastTransforms(llvm::CastInst&amp;) (1 samples, 0.05%)</title><rect x="277.6" y="597" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="280.60" y="607.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="1105.9" y="341" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="1108.90" y="351.5" ></text>
</g>
<g >
<title>`llvm::AllocaInst::AllocaInst(llvm::Type*, unsigned int, llvm::V (1 samples, 0.05%)</title><rect x="704.5" y="469" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="707.49" y="479.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, ll (1 samples, 0.05%)</title><rect x="315.2" y="533" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="318.19" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::JumpThreading::runOnFunction(llvm::Funct (36 samples, 1.94%)</title><rect x="401.8" y="549" width="23.0" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="404.85" y="559.5" >`..</text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="225.4" y="453" width="0.6" height="15.0" fill="rgb(52,201,52)" rx="2" ry="2" />
<text  x="228.36" y="463.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;llvm::Value*, true&gt;::push_back(ll (1 samples, 0.05%)</title><rect x="302.5" y="549" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="305.45" y="559.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasPHI(llvm::PHINode const*, unsigned lo (1 samples, 0.05%)</title><rect x="204.3" y="389" width="0.7" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="207.33" y="399.5" ></text>
</g>
<g >
<title>`startup(int, char**, bool&amp;, int&amp;, int&amp;) (1,852 samples, 100.00%)</title><rect x="10.0" y="2197" width="1180.0" height="15.0" fill="rgb(225,225,68)" rx="2" ry="2" />
<text  x="13.00" y="2207.5" >`startup(int, char**, bool&amp;, int&amp;, int&amp;)</text>
</g>
<g >
<title>`llvm::df_iterator&lt;llvm::BasicBlock*, llvm::df_iterator_default_ (1 samples, 0.05%)</title><rect x="22.7" y="613" width="0.7" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="25.74" y="623.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="544.6" y="357" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="547.57" y="367.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (1 samples, 0.05%)</title><rect x="203.7" y="357" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="206.69" y="367.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="384.0" y="405" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="387.01" y="415.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::eraseInstFromFunction(llvm::Instruction&amp;) (1 samples, 0.05%)</title><rect x="1133.9" y="485" width="0.7" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="1136.93" y="495.5" ></text>
</g>
<g >
<title>`llvm::PHITransAddr::PHITransAddr(llvm::Value*, llvm::DataLayout (1 samples, 0.05%)</title><rect x="568.8" y="389" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="571.78" y="399.5" ></text>
</g>
<g >
<title>`llvm::LoopBase&lt;llvm::BasicBlock, llvm::Loop&gt;::getExitingBlocks( (1 samples, 0.05%)</title><rect x="427.3" y="517" width="0.7" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="430.33" y="527.5" ></text>
</g>
<g >
<title>`llvm::findDbgValues(llvm::SmallVectorImpl&lt;llvm::DbgValueInst*&gt;&amp; (1 samples, 0.05%)</title><rect x="775.2" y="485" width="0.7" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="778.22" y="495.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="1168.3" y="533" width="0.7" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="1171.34" y="543.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getTerminator() const (1 samples, 0.05%)</title><rect x="237.5" y="629" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="240.46" y="639.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getAlignment(llvm::Type*, bool) const (1 samples, 0.05%)</title><rect x="650.3" y="229" width="0.7" height="15.0" fill="rgb(65,213,65)" rx="2" ry="2" />
<text  x="653.33" y="239.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObjects(llvm::Value*, llvm::SmallVectorImpl&lt; (2 samples, 0.11%)</title><rect x="34.2" y="533" width="1.3" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="37.21" y="543.5" ></text>
</g>
<g >
<title>`sanitizeFunctionName(llvm::StringRef) (1 samples, 0.05%)</title><rect x="550.9" y="453" width="0.7" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="553.94" y="463.5" ></text>
</g>
<g >
<title>`llvm::Value::stripPointerCasts() const (1 samples, 0.05%)</title><rect x="74.4" y="533" width="0.6" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="77.35" y="543.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::MapInfo::getHashVa (1 samples, 0.05%)</title><rect x="461.7" y="389" width="0.7" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="464.74" y="399.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getTerminator() const (1 samples, 0.05%)</title><rect x="555.4" y="405" width="0.6" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="558.40" y="415.5" ></text>
</g>
<g >
<title>`llvm::MemorySSA::~MemorySSA() (1 samples, 0.05%)</title><rect x="158.5" y="597" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="161.46" y="607.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitOr(llvm::BinaryOperator&amp;) (1 samples, 0.05%)</title><rect x="1138.4" y="501" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="1141.39" y="511.5" ></text>
</g>
<g >
<title>`llvm::Type::isSizedDerivedType(llvm::SmallPtrSetImpl&lt;llvm::Type (1 samples, 0.05%)</title><rect x="447.7" y="453" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="450.72" y="463.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="273.8" y="485" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="276.78" y="495.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="224.1" y="501" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="227.08" y="511.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (1 samples, 0.05%)</title><rect x="498.1" y="373" width="0.6" height="15.0" fill="rgb(69,218,69)" rx="2" ry="2" />
<text  x="501.06" y="383.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (2 samples, 0.11%)</title><rect x="65.4" y="517" width="1.3" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="68.43" y="527.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="512.7" y="325" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="515.71" y="335.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (1 samples, 0.05%)</title><rect x="204.3" y="357" width="0.7" height="15.0" fill="rgb(82,230,82)" rx="2" ry="2" />
<text  x="207.33" y="367.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObjects(llvm::Value*, llvm::SmallVectorImpl&lt; (1 samples, 0.05%)</title><rect x="27.2" y="565" width="0.6" height="15.0" fill="rgb(76,223,76)" rx="2" ry="2" />
<text  x="30.20" y="575.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatticeElement, llvm::D (2 samples, 0.11%)</title><rect x="382.7" y="405" width="1.3" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="385.73" y="415.5" ></text>
</g>
<g >
<title>`llvm::GEPOperator::hasAllZeroIndices() const (1 samples, 0.05%)</title><rect x="224.7" y="469" width="0.7" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="227.72" y="479.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeBase&lt;llvm::BasicBlock, false&gt;::dominates(llv (1 samples, 0.05%)</title><rect x="586.0" y="469" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="588.98" y="479.5" ></text>
</g>
<g >
<title>`isAlwaysLive(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="429.2" y="501" width="0.7" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="432.24" y="511.5" ></text>
</g>
<g >
<title>`core::IndirectVariadicMethoid&lt;core::policies::policies_&lt;&gt;, llvm (562 samples, 30.35%)</title><rect x="10.0" y="709" width="358.1" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="13.00" y="719.5" >`core::IndirectVariadicMethoid&lt;core::policies::p..</text>
</g>
<g >
<title>`llvm::formLCSSA(llvm::Loop&amp;, llvm::DominatorTree&amp;, llvm::LoopIn (1 samples, 0.05%)</title><rect x="424.8" y="517" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="427.78" y="527.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv_ov(llvm::APInt const&amp;, bool&amp;) const (1 samples, 0.05%)</title><rect x="559.9" y="421" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="562.86" y="431.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (1 samples, 0.05%)</title><rect x="565.6" y="501" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="568.59" y="511.5" ></text>
</g>
<g >
<title>`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="572.6" y="357" width="0.6" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="575.60" y="367.5" ></text>
</g>
<g >
<title>`addArgumentAttrs(llvm::SmallSetVector&lt;llvm::Function*, 8u&gt; cons (1 samples, 0.05%)</title><rect x="368.7" y="549" width="0.7" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="371.71" y="559.5" ></text>
</g>
<g >
<title>`ThreadCmpOverPHI(llvm::CmpInst::Predicate, llvm::Value*, llvm:: (1 samples, 0.05%)</title><rect x="731.3" y="485" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="734.25" y="495.5" ></text>
</g>
<g >
<title>`llvm::canConstantFoldCallTo(llvm::ImmutableCallSite, llvm::Func (1 samples, 0.05%)</title><rect x="617.8" y="149" width="0.7" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="620.84" y="159.5" ></text>
</g>
<g >
<title>`SIMPLE-EVAL^CLASP-CLEAVIR^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="1541" width="1180.0" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="13.00" y="1551.5" >`SIMPLE-EVAL^CLASP-CLEAVIR^FN^^</text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::GVN::Expression, unsign (2 samples, 0.11%)</title><rect x="696.2" y="453" width="1.3" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="699.21" y="463.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="388.5" y="437" width="0.6" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="391.47" y="447.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (5 samples, 0.27%)</title><rect x="1108.4" y="357" width="3.2" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="1111.44" y="367.5" ></text>
</g>
<g >
<title>`llvm::TargetTransformInfoWrapperPass::getTTI(llvm::Function con (1 samples, 0.05%)</title><rect x="730.0" y="533" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="732.98" y="543.5" ></text>
</g>
<g >
<title>`llvm::Value::stripPointerCasts() const (1 samples, 0.05%)</title><rect x="529.3" y="453" width="0.6" height="15.0" fill="rgb(72,221,72)" rx="2" ry="2" />
<text  x="532.28" y="463.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;void const*, llvm::PassInfo c (1 samples, 0.05%)</title><rect x="342.0" y="613" width="0.6" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="344.95" y="623.5" ></text>
</g>
<g >
<title>`llvm::IRBuilderBase::SetInsertPoint(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="236.8" y="549" width="0.7" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="239.83" y="559.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitAllocaInst(llvm::AllocaInst&amp;) (1 samples, 0.05%)</title><rect x="283.3" y="597" width="0.7" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="286.34" y="607.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std:: (1 samples, 0.05%)</title><rect x="434.3" y="485" width="0.7" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="437.34" y="495.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="192.2" y="325" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="195.22" y="335.5" ></text>
</g>
<g >
<title>`llvm::APInt::APInt(unsigned int, unsigned long long, bool) (1 samples, 0.05%)</title><rect x="541.4" y="469" width="0.6" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="544.38" y="479.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="83.9" y="517" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="86.91" y="527.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::Instruction const*, unsigned i (1 samples, 0.05%)</title><rect x="1183.0" y="661" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="1185.99" y="671.5" ></text>
</g>
<g >
<title>`llvm::InstCombineWorklist::AddInitialGroup(llvm::ArrayRef&lt;llvm: (1 samples, 0.05%)</title><rect x="61.6" y="613" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="64.61" y="623.5" ></text>
</g>
<g >
<title>`llvm::CallGraph::addToCallGraph(llvm::Function*) (3 samples, 0.16%)</title><rect x="728.1" y="549" width="1.9" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="731.07" y="559.5" ></text>
</g>
<g >
<title>`szone_size (1 samples, 0.05%)</title><rect x="868.2" y="437" width="0.7" height="15.0" fill="rgb(224,224,67)" rx="2" ry="2" />
<text  x="871.24" y="447.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;unsigned int, llvm::GVN::LeaderTableEntry, llvm: (1 samples, 0.05%)</title><rect x="171.2" y="517" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="174.20" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldGetElementPtr(llvm::Type*, llvm::Constant*, b (1 samples, 0.05%)</title><rect x="295.4" y="389" width="0.7" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="298.44" y="399.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (4 samples, 0.22%)</title><rect x="593.6" y="341" width="2.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="596.63" y="351.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="693.0" y="405" width="0.7" height="15.0" fill="rgb(75,222,75)" rx="2" ry="2" />
<text  x="696.02" y="415.5" ></text>
</g>
<g >
<title>`llvm::PostDominatorTreeWrapperPass::runOnFunction(llvm::Functio (2 samples, 0.11%)</title><rect x="582.2" y="549" width="1.2" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="585.16" y="559.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std::__1:: (3 samples, 0.16%)</title><rect x="1164.5" y="501" width="1.9" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="1167.51" y="511.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="249.6" y="581" width="0.6" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="252.57" y="591.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1333" width="1180.0" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="13.00" y="1343.5" >`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::ValueHandleBase::RemoveFromUseList() (25 samples, 1.35%)</title><rect x="939.0" y="421" width="15.9" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="941.96" y="431.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::pointsToConstantMemory(llvm::MemoryLocatio (1 samples, 0.05%)</title><rect x="527.4" y="405" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="530.37" y="415.5" ></text>
</g>
<g >
<title>`ConstructSSAForLoadSet(llvm::LoadInst*, llvm::SmallVectorImpl&lt;l (1 samples, 0.05%)</title><rect x="601.3" y="437" width="0.6" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="604.27" y="447.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock** std::__1::uninitialized_copy&lt;std::__1::rever (1 samples, 0.05%)</title><rect x="582.2" y="437" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="585.16" y="447.5" ></text>
</g>
<g >
<title>`llvm::formLCSSARecursively(llvm::Loop&amp;, llvm::DominatorTree&amp;, l (2 samples, 0.11%)</title><rect x="425.4" y="485" width="1.3" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="428.42" y="495.5" ></text>
</g>
<g >
<title>`llvm::FPPassManager::runOnFunction(llvm::Function&amp;) (559 samples, 30.18%)</title><rect x="370.0" y="565" width="356.2" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="372.99" y="575.5" >`llvm::FPPassManager::runOnFunction(llvm::Functi..</text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyMultipleUseDemandedBits(llvm::Instr (1 samples, 0.05%)</title><rect x="1124.4" y="421" width="0.6" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="1127.37" y="431.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::u (1 samples, 0.05%)</title><rect x="219.0" y="373" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="221.98" y="383.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::transformConstExprCastCall(llvm::CallSite) (1 samples, 0.05%)</title><rect x="1093.2" y="469" width="0.6" height="15.0" fill="rgb(77,224,77)" rx="2" ry="2" />
<text  x="1096.15" y="479.5" ></text>
</g>
<g >
<title>`void llvm::AAResults::addAAResult&lt;llvm::BasicAAResult&gt;(llvm::Ba (1 samples, 0.05%)</title><rect x="431.8" y="533" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="434.79" y="543.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="281.4" y="533" width="0.7" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="284.43" y="543.5" ></text>
</g>
<g >
<title>`llvm::wouldInstructionBeTriviallyDead(llvm::Instruction*, llvm: (1 samples, 0.05%)</title><rect x="330.5" y="597" width="0.6" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="333.49" y="607.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ADCELegacyPass::runOnFunction(llvm::Func (4 samples, 0.22%)</title><rect x="370.0" y="549" width="2.5" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="372.99" y="559.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getPointerSize(unsigned int) const (1 samples, 0.05%)</title><rect x="1126.9" y="469" width="0.7" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="1129.92" y="479.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="570.7" y="341" width="0.6" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="573.69" y="351.5" ></text>
</g>
<g >
<title>`llvm::PredIteratorCache::GetPreds(llvm::BasicBlock*) (1 samples, 0.05%)</title><rect x="661.2" y="405" width="0.6" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="664.17" y="415.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;llvm::Value*, true&gt;::push_back(ll (1 samples, 0.05%)</title><rect x="262.9" y="549" width="0.7" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="265.95" y="559.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getModule() const (1 samples, 0.05%)</title><rect x="1127.6" y="469" width="0.6" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="1130.56" y="479.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="436.3" y="469" width="0.6" height="15.0" fill="rgb(194,194,57)" rx="2" ry="2" />
<text  x="439.25" y="479.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="638.2" y="389" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="641.23" y="399.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::freePass(llvm::Pass*, llvm::StringRef, llv (9 samples, 0.49%)</title><rect x="575.2" y="533" width="5.7" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="578.15" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (3 samples, 0.16%)</title><rect x="461.1" y="469" width="1.9" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="464.10" y="479.5" ></text>
</g>
<g >
<title>`operator delete(void*) (1 samples, 0.05%)</title><rect x="66.7" y="517" width="0.6" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="69.71" y="527.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::Instruction const*, unsigned int, llvm::De (1 samples, 0.05%)</title><rect x="1183.0" y="645" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="1185.99" y="655.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="652.2" y="213" width="0.7" height="15.0" fill="rgb(216,216,64)" rx="2" ry="2" />
<text  x="655.25" y="223.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1116.7" y="437" width="0.7" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="1119.73" y="447.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="120.2" y="549" width="0.7" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="123.23" y="559.5" ></text>
</g>
<g >
<title>`iterativelySimplifyCFG(llvm::Function&amp;, llvm::TargetTransformIn (4 samples, 0.22%)</title><rect x="348.3" y="629" width="2.6" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="351.33" y="639.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (1 samples, 0.05%)</title><rect x="596.2" y="309" width="0.6" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="599.18" y="319.5" ></text>
</g>
<g >
<title>`llvm::PMTopLevelManager::findAnalysisPass(void const*) (2 samples, 0.11%)</title><rect x="44.4" y="597" width="1.3" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="47.41" y="607.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (2 samples, 0.11%)</title><rect x="374.4" y="437" width="1.3" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="377.45" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="136.8" y="565" width="0.6" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="139.79" y="575.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="442.6" y="341" width="0.7" height="15.0" fill="rgb(182,182,52)" rx="2" ry="2" />
<text  x="445.62" y="351.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::KnownBits(unsigned int) (2 samples, 0.11%)</title><rect x="1144.1" y="453" width="1.3" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="1147.13" y="463.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction const*, uns (1 samples, 0.05%)</title><rect x="1183.0" y="629" width="0.6" height="15.0" fill="rgb(101,246,101)" rx="2" ry="2" />
<text  x="1185.99" y="639.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getStructLayout(llvm::StructType*) const (1 samples, 0.05%)</title><rect x="85.2" y="565" width="0.6" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="88.18" y="575.5" ></text>
</g>
<g >
<title>`llvm::CompositeType::getTypeAtIndex(llvm::Value const*) const (1 samples, 0.05%)</title><rect x="505.1" y="309" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="508.06" y="319.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (2 samples, 0.11%)</title><rect x="319.0" y="469" width="1.3" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="322.02" y="479.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldICmpUsingKnownBits(llvm::ICmpInst&amp;) (7 samples, 0.38%)</title><rect x="515.9" y="485" width="4.5" height="15.0" fill="rgb(52,201,52)" rx="2" ry="2" />
<text  x="518.90" y="495.5" ></text>
</g>
<g >
<title>`tiny_size (1 samples, 0.05%)</title><rect x="639.5" y="373" width="0.6" height="15.0" fill="rgb(194,194,57)" rx="2" ry="2" />
<text  x="642.50" y="383.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (1 samples, 0.05%)</title><rect x="136.8" y="581" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="139.79" y="591.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1124.4" y="309" width="0.6" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="1127.37" y="319.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LoopSimplify::runOnFunction(llvm::Functi (1 samples, 0.05%)</title><rect x="738.3" y="549" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="741.26" y="559.5" ></text>
</g>
<g >
<title>`llvm::MetadataTracking::track(void*, llvm::Metadata&amp;, llvm::Poi (1 samples, 0.05%)</title><rect x="326.7" y="597" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="329.66" y="607.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::alias(llvm::MemoryLocation const&amp;, llvm::M (4 samples, 0.22%)</title><rect x="172.5" y="469" width="2.5" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="175.47" y="479.5" ></text>
</g>
<g >
<title>`llvm::JumpThreadingPass::FindLoopHeaders(llvm::Function&amp;) (1 samples, 0.05%)</title><rect x="402.5" y="517" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="405.48" y="527.5" ></text>
</g>
<g >
<title>`llvm::PHITransAddr::PHITranslateSubExpr(llvm::Value*, llvm::Bas (1 samples, 0.05%)</title><rect x="602.5" y="373" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="605.55" y="383.5" ></text>
</g>
<g >
<title>`tiny_size (1 samples, 0.05%)</title><rect x="1189.4" y="565" width="0.6" height="15.0" fill="rgb(200,200,59)" rx="2" ry="2" />
<text  x="1192.36" y="575.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorImpl&lt;void*&gt;::operator=(llvm::SmallVectorImpl&lt;v (1 samples, 0.05%)</title><rect x="438.8" y="437" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="441.80" y="447.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObjects(llvm::Value*, llvm::SmallVectorImpl&lt; (1 samples, 0.05%)</title><rect x="497.4" y="421" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="500.42" y="431.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeWrapperPass::runOnFunction(llvm::Function&amp;) (12 samples, 0.65%)</title><rect x="433.1" y="549" width="7.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="436.07" y="559.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="709.0" y="421" width="0.6" height="15.0" fill="rgb(184,184,53)" rx="2" ry="2" />
<text  x="711.95" y="431.5" ></text>
</g>
<g >
<title>`core::IndirectVariadicMethoid&lt;core::policies::policies_&lt;&gt;, llvm (1,268 samples, 68.47%)</title><rect x="368.1" y="613" width="807.9" height="15.0" fill="rgb(71,220,71)" rx="2" ry="2" />
<text  x="371.08" y="623.5" >`core::IndirectVariadicMethoid&lt;core::policies::policies_&lt;&gt;, llvm</text>
</g>
<g >
<title>`SimplifyShift(llvm::Instruction::BinaryOps, llvm::Value*, llvm: (1 samples, 0.05%)</title><rect x="222.2" y="549" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="225.17" y="559.5" ></text>
</g>
<g >
<title>`llvm::hash_value(llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="462.4" y="373" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="465.38" y="383.5" ></text>
</g>
<g >
<title>`stripAndComputeConstantOffsets(llvm::DataLayout const&amp;, llvm::V (1 samples, 0.05%)</title><rect x="97.3" y="549" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="100.29" y="559.5" ></text>
</g>
<g >
<title>`llvm::collectChildrenInLoop(llvm::DomTreeNodeBase&lt;llvm::BasicBl (1 samples, 0.05%)</title><rect x="139.3" y="581" width="0.7" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="142.34" y="591.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1122.5" y="309" width="0.6" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="1125.46" y="319.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SimplifyCFGOpt::SimplifySwitch(llvm::Swi (1 samples, 0.05%)</title><rect x="717.9" y="485" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="720.87" y="495.5" ></text>
</g>
<g >
<title>`llvm::TypeBasedAAResult::alias(llvm::MemoryLocation const&amp;, llv (1 samples, 0.05%)</title><rect x="202.4" y="373" width="0.7" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="205.42" y="383.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="17.6" y="453" width="0.7" height="15.0" fill="rgb(181,181,52)" rx="2" ry="2" />
<text  x="20.65" y="463.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, unsi (1 samples, 0.05%)</title><rect x="276.3" y="581" width="0.7" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="279.33" y="591.5" ></text>
</g>
<g >
<title>`core::SingleDispatchMethodFunction_O::entry_point(core::T_O*, u (6 samples, 0.32%)</title><rect x="1176.0" y="805" width="3.8" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="1178.98" y="815.5" ></text>
</g>
<g >
<title>`llvm::ValueHandleBase::AddToUseList() (1 samples, 0.05%)</title><rect x="250.8" y="293" width="0.7" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="253.84" y="303.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="647.1" y="85" width="0.7" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="650.15" y="95.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="612.7" y="357" width="0.7" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="615.74" y="367.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::computeExitLimitFromCondCached(llvm::Sca (1 samples, 0.05%)</title><rect x="250.8" y="437" width="0.7" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="253.84" y="447.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (2 samples, 0.11%)</title><rect x="635.0" y="341" width="1.3" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="638.04" y="351.5" ></text>
</g>
<g >
<title>`llvm::computeOverflowForSignedAdd(llvm::Value const*, llvm::Val (2 samples, 0.11%)</title><rect x="280.2" y="581" width="1.2" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="283.15" y="591.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitCallInst(llvm::CallInst&amp;) (4 samples, 0.22%)</title><rect x="82.6" y="597" width="2.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="85.63" y="607.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitShl(llvm::BinaryOperator&amp;) (1 samples, 0.05%)</title><rect x="325.4" y="597" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="328.39" y="607.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm::Valu (2 samples, 0.11%)</title><rect x="667.5" y="373" width="1.3" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="670.54" y="383.5" ></text>
</g>
<g >
<title>`free (1 samples, 0.05%)</title><rect x="65.4" y="501" width="0.7" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="68.43" y="511.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getTerminator() const (2 samples, 0.11%)</title><rect x="563.0" y="485" width="1.3" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="566.05" y="495.5" ></text>
</g>
<g >
<title>`llvm::iplist_impl&lt;llvm::simple_ilist&lt;llvm::AliasSet&gt;, llvm::ili (1 samples, 0.05%)</title><rect x="136.2" y="565" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="139.16" y="575.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeBase&lt;llvm::BasicBlock, false&gt;::dominates(llv (3 samples, 0.16%)</title><rect x="673.3" y="437" width="1.9" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="676.27" y="447.5" ></text>
</g>
<g >
<title>`llvm::StringMapImpl::FindKey(llvm::StringRef) const (1 samples, 0.05%)</title><rect x="703.9" y="469" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="706.86" y="479.5" ></text>
</g>
<g >
<title>`top.lsp-top130^522^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1669" width="1180.0" height="15.0" fill="rgb(82,194,194)" rx="2" ry="2" />
<text  x="13.00" y="1679.5" >`top.lsp-top130^522^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="176.9" y="501" width="0.7" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="179.93" y="511.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;std::__1::pair&lt;llvm::BasicBlock*, (1 samples, 0.05%)</title><rect x="210.7" y="533" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="213.70" y="543.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::recordAvailableAnalysis(llvm::Pass*) (1 samples, 0.05%)</title><rect x="240.6" y="661" width="0.7" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="243.65" y="671.5" ></text>
</g>
<g >
<title>`llvm::gvn::AvailableValue::MaterializeAdjustedValue(llvm::LoadI (1 samples, 0.05%)</title><rect x="598.7" y="437" width="0.7" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="601.73" y="447.5" ></text>
</g>
<g >
<title>`llvm::ValueEnumerator::purgeFunction() (1 samples, 0.05%)</title><rect x="1182.4" y="693" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="1185.35" y="703.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="647.8" y="245" width="0.6" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="650.79" y="255.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::ValueHand (1 samples, 0.05%)</title><rect x="929.4" y="453" width="0.6" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="932.41" y="463.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="409.5" y="309" width="0.6" height="15.0" fill="rgb(210,210,62)" rx="2" ry="2" />
<text  x="412.49" y="319.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="723.6" y="373" width="0.6" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="726.61" y="383.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="90.9" y="421" width="0.7" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="93.92" y="431.5" ></text>
</g>
<g >
<title>`default_zone_malloc (1 samples, 0.05%)</title><rect x="152.7" y="485" width="0.7" height="15.0" fill="rgb(204,204,60)" rx="2" ry="2" />
<text  x="155.72" y="495.5" ></text>
</g>
<g >
<title>`llvm::EliminateDuplicatePHINodes(llvm::BasicBlock*) (2 samples, 0.11%)</title><rect x="722.3" y="485" width="1.3" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="725.33" y="495.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;void const*, llvm::PassInfo c (1 samples, 0.05%)</title><rect x="240.6" y="613" width="0.7" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="243.65" y="623.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LoopInvariantCodeMotion::runOnLoop(llvm: (13 samples, 0.70%)</title><rect x="133.0" y="613" width="8.3" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="135.97" y="623.5" ></text>
</g>
<g >
<title>`llvm::ConstantExprKeyType::getHash() const (1 samples, 0.05%)</title><rect x="59.7" y="533" width="0.6" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="62.70" y="543.5" ></text>
</g>
<g >
<title>`llvm::ReplaceableMetadataImpl::getOrCreate(llvm::Metadata&amp;) (1 samples, 0.05%)</title><rect x="725.5" y="453" width="0.7" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="728.52" y="463.5" ></text>
</g>
<g >
<title>`std::__1::__split_buffer&lt;llvm::DomTreeNodeBase&lt;llvm::BasicBlock (1 samples, 0.05%)</title><rect x="260.4" y="581" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="263.40" y="591.5" ></text>
</g>
<g >
<title>`llvm::GEPOperator::accumulateConstantOffset(llvm::DataLayout co (1 samples, 0.05%)</title><rect x="275.1" y="533" width="0.6" height="15.0" fill="rgb(83,231,83)" rx="2" ry="2" />
<text  x="278.05" y="543.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (2 samples, 0.11%)</title><rect x="47.6" y="533" width="1.3" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="50.59" y="543.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (3 samples, 0.16%)</title><rect x="218.3" y="501" width="2.0" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="221.35" y="511.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::IntegerType*, unsigned long long,  (1 samples, 0.05%)</title><rect x="59.1" y="533" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="62.06" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SCCPSolver::markEdgeExecutable(llvm::Bas (1 samples, 0.05%)</title><rect x="709.0" y="501" width="0.6" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="711.95" y="511.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm:: (1 samples, 0.05%)</title><rect x="597.5" y="389" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="600.45" y="399.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getValueOnEdge(llvm:: (12 samples, 0.65%)</title><rect x="377.0" y="485" width="7.6" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="380.00" y="495.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::dumpUsedSet(llvm::Pass const*) const (1 samples, 0.05%)</title><rect x="574.5" y="549" width="0.7" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="577.51" y="559.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="273.1" y="517" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="276.14" y="527.5" ></text>
</g>
<g >
<title>`llvm::ObjectSizeOffsetVisitor::compute(llvm::Value*) (1 samples, 0.05%)</title><rect x="644.6" y="261" width="0.6" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="647.60" y="271.5" ></text>
</g>
<g >
<title>`getSizeWithOverflow(std::__1::pair&lt;llvm::APInt, llvm::APInt&gt; co (2 samples, 0.11%)</title><rect x="186.5" y="373" width="1.3" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="189.49" y="383.5" ></text>
</g>
<g >
<title>`llvm::IsConstantOffsetFromGlobal(llvm::Constant*, llvm::GlobalV (3 samples, 0.16%)</title><rect x="473.2" y="453" width="1.9" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="476.21" y="463.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="647.8" y="181" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="650.79" y="191.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="582.2" y="517" width="0.6" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="585.16" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldCastInstruction(unsigned int, llvm::Constant* (1 samples, 0.05%)</title><rect x="468.7" y="453" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="471.75" y="463.5" ></text>
</g>
<g >
<title>`_platform_memmove$VARIANT$Nehalem (1 samples, 0.05%)</title><rect x="588.5" y="405" width="0.7" height="15.0" fill="rgb(181,181,52)" rx="2" ry="2" />
<text  x="591.53" y="415.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="1174.7" y="485" width="0.6" height="15.0" fill="rgb(188,188,54)" rx="2" ry="2" />
<text  x="1177.71" y="495.5" ></text>
</g>
<g >
<title>`getAllocationData(llvm::Value const*, AllocType, llvm::TargetLi (1 samples, 0.05%)</title><rect x="679.0" y="373" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="682.01" y="383.5" ></text>
</g>
<g >
<title>`llvm::BlockFrequencyInfo::calculate(llvm::Function const&amp;, llvm (4 samples, 0.22%)</title><rect x="254.0" y="629" width="2.6" height="15.0" fill="rgb(94,241,94)" rx="2" ry="2" />
<text  x="257.03" y="639.5" ></text>
</g>
<g >
<title>`isDereferenceableAndAlignedPointer(llvm::Value const*, unsigned (1 samples, 0.05%)</title><rect x="233.6" y="533" width="0.7" height="15.0" fill="rgb(58,208,58)" rx="2" ry="2" />
<text  x="236.64" y="543.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::find_imp(void const*) const (1 samples, 0.05%)</title><rect x="36.1" y="565" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="39.12" y="575.5" ></text>
</g>
<g >
<title>`FUNWIND-PROTECT^CORE^FN^^ (6 samples, 0.32%)</title><rect x="1176.0" y="853" width="3.8" height="15.0" fill="rgb(104,215,215)" rx="2" ry="2" />
<text  x="1178.98" y="863.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solve() (3 samples, 0.16%)</title><rect x="387.2" y="469" width="1.9" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="390.19" y="479.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasSelect(llvm::SelectInst const*, unsig (4 samples, 0.22%)</title><rect x="650.3" y="293" width="2.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="653.33" y="303.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::DecomposeGEPExpression(llvm::Value const*, (2 samples, 0.11%)</title><rect x="614.7" y="293" width="1.2" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="617.65" y="303.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&amp; (2 samples, 0.11%)</title><rect x="1142.2" y="389" width="1.3" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="1145.21" y="399.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldLoadFromConstPtr(llvm::Constant*, llvm::Type* (1 samples, 0.05%)</title><rect x="476.4" y="501" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="479.39" y="511.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="656.7" y="277" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="659.71" y="287.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitLoadInst(llvm::LoadInst&amp;) (1 samples, 0.05%)</title><rect x="551.6" y="517" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="554.58" y="527.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::commonCastTransforms(llvm::CastInst&amp;) (3 samples, 0.16%)</title><rect x="773.3" y="501" width="1.9" height="15.0" fill="rgb(88,234,88)" rx="2" ry="2" />
<text  x="776.30" y="511.5" ></text>
</g>
<g >
<title>`realloc (2 samples, 0.11%)</title><rect x="867.0" y="437" width="1.2" height="15.0" fill="rgb(185,185,53)" rx="2" ry="2" />
<text  x="869.97" y="447.5" ></text>
</g>
<g >
<title>`szone_realloc (1 samples, 0.05%)</title><rect x="259.8" y="517" width="0.6" height="15.0" fill="rgb(184,184,53)" rx="2" ry="2" />
<text  x="262.76" y="527.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="194.1" y="293" width="0.7" height="15.0" fill="rgb(188,188,55)" rx="2" ry="2" />
<text  x="197.14" y="303.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="194.1" y="277" width="0.7" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="197.14" y="287.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="600.0" y="405" width="0.6" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="603.00" y="415.5" ></text>
</g>
<g >
<title>`malloc_zone_realloc (1 samples, 0.05%)</title><rect x="1076.0" y="453" width="0.6" height="15.0" fill="rgb(194,194,57)" rx="2" ry="2" />
<text  x="1078.95" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (1 samples, 0.05%)</title><rect x="102.4" y="549" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="105.39" y="559.5" ></text>
</g>
<g >
<title>`llvm::SymbolTableListTraits&lt;llvm::BasicBlock&gt;::removeNodeFromLi (2 samples, 0.11%)</title><rect x="1177.9" y="693" width="1.3" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="1180.89" y="703.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::AssumptionCache::A (1 samples, 0.05%)</title><rect x="1147.9" y="421" width="0.7" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="1150.95" y="431.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorImpl&lt;llvm::SCEV const*&gt;::operator=(llvm::Small (1 samples, 0.05%)</title><rect x="206.2" y="517" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="209.24" y="527.5" ></text>
</g>
<g >
<title>`llvm::AAResults::pointsToConstantMemory(llvm::MemoryLocation co (2 samples, 0.11%)</title><rect x="138.1" y="565" width="1.2" height="15.0" fill="rgb(106,252,106)" rx="2" ry="2" />
<text  x="141.07" y="575.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock const*, unsi (1 samples, 0.05%)</title><rect x="257.2" y="565" width="0.7" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="260.21" y="575.5" ></text>
</g>
<g >
<title>`free_tiny (1 samples, 0.05%)</title><rect x="1163.2" y="517" width="0.7" height="15.0" fill="rgb(185,185,53)" rx="2" ry="2" />
<text  x="1166.24" y="527.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getTerminator() const (1 samples, 0.05%)</title><rect x="558.6" y="469" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="561.59" y="479.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="572.0" y="469" width="0.6" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="574.97" y="479.5" ></text>
</g>
<g >
<title>`llvm::SSAUpdater::RewriteUse(llvm::Use&amp;) (1 samples, 0.05%)</title><rect x="424.8" y="485" width="0.6" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="427.78" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LoopInvariantCodeMotion::runOnLoop(llvm: (2 samples, 0.11%)</title><rect x="1158.8" y="517" width="1.3" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="1161.78" y="527.5" ></text>
</g>
<g >
<title>`llvm::APInt::initSlowCase(llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="132.3" y="469" width="0.7" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="135.33" y="479.5" ></text>
</g>
<g >
<title>`llvm::Type::isSized(llvm::SmallPtrSetImpl&lt;llvm::Type*&gt;*) const (1 samples, 0.05%)</title><rect x="445.2" y="453" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="448.17" y="463.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="375.1" y="373" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="378.09" y="383.5" ></text>
</g>
<g >
<title>`llvm::generic_gep_type_iterator&lt;llvm::Value* const*&gt;::operator+ (1 samples, 0.05%)</title><rect x="689.2" y="405" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="692.20" y="415.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::BasicBlock*, llvm::SSAUpdaterI (1 samples, 0.05%)</title><rect x="737.0" y="389" width="0.6" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="739.99" y="399.5" ></text>
</g>
<g >
<title>`llvm::OperandBundleUser&lt;llvm::CallInst, llvm::Use*&gt;::hasClobber (1 samples, 0.05%)</title><rect x="528.6" y="421" width="0.7" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="531.64" y="431.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm (1 samples, 0.05%)</title><rect x="622.3" y="261" width="0.6" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="625.30" y="271.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeAllocSize(llvm::Type*) const (1 samples, 0.05%)</title><rect x="679.6" y="309" width="0.7" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="682.64" y="319.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value const*, llvm (1 samples, 0.05%)</title><rect x="1179.2" y="693" width="0.6" height="15.0" fill="rgb(59,209,59)" rx="2" ry="2" />
<text  x="1182.17" y="703.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::FoldReinterpretLoadFromConstPtr(llvm::Co (1 samples, 0.05%)</title><rect x="1112.3" y="357" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="1115.27" y="367.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (2 samples, 0.11%)</title><rect x="306.3" y="469" width="1.2" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="309.27" y="479.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::getOrCreate(llvm:: (1 samples, 0.05%)</title><rect x="95.4" y="421" width="0.6" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="98.38" y="431.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;llvm::Function const*,  (1 samples, 0.05%)</title><rect x="352.8" y="485" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="355.79" y="495.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::alias(llvm::MemoryLocation const&amp;, llvm: (1 samples, 0.05%)</title><rect x="557.3" y="277" width="0.6" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="560.31" y="287.5" ></text>
</g>
<g >
<title>`llvm::APInt::operator (1 samples, 0.05%)</title><rect x="452.8" y="437" width="0.7" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="455.82" y="447.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getAlignmentInfo(llvm::AlignTypeEnum, unsigne (1 samples, 0.05%)</title><rect x="189.7" y="373" width="0.6" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="192.68" y="383.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoCache::isOverdefined(llvm:: (1 samples, 0.05%)</title><rect x="417.1" y="389" width="0.7" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="420.14" y="399.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&amp; (1 samples, 0.05%)</title><rect x="734.4" y="453" width="0.7" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="737.44" y="463.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^33^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="997" width="1180.0" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="13.00" y="1007.5" >`compile-file.lsp-compile-file52^33^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::ScalarEvolution::getSmallConstantTripCount(llvm::Loop con (1 samples, 0.05%)</title><rect x="1160.1" y="501" width="0.6" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="1163.05" y="511.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedInstructionBits(llvm::Instr (1 samples, 0.05%)</title><rect x="484.7" y="485" width="0.6" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="487.68" y="495.5" ></text>
</g>
<g >
<title>`llvm::PromoteMemToReg(llvm::ArrayRef&lt;llvm::AllocaInst*&gt;, llvm:: (4 samples, 0.22%)</title><rect x="701.9" y="501" width="2.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="704.94" y="511.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (2 samples, 0.11%)</title><rect x="759.3" y="421" width="1.3" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="762.29" y="431.5" ></text>
</g>
<g >
<title>`llvm::APInt::setBits(unsigned int, unsigned int) (1 samples, 0.05%)</title><rect x="119.6" y="501" width="0.6" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="122.59" y="511.5" ></text>
</g>
<g >
<title>`llvm::computeOverflowForUnsignedAdd(llvm::Value const*, llvm::V (2 samples, 0.11%)</title><rect x="281.4" y="581" width="1.3" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="284.43" y="591.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (7 samples, 0.38%)</title><rect x="1107.8" y="373" width="4.5" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="1110.81" y="383.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="397.4" y="437" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="400.39" y="447.5" ></text>
</g>
<g >
<title>`llvm::InlineFunction(llvm::CallSite, llvm::InlineFunctionInfo&amp;, (1 samples, 0.05%)</title><rect x="726.2" y="549" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="729.16" y="559.5" ></text>
</g>
<g >
<title>`tlv_get_addr (1 samples, 0.05%)</title><rect x="239.4" y="645" width="0.6" height="15.0" fill="rgb(199,199,59)" rx="2" ry="2" />
<text  x="242.37" y="655.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldTerminator(llvm::BasicBlock*, bool, llvm::Tar (1 samples, 0.05%)</title><rect x="1172.2" y="533" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="1175.16" y="543.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (2 samples, 0.11%)</title><rect x="92.2" y="533" width="1.3" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="95.19" y="543.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::DomTreeNodeBase&lt;llvm::BasicBlock&gt;*&gt; (1 samples, 0.05%)</title><rect x="152.7" y="565" width="0.7" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="155.72" y="575.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (17 samples, 0.92%)</title><rect x="644.6" y="341" width="10.8" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="647.60" y="351.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp_big(void const*) (1 samples, 0.05%)</title><rect x="19.6" y="501" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="22.56" y="511.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getAlignment(llvm::Type*, bool) const (1 samples, 0.05%)</title><rect x="1143.5" y="405" width="0.6" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="1146.49" y="415.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="619.1" y="213" width="0.7" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="622.11" y="223.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasPHI(llvm::PHINode const*, unsigned lo (5 samples, 0.27%)</title><rect x="624.2" y="309" width="3.2" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="627.21" y="319.5" ></text>
</g>
<g >
<title>`WRITE-BITCODE^COMPILER^FN^^ (16 samples, 0.86%)</title><rect x="1179.8" y="821" width="10.2" height="15.0" fill="rgb(92,203,203)" rx="2" ry="2" />
<text  x="1182.81" y="831.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="120.2" y="421" width="0.7" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="123.23" y="431.5" ></text>
</g>
<g >
<title>`bitTrackingDCE(llvm::Function&amp;, llvm::DemandedBits&amp;) (2 samples, 0.11%)</title><rect x="40.6" y="645" width="1.3" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="43.58" y="655.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="196.7" y="373" width="0.6" height="15.0" fill="rgb(216,216,65)" rx="2" ry="2" />
<text  x="199.68" y="383.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (3 samples, 0.16%)</title><rect x="218.3" y="485" width="2.0" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="221.35" y="495.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolutionWrapperPass::releaseMemory() (1 samples, 0.05%)</title><rect x="343.9" y="613" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="346.87" y="623.5" ></text>
</g>
<g >
<title>`llvm::Value::deleteValue() (2 samples, 0.11%)</title><rect x="1176.6" y="661" width="1.3" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="1179.62" y="671.5" ></text>
</g>
<g >
<title>`llvm::APInt::zextOrTrunc(unsigned int) const (1 samples, 0.05%)</title><rect x="28.5" y="469" width="0.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="31.48" y="479.5" ></text>
</g>
<g >
<title>`llvm::APInt::zextOrTrunc(unsigned int) const (1 samples, 0.05%)</title><rect x="1149.9" y="389" width="0.6" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="1152.86" y="399.5" ></text>
</g>
<g >
<title>`stripAndComputeConstantOffsets(llvm::DataLayout const&amp;, llvm::V (1 samples, 0.05%)</title><rect x="681.6" y="421" width="0.6" height="15.0" fill="rgb(53,202,53)" rx="2" ry="2" />
<text  x="684.56" y="431.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std:: (1 samples, 0.05%)</title><rect x="325.4" y="453" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="328.39" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="298.6" y="453" width="0.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="301.63" y="463.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="545.8" y="485" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="548.84" y="495.5" ></text>
</g>
<g >
<title>`llvm::LoopAccessInfo::LoopAccessInfo(llvm::Loop*, llvm::ScalarE (1 samples, 0.05%)</title><rect x="250.8" y="565" width="0.7" height="15.0" fill="rgb(107,253,107)" rx="2" ry="2" />
<text  x="253.84" y="575.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoCache::hasCachedValueInfo(l (1 samples, 0.05%)</title><rect x="387.2" y="421" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="390.19" y="431.5" ></text>
</g>
<g >
<title>`llvm::hash_value(llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="219.0" y="357" width="0.6" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="221.98" y="367.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::FindBucketFor(void const*) const (1 samples, 0.05%)</title><rect x="14.5" y="469" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="17.46" y="479.5" ></text>
</g>
<g >
<title>`llvm::FindAvailableLoadedValue(llvm::LoadInst*, llvm::BasicBloc (10 samples, 0.54%)</title><rect x="1127.6" y="485" width="6.3" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="1130.56" y="495.5" ></text>
</g>
<g >
<title>`llvm::APInt::clearUnusedBits() (1 samples, 0.05%)</title><rect x="538.2" y="357" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="541.20" y="367.5" ></text>
</g>
<g >
<title>`SimplifyWithOpReplaced(llvm::Value*, llvm::Value*, llvm::Value* (1 samples, 0.05%)</title><rect x="224.7" y="533" width="0.7" height="15.0" fill="rgb(58,208,58)" rx="2" ry="2" />
<text  x="227.72" y="543.5" ></text>
</g>
<g >
<title>`llvm::MDNode::classof(llvm::Metadata const*) (1 samples, 0.05%)</title><rect x="772.0" y="453" width="0.7" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="775.03" y="463.5" ></text>
</g>
<g >
<title>`llvm::haveNoCommonBitsSet(llvm::Value const*, llvm::Value const (1 samples, 0.05%)</title><rect x="777.8" y="485" width="0.6" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="780.76" y="495.5" ></text>
</g>
<g >
<title>`getOutermostLoop(llvm::LoopInfo const*, llvm::BasicBlock const* (1 samples, 0.05%)</title><rect x="773.3" y="437" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="776.30" y="447.5" ></text>
</g>
<g >
<title>`llvm::LazyValueInfo::getConstantOnEdge(llvm::Value*, llvm::Basi (6 samples, 0.32%)</title><rect x="407.6" y="469" width="3.8" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="410.58" y="479.5" ></text>
</g>
<g >
<title>`free (1 samples, 0.05%)</title><rect x="395.5" y="437" width="0.6" height="15.0" fill="rgb(202,202,60)" rx="2" ry="2" />
<text  x="398.48" y="447.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedBits(llvm::Instruction*, un (1 samples, 0.05%)</title><rect x="1124.4" y="437" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="1127.37" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solve() (5 samples, 0.27%)</title><rect x="37.4" y="549" width="3.2" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="40.40" y="559.5" ></text>
</g>
<g >
<title>`llvm::ObjectSizeOffsetVisitor::visitGlobalVariable(llvm::Global (1 samples, 0.05%)</title><rect x="188.4" y="357" width="0.6" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="191.40" y="367.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="731.3" y="389" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="734.25" y="399.5" ></text>
</g>
<g >
<title>`std::__1::__split_buffer&lt;llvm::DomTreeNodeBase&lt;llvm::BasicBlock (2 samples, 0.11%)</title><rect x="48.9" y="581" width="1.2" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="51.87" y="591.5" ></text>
</g>
<g >
<title>`llvm::Value::setNameImpl(llvm::Twine const&amp;) (2 samples, 0.11%)</title><rect x="706.4" y="389" width="1.3" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="709.40" y="399.5" ></text>
</g>
<g >
<title>`void llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt; (1 samples, 0.05%)</title><rect x="582.8" y="517" width="0.6" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="585.80" y="527.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::zextOrTrunc(unsigned int) (1 samples, 0.05%)</title><rect x="1149.9" y="405" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="1152.86" y="415.5" ></text>
</g>
<g >
<title>`tiny_free_no_lock (1 samples, 0.05%)</title><rect x="579.6" y="405" width="0.6" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="582.61" y="415.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::Value*, llvm::ValueHandleBase* (14 samples, 0.76%)</title><rect x="1062.6" y="421" width="8.9" height="15.0" fill="rgb(63,211,63)" rx="2" ry="2" />
<text  x="1065.57" y="431.5" ></text>
</g>
<g >
<title>`APPLY^COMMON-LISP^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="1445" width="1180.0" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="13.00" y="1455.5" >`APPLY^COMMON-LISP^FN^^</text>
</g>
<g >
<title>`llvm::DataLayout::getTypeAllocSize(llvm::Type*) const (1 samples, 0.05%)</title><rect x="73.1" y="533" width="0.6" height="15.0" fill="rgb(69,218,69)" rx="2" ry="2" />
<text  x="76.08" y="543.5" ></text>
</g>
<g >
<title>`llvm::Value::getValueName() const (1 samples, 0.05%)</title><rect x="603.2" y="421" width="0.6" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="606.19" y="431.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::ScalarEvolution(llvm::Function&amp;, llvm::T (1 samples, 0.05%)</title><rect x="584.1" y="533" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="587.07" y="543.5" ></text>
</g>
<g >
<title>`llvm::legacy::PassManagerImpl::run(llvm::Module&amp;) (1,268 samples, 68.47%)</title><rect x="368.1" y="597" width="807.9" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="371.08" y="607.5" >`llvm::legacy::PassManagerImpl::run(llvm::Module&amp;)</text>
</g>
<g >
<title>`isAddOfNonZero(llvm::Value const*, llvm::Value const*, (anonymo (1 samples, 0.05%)</title><rect x="682.2" y="437" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="685.19" y="447.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="619.1" y="197" width="0.7" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="622.11" y="207.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="382.1" y="325" width="0.6" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="385.10" y="335.5" ></text>
</g>
<g >
<title>`llvm::MemorySSA::renameSuccessorPhis(llvm::BasicBlock*, llvm::M (2 samples, 0.11%)</title><rect x="573.2" y="485" width="1.3" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="576.24" y="495.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm::Mem (1 samples, 0.05%)</title><rect x="134.9" y="469" width="0.6" height="15.0" fill="rgb(75,222,75)" rx="2" ry="2" />
<text  x="137.88" y="479.5" ></text>
</g>
<g >
<title>`llvm::User::growHungoffUses(unsigned int, bool) (1 samples, 0.05%)</title><rect x="573.9" y="453" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="576.88" y="463.5" ></text>
</g>
<g >
<title>`simplifyICmpWithConstant(llvm::CmpInst::Predicate, llvm::Value* (1 samples, 0.05%)</title><rect x="220.9" y="533" width="0.6" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="223.90" y="543.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::getAliasSetForPointer(llvm::Value*, unsi (2 samples, 0.11%)</title><rect x="333.7" y="549" width="1.2" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="336.67" y="559.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="544.6" y="373" width="0.6" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="547.57" y="383.5" ></text>
</g>
<g >
<title>`llvm::MapVector&lt;llvm::BasicBlock*, llvm::Value*, llvm::DenseMap (1 samples, 0.05%)</title><rect x="177.6" y="533" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="180.57" y="543.5" ></text>
</g>
<g >
<title>`llvm::ConstantRange::getUnsignedMax() const (1 samples, 0.05%)</title><rect x="234.9" y="549" width="0.7" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="237.91" y="559.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="247.0" y="533" width="0.7" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="250.02" y="543.5" ></text>
</g>
<g >
<title>`llvm::APInt::APInt(unsigned int, unsigned long long, bool) (1 samples, 0.05%)</title><rect x="1119.3" y="485" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="1122.28" y="495.5" ></text>
</g>
<g >
<title>`llvm::IsConstantOffsetFromGlobal(llvm::Constant*, llvm::GlobalV (1 samples, 0.05%)</title><rect x="275.1" y="549" width="0.6" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="278.05" y="559.5" ></text>
</g>
<g >
<title>`llvm::formLCSSARecursively(llvm::Loop&amp;, llvm::DominatorTree&amp;, l (2 samples, 0.11%)</title><rect x="425.4" y="517" width="1.3" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="428.42" y="527.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hash_combine&lt;bool, unsigned int&gt;(bool con (1 samples, 0.05%)</title><rect x="148.3" y="565" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="151.26" y="575.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (2 samples, 0.11%)</title><rect x="34.2" y="485" width="1.3" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="37.21" y="495.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="650.3" y="213" width="0.7" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="653.33" y="223.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatt (1 samples, 0.05%)</title><rect x="17.0" y="533" width="0.6" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="20.01" y="543.5" ></text>
</g>
<g >
<title>`top.lsp-top130^378^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1813" width="1180.0" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="13.00" y="1823.5" >`top.lsp-top130^378^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::JumpThreadingPass::ProcessBlock(llvm::BasicBlock*) (13 samples, 0.70%)</title><rect x="32.3" y="613" width="8.3" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="35.30" y="623.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ClobberWalker::addSearches(llvm::MemoryP (1 samples, 0.05%)</title><rect x="568.8" y="437" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="571.78" y="447.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::BasicBlock const*&gt;::insert(llvm::Ba (2 samples, 0.11%)</title><rect x="143.8" y="565" width="1.3" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="146.80" y="575.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;std::__1::pair&lt;llvm::Memo (2 samples, 0.11%)</title><rect x="193.5" y="341" width="1.3" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="196.50" y="351.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::alias(llvm::MemoryLocation const&amp;, llvm::M (18 samples, 0.97%)</title><rect x="185.9" y="437" width="11.4" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="188.85" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solveBlockValueImpl(l (3 samples, 0.16%)</title><rect x="38.7" y="533" width="1.9" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="41.67" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::FoldReinterpretLoadFromConstPtr(llvm::Co (3 samples, 0.16%)</title><rect x="473.2" y="469" width="1.9" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="476.21" y="479.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getValueOnEdge(llvm:: (5 samples, 0.27%)</title><rect x="37.4" y="565" width="3.2" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="40.40" y="575.5" ></text>
</g>
<g >
<title>`llvm::isNoAliasCall(llvm::Value const*) (1 samples, 0.05%)</title><rect x="653.5" y="293" width="0.7" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="656.52" y="303.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (1 samples, 0.05%)</title><rect x="281.4" y="549" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="284.43" y="559.5" ></text>
</g>
<g >
<title>`llvm::CmpInst::getSwappedPredicate(llvm::CmpInst::Predicate) (1 samples, 0.05%)</title><rect x="213.3" y="517" width="0.6" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="216.25" y="527.5" ></text>
</g>
<g >
<title>`llvm::Module::~Module() (6 samples, 0.32%)</title><rect x="1176.0" y="757" width="3.8" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="1178.98" y="767.5" ></text>
</g>
<g >
<title>`llvm::iplist_impl&lt;llvm::simple_ilist&lt;llvm::MemoryAccess, llvm:: (1 samples, 0.05%)</title><rect x="158.5" y="549" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="161.46" y="559.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="1102.1" y="469" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="1105.07" y="479.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (3 samples, 0.16%)</title><rect x="222.8" y="533" width="1.9" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="225.81" y="543.5" ></text>
</g>
<g >
<title>`llvm::EliminateDuplicatePHINodes(llvm::BasicBlock*) (1 samples, 0.05%)</title><rect x="1171.5" y="485" width="0.7" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="1174.52" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LoopInvariantCodeMotion::runOnLoop(llvm: (8 samples, 0.43%)</title><rect x="556.0" y="517" width="5.1" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="559.04" y="527.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (1 samples, 0.05%)</title><rect x="90.9" y="549" width="0.7" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="93.92" y="559.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="699.4" y="453" width="0.6" height="15.0" fill="rgb(192,192,56)" rx="2" ry="2" />
<text  x="702.40" y="463.5" ></text>
</g>
<g >
<title>`llvm::GEPOperator::hasAllZeroIndices() const (1 samples, 0.05%)</title><rect x="301.2" y="437" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="304.18" y="447.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1149.9" y="421" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="1152.86" y="431.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std:: (1 samples, 0.05%)</title><rect x="745.9" y="501" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="748.91" y="511.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::getRangeRef(llvm::SCEV const*, llvm::Sca (1 samples, 0.05%)</title><rect x="132.3" y="517" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="135.33" y="527.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::Grow(unsigned int) (1 samples, 0.05%)</title><rect x="241.3" y="581" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="244.29" y="591.5" ></text>
</g>
<g >
<title>`szone_size_try_large (1 samples, 0.05%)</title><rect x="783.5" y="469" width="0.6" height="15.0" fill="rgb(225,225,68)" rx="2" ry="2" />
<text  x="786.50" y="479.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;unsigned int, llvm::GVN::Lead (1 samples, 0.05%)</title><rect x="591.7" y="453" width="0.7" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="594.72" y="463.5" ></text>
</g>
<g >
<title>`llvm::ScopedHashTable&lt;(anonymous namespace)::SimpleValue, llvm: (1 samples, 0.05%)</title><rect x="25.9" y="613" width="0.7" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="28.93" y="623.5" ></text>
</g>
<g >
<title>`llvm::AAResults::callCapturesBefore(llvm::Instruction const*, l (1 samples, 0.05%)</title><rect x="197.3" y="453" width="0.7" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="200.32" y="463.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (6 samples, 0.32%)</title><rect x="318.4" y="533" width="3.8" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="321.38" y="543.5" ></text>
</g>
<g >
<title>`llvm::SparseSolver&lt;llvm::PointerIntPair&lt;llvm::Value*, 2u, (anon (3 samples, 0.16%)</title><rect x="359.2" y="645" width="1.9" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="362.16" y="655.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="221.5" y="469" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="224.53" y="479.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="508.3" y="405" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="511.25" y="415.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock const*, std: (1 samples, 0.05%)</title><rect x="158.5" y="565" width="0.6" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="161.46" y="575.5" ></text>
</g>
<g >
<title>`getAllocationData(llvm::Value const*, AllocType, llvm::TargetLi (1 samples, 0.05%)</title><rect x="287.2" y="565" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="290.16" y="575.5" ></text>
</g>
<g >
<title>`computeKnownBitsAddSub(bool, llvm::Value const*, llvm::Value co (1 samples, 0.05%)</title><rect x="544.6" y="341" width="0.6" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="547.57" y="351.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="59.7" y="517" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="62.70" y="527.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="271.9" y="421" width="0.6" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="274.87" y="431.5" ></text>
</g>
<g >
<title>`llvm::SSAUpdater::GetValueInMiddleOfBlock(llvm::BasicBlock*) (1 samples, 0.05%)</title><rect x="737.0" y="469" width="0.6" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="739.99" y="479.5" ></text>
</g>
<g >
<title>`free_small (1 samples, 0.05%)</title><rect x="415.2" y="421" width="0.7" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="418.23" y="431.5" ></text>
</g>
<g >
<title>`bool llvm::CallInst::hasFnAttrImpl&lt;llvm::Attribute::AttrKind&gt;(l (1 samples, 0.05%)</title><rect x="1097.6" y="437" width="0.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="1100.61" y="447.5" ></text>
</g>
<g >
<title>`llvm::CompositeType::getTypeAtIndex(llvm::Value const*) const (1 samples, 0.05%)</title><rect x="396.1" y="421" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="399.11" y="431.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (1 samples, 0.05%)</title><rect x="280.8" y="533" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="283.79" y="543.5" ></text>
</g>
<g >
<title>`malloc (2 samples, 0.11%)</title><rect x="48.9" y="549" width="1.2" height="15.0" fill="rgb(190,190,55)" rx="2" ry="2" />
<text  x="51.87" y="559.5" ></text>
</g>
<g >
<title>`isObjectSmallerThan(llvm::Value const*, unsigned long long, llv (1 samples, 0.05%)</title><rect x="172.5" y="437" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="175.47" y="447.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (1 samples, 0.05%)</title><rect x="734.4" y="501" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="737.44" y="511.5" ></text>
</g>
<g >
<title>`llvm::removeUnreachableBlocks(llvm::Function&amp;, llvm::LazyValueI (2 samples, 0.11%)</title><rect x="423.5" y="517" width="1.3" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="426.51" y="527.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="110.7" y="469" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="113.67" y="479.5" ></text>
</g>
<g >
<title>`llvm::hashing::detail::hash_short(char const*, unsigned long, u (1 samples, 0.05%)</title><rect x="148.3" y="549" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="151.26" y="559.5" ></text>
</g>
<g >
<title>`llvm::formLCSSARecursively(llvm::Loop&amp;, llvm::DominatorTree&amp;, l (1 samples, 0.05%)</title><rect x="737.6" y="485" width="0.7" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="740.62" y="495.5" ></text>
</g>
<g >
<title>`llvm::Value::doRAUW(llvm::Value*, bool) (1 samples, 0.05%)</title><rect x="545.8" y="501" width="0.7" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="548.84" y="511.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;llvm::Value*, llvm::Opt (1 samples, 0.05%)</title><rect x="114.5" y="533" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="117.49" y="543.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeAllocSize(llvm::Type*) const (1 samples, 0.05%)</title><rect x="513.3" y="389" width="0.7" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="516.35" y="399.5" ></text>
</g>
<g >
<title>`llvm::Instruction::getMetadataImpl(unsigned int) const (1 samples, 0.05%)</title><rect x="310.1" y="549" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="313.10" y="559.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value*&gt;::find(llvm::Value const*) c (2 samples, 0.11%)</title><rect x="380.8" y="389" width="1.3" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="383.82" y="399.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="647.1" y="181" width="0.7" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="650.15" y="191.5" ></text>
</g>
<g >
<title>`llvm::MemorySSA::placePHINodes(llvm::SmallPtrSetImpl&lt;llvm::Basi (2 samples, 0.11%)</title><rect x="152.7" y="597" width="1.3" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="155.72" y="607.5" ></text>
</g>
<g >
<title>`CATCH-LAMBDA^CC-GENERATE-AST^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="1621" width="1180.0" height="15.0" fill="rgb(55,169,169)" rx="2" ry="2" />
<text  x="13.00" y="1631.5" >`CATCH-LAMBDA^CC-GENERATE-AST^FN^^</text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (1 samples, 0.05%)</title><rect x="32.9" y="597" width="0.7" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="35.94" y="607.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::PoisoningVH&lt;llvm::Basic (1 samples, 0.05%)</title><rect x="13.8" y="501" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="16.82" y="511.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="596.2" y="325" width="0.6" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="599.18" y="335.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="309.5" y="517" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="312.46" y="527.5" ></text>
</g>
<g >
<title>`llvm::scc_iterator&lt;llvm::CallGraph*, llvm::GraphTraits&lt;llvm::Ca (1 samples, 0.05%)</title><rect x="1175.3" y="533" width="0.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="1178.35" y="543.5" ></text>
</g>
<g >
<title>`free (1 samples, 0.05%)</title><rect x="466.2" y="421" width="0.6" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="469.20" y="431.5" ></text>
</g>
<g >
<title>`llvm::recognizeBSwapOrBitReverseIdiom(llvm::Instruction*, bool, (1 samples, 0.05%)</title><rect x="323.5" y="565" width="0.6" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="326.48" y="575.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getSimplePointerDependencyFrom(l (24 samples, 1.30%)</title><rect x="644.0" y="373" width="15.3" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="646.96" y="383.5" ></text>
</g>
<g >
<title>`llvm::PHITransAddr::PHITranslateSubExpr(llvm::Value*, llvm::Bas (1 samples, 0.05%)</title><rect x="662.4" y="389" width="0.7" height="15.0" fill="rgb(52,201,52)" rx="2" ry="2" />
<text  x="665.44" y="399.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::GVN::Expression, unsigned int&gt; (1 samples, 0.05%)</title><rect x="589.2" y="421" width="0.6" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="592.17" y="431.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value const*&gt;::insert(llvm::Value c (1 samples, 0.05%)</title><rect x="652.9" y="277" width="0.6" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="655.88" y="287.5" ></text>
</g>
<g >
<title>`llvm::InstVisitor&lt;llvm::InstCombiner, llvm::Instruction*&gt;::visi (1 samples, 0.05%)</title><rect x="127.9" y="613" width="0.6" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="130.87" y="623.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::CastClass_match&lt;llvm::PatternMatch::bi (1 samples, 0.05%)</title><rect x="515.3" y="437" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="518.26" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::DivRemPairsLegacyPass::runOnFunction(llv (1 samples, 0.05%)</title><rect x="245.7" y="645" width="0.7" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="248.75" y="655.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="1168.3" y="517" width="0.7" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="1171.34" y="527.5" ></text>
</g>
<g >
<title>`computeKnownBitsAddSub(bool, llvm::Value const*, llvm::Value co (1 samples, 0.05%)</title><rect x="1124.4" y="357" width="0.6" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="1127.37" y="367.5" ></text>
</g>
<g >
<title>`tiny_size (1 samples, 0.05%)</title><rect x="157.8" y="549" width="0.7" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="160.82" y="559.5" ></text>
</g>
<g >
<title>`llvm::StringMapImpl::RemoveKey(llvm::StringRef) (1 samples, 0.05%)</title><rect x="703.9" y="485" width="0.6" height="15.0" fill="rgb(83,231,83)" rx="2" ry="2" />
<text  x="706.86" y="495.5" ></text>
</g>
<g >
<title>`tiny_size (1 samples, 0.05%)</title><rect x="808.3" y="453" width="0.7" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="811.35" y="463.5" ></text>
</g>
<g >
<title>`SimplifyShift(llvm::Instruction::BinaryOps, llvm::Value*, llvm: (1 samples, 0.05%)</title><rect x="521.6" y="453" width="0.7" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="524.63" y="463.5" ></text>
</g>
<g >
<title>`eliminateLoadsAcrossLoops(llvm::Function&amp;, llvm::LoopInfo&amp;, llv (1 samples, 0.05%)</title><rect x="250.8" y="629" width="0.7" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="253.84" y="639.5" ></text>
</g>
<g >
<title>`SimplifyLShrInst(llvm::Value*, llvm::Value*, bool, llvm::Simpli (1 samples, 0.05%)</title><rect x="1123.7" y="485" width="0.7" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="1126.74" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::IndVarSimplifyLegacyPass::runOnLoop(llvm (1 samples, 0.05%)</title><rect x="555.4" y="533" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="558.40" y="543.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="326.0" y="533" width="0.7" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="329.03" y="543.5" ></text>
</g>
<g >
<title>`llvm::MemorySSA::buildMemorySSA() (13 samples, 0.70%)</title><rect x="566.2" y="517" width="8.3" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="569.23" y="527.5" ></text>
</g>
<g >
<title>`free_tiny (1 samples, 0.05%)</title><rect x="422.2" y="453" width="0.7" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="425.24" y="463.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LegacyLICMPass::runOnLoop(llvm::Loop*, l (13 samples, 0.70%)</title><rect x="133.0" y="629" width="8.3" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="135.97" y="639.5" ></text>
</g>
<g >
<title>`llvm::BitcodeWriter::writeModule(llvm::Module const*, bool, llv (12 samples, 0.65%)</title><rect x="1179.8" y="741" width="7.7" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="1182.81" y="751.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="654.8" y="309" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="657.79" y="319.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::BasicBlock*, std::__1::unique_ptr&lt;llvm::Do (1 samples, 0.05%)</title><rect x="575.2" y="501" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="578.15" y="511.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::freePass(llvm::Pass*, llvm::StringRef, llv (3 samples, 0.16%)</title><rect x="342.6" y="629" width="1.9" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="345.59" y="639.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std::__1:: (1 samples, 0.05%)</title><rect x="343.2" y="597" width="0.7" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="346.23" y="607.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="765.0" y="373" width="0.7" height="15.0" fill="rgb(214,214,64)" rx="2" ry="2" />
<text  x="768.02" y="383.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1091.9" y="373" width="0.6" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="1094.88" y="383.5" ></text>
</g>
<g >
<title>`llvm::AssumptionCache::assumptionsFor(llvm::Value const*) (1 samples, 0.05%)</title><rect x="1147.9" y="437" width="0.7" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="1150.95" y="447.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::alias(llvm::MemoryLocation const&amp;, llvm: (1 samples, 0.05%)</title><rect x="645.2" y="277" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="648.24" y="287.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1122.5" y="277" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="1125.46" y="287.5" ></text>
</g>
<g >
<title>`llvm::Argument::hasByValAttr() const (1 samples, 0.05%)</title><rect x="191.6" y="325" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="194.59" y="335.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (7 samples, 0.38%)</title><rect x="501.2" y="357" width="4.5" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="504.24" y="367.5" ></text>
</g>
<g >
<title>`DO-TRACK-LLVM-TIME^COMPILER^FN^^ (16 samples, 0.86%)</title><rect x="1179.8" y="853" width="10.2" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="1182.81" y="863.5" ></text>
</g>
<g >
<title>`llvm::APInt::APInt(llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="248.3" y="501" width="0.6" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="251.29" y="511.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="1114.2" y="405" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="1117.18" y="415.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="572.0" y="437" width="0.6" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="574.97" y="447.5" ></text>
</g>
<g >
<title>`std::__1::vector&lt;llvm::NonLocalDepEntry, std::__1::allocator&lt;ll (1 samples, 0.05%)</title><rect x="210.1" y="517" width="0.6" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="213.06" y="527.5" ></text>
</g>
<g >
<title>`llvm::Value::stripPointerCasts() const (1 samples, 0.05%)</title><rect x="1102.1" y="485" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="1105.07" y="495.5" ></text>
</g>
<g >
<title>`simplifyAndDCEInstruction(llvm::Instruction*, llvm::SmallSetVec (1 samples, 0.05%)</title><rect x="413.3" y="453" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="416.32" y="463.5" ></text>
</g>
<g >
<title>`SimplifyRightShift(llvm::Instruction::BinaryOps, llvm::Value*,  (3 samples, 0.16%)</title><rect x="521.6" y="469" width="1.9" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="524.63" y="479.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getPointerDependencyFrom(llvm::M (28 samples, 1.51%)</title><rect x="183.9" y="501" width="17.9" height="15.0" fill="rgb(51,200,51)" rx="2" ry="2" />
<text  x="186.94" y="511.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, ll (1 samples, 0.05%)</title><rect x="282.7" y="565" width="0.6" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="285.70" y="575.5" ></text>
</g>
<g >
<title>`llvm::OptimizationRemarkEmitter::allowExtraAnalysis(llvm::Strin (1 samples, 0.05%)</title><rect x="599.4" y="421" width="0.6" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="602.36" y="431.5" ></text>
</g>
<g >
<title>`llvm::PMTopLevelManager::findAnalysisPass(void const*) (1 samples, 0.05%)</title><rect x="426.7" y="501" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="429.70" y="511.5" ></text>
</g>
<g >
<title>`tiny_size (1 samples, 0.05%)</title><rect x="1176.6" y="597" width="0.7" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="1179.62" y="607.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (1 samples, 0.05%)</title><rect x="1140.9" y="485" width="0.7" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="1143.94" y="495.5" ></text>
</g>
<g >
<title>`tiny_free_no_lock (1 samples, 0.05%)</title><rect x="701.3" y="469" width="0.6" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="704.31" y="479.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="732.5" y="437" width="0.7" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="735.53" y="447.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="233.6" y="485" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="236.64" y="495.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::getSCEV(llvm::Value*) (2 samples, 0.11%)</title><rect x="131.1" y="581" width="1.2" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="134.06" y="591.5" ></text>
</g>
<g >
<title>`SimplifyAddInst(llvm::Value*, llvm::Value*, bool, bool, llvm::S (1 samples, 0.05%)</title><rect x="26.6" y="597" width="0.6" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="29.57" y="607.5" ></text>
</g>
<g >
<title>`core::SingleDispatchGenericFunctionClosure_O::entry_point(core: (1,268 samples, 68.47%)</title><rect x="368.1" y="661" width="807.9" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="371.08" y="671.5" >`core::SingleDispatchGenericFunctionClosure_O::entry_point(core:</text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (1 samples, 0.05%)</title><rect x="384.0" y="437" width="0.6" height="15.0" fill="rgb(106,252,106)" rx="2" ry="2" />
<text  x="387.01" y="447.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, (anonymou (1 samples, 0.05%)</title><rect x="371.9" y="517" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="374.90" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (2 samples, 0.11%)</title><rect x="512.7" y="453" width="1.3" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="515.71" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (2 samples, 0.11%)</title><rect x="222.8" y="469" width="1.3" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="225.81" y="479.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="765.0" y="341" width="0.7" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="768.02" y="351.5" ></text>
</g>
<g >
<title>`llvm::FPPassManager::runOnFunction(llvm::Function&amp;) (360 samples, 19.44%)</title><rect x="11.3" y="661" width="229.3" height="15.0" fill="rgb(106,252,106)" rx="2" ry="2" />
<text  x="14.27" y="671.5" >`llvm::FPPassManager::runOnFun..</text>
</g>
<g >
<title>`(anonymous namespace)::FoldReinterpretLoadFromConstPtr(llvm::Co (1 samples, 0.05%)</title><rect x="248.3" y="565" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="251.29" y="575.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldICmpUsingKnownBits(llvm::ICmpInst&amp;) (3 samples, 0.16%)</title><rect x="103.0" y="581" width="1.9" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="106.02" y="591.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv(llvm::APInt const&amp;) const (2 samples, 0.11%)</title><rect x="69.3" y="533" width="1.2" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="72.25" y="543.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::BasicBlock const*&gt;::find(llvm::Basi (1 samples, 0.05%)</title><rect x="251.5" y="597" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="254.48" y="607.5" ></text>
</g>
<g >
<title>`_platform_memchr$VARIANT$Base (1 samples, 0.05%)</title><rect x="491.0" y="453" width="0.7" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="494.05" y="463.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1122.5" y="357" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="1125.46" y="367.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeAllocSize(llvm::Type*) const (1 samples, 0.05%)</title><rect x="1111.6" y="357" width="0.7" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="1114.63" y="367.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::GlobalValue const*&gt;::find(llvm::Glo (1 samples, 0.05%)</title><rect x="148.9" y="517" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="151.90" y="527.5" ></text>
</g>
<g >
<title>`llvm::MemoryLocation::get(llvm::LoadInst const*) (2 samples, 0.11%)</title><rect x="635.0" y="357" width="1.3" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="638.04" y="367.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="146.3" y="613" width="0.7" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="149.35" y="623.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitAdd(llvm::BinaryOperator&amp;) (5 samples, 0.27%)</title><rect x="77.5" y="597" width="3.2" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="80.54" y="607.5" ></text>
</g>
<g >
<title>`SimplifyAndInst(llvm::Value*, llvm::Value*, llvm::SimplifyQuery (1 samples, 0.05%)</title><rect x="1091.2" y="485" width="0.7" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="1094.24" y="495.5" ></text>
</g>
<g >
<title>`llvm::Constant::isNullValue() const (1 samples, 0.05%)</title><rect x="293.5" y="565" width="0.7" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="296.53" y="575.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedUseBits(llvm::Value*, llvm: (1 samples, 0.05%)</title><rect x="106.2" y="549" width="0.6" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="109.21" y="559.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="260.4" y="533" width="0.6" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="263.40" y="543.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::Value*, llvm::ValueLatticeElem (1 samples, 0.05%)</title><rect x="367.4" y="613" width="0.7" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="370.44" y="623.5" ></text>
</g>
<g >
<title>`llvm::Value::getValueName() const (1 samples, 0.05%)</title><rect x="289.1" y="501" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="292.07" y="511.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::alias(llvm::MemoryLocation const&amp;, llvm::M (2 samples, 0.11%)</title><rect x="134.2" y="485" width="1.3" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="137.24" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::FindBucketFor(void const*) const (1 samples, 0.05%)</title><rect x="144.4" y="517" width="0.7" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="147.44" y="527.5" ></text>
</g>
<g >
<title>`llvm::AttributeList::hasAttribute(unsigned int, llvm::Attribute (1 samples, 0.05%)</title><rect x="1097.6" y="421" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="1100.61" y="431.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (4 samples, 0.22%)</title><rect x="650.3" y="277" width="2.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="653.33" y="287.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::isKnownPredicate(llvm::CmpInst::Predicat (1 samples, 0.05%)</title><rect x="132.3" y="581" width="0.7" height="15.0" fill="rgb(95,242,95)" rx="2" ry="2" />
<text  x="135.33" y="591.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (2 samples, 0.11%)</title><rect x="34.2" y="549" width="1.3" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="37.21" y="559.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="157.2" y="533" width="0.6" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="160.18" y="543.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonEqual(llvm::Value const*, llvm::Value const*, l (1 samples, 0.05%)</title><rect x="104.9" y="581" width="0.7" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="107.94" y="591.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="85.2" y="581" width="0.6" height="15.0" fill="rgb(71,220,71)" rx="2" ry="2" />
<text  x="88.18" y="591.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::zextOrTrunc(unsigned int) (1 samples, 0.05%)</title><rect x="28.5" y="485" width="0.6" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="31.48" y="495.5" ></text>
</g>
<g >
<title>`small_malloc_should_clear (1 samples, 0.05%)</title><rect x="209.4" y="405" width="0.7" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="212.43" y="415.5" ></text>
</g>
<g >
<title>`llvm::SparseSolver&lt;llvm::PointerIntPair&lt;llvm::Value*, 2u, (anon (10 samples, 0.54%)</title><rect x="355.3" y="661" width="6.4" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="358.33" y="671.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (2 samples, 0.11%)</title><rect x="684.7" y="373" width="1.3" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="687.74" y="383.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;std::__1::pair&lt;unsigned int, llvm::B (1 samples, 0.05%)</title><rect x="228.5" y="549" width="0.7" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="231.54" y="559.5" ></text>
</g>
<g >
<title>`llvm::DenseMapInfo&lt;(anonymous namespace)::SimpleValue&gt;::isEqual (1 samples, 0.05%)</title><rect x="23.4" y="597" width="0.6" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="26.38" y="607.5" ></text>
</g>
<g >
<title>`llvm::BlockFrequencyInfoWrapperPass::runOnFunction(llvm::Functi (4 samples, 0.22%)</title><rect x="254.0" y="645" width="2.6" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="257.03" y="655.5" ></text>
</g>
<g >
<title>`llvm::SCEVAAWrapperPass* llvm::Pass::getAnalysisIfAvailable&lt;llv (1 samples, 0.05%)</title><rect x="43.1" y="629" width="0.7" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="46.13" y="639.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="217.7" y="453" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="220.71" y="463.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp_big(void const*) (1 samples, 0.05%)</title><rect x="386.6" y="469" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="389.56" y="479.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="382.1" y="293" width="0.6" height="15.0" fill="rgb(219,219,66)" rx="2" ry="2" />
<text  x="385.10" y="303.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (1 samples, 0.05%)</title><rect x="384.0" y="421" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="387.01" y="431.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldConstant(llvm::Constant const*, llvm::DataLay (1 samples, 0.05%)</title><rect x="440.7" y="517" width="0.6" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="443.71" y="527.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (2 samples, 0.11%)</title><rect x="203.1" y="389" width="1.2" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="206.06" y="399.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LatticeVal::toValueLattice() const (1 samples, 0.05%)</title><rect x="231.1" y="597" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="234.09" y="607.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (3 samples, 0.16%)</title><rect x="27.2" y="597" width="1.9" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="30.20" y="607.5" ></text>
</g>
<g >
<title>`llvm::SSAUpdaterImpl&lt;llvm::SSAUpdater&gt;::BuildBlockList(llvm::Ba (1 samples, 0.05%)</title><rect x="424.8" y="437" width="0.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="427.78" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ModuleBitcodeWriter::writeMetadataRecord (2 samples, 0.11%)</title><rect x="1179.8" y="693" width="1.3" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="1182.81" y="703.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (2 samples, 0.11%)</title><rect x="747.8" y="485" width="1.3" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="750.82" y="495.5" ></text>
</g>
<g >
<title>`compiler-conditions.lsp-compiler-conditions125^205^TOP-COMPILE- (1,852 samples, 100.00%)</title><rect x="10.0" y="1253" width="1180.0" height="15.0" fill="rgb(106,217,217)" rx="2" ry="2" />
<text  x="13.00" y="1263.5" >`compiler-conditions.lsp-compiler-conditions125^205^TOP-COMPILE-</text>
</g>
<g >
<title>`llvm::CallInst::onlyReadsMemory() const (1 samples, 0.05%)</title><rect x="316.5" y="533" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="319.47" y="543.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (2 samples, 0.11%)</title><rect x="733.2" y="501" width="1.2" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="736.16" y="511.5" ></text>
</g>
<g >
<title>`llvm::sroa::AllocaSliceRewriter::visitStoreInst(llvm::StoreInst (1 samples, 0.05%)</title><rect x="707.7" y="453" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="710.68" y="463.5" ></text>
</g>
<g >
<title>`llvm::scc_iterator&lt;llvm::Function const*, llvm::GraphTraits&lt;llv (1 samples, 0.05%)</title><rect x="745.3" y="517" width="0.6" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="748.27" y="527.5" ></text>
</g>
<g >
<title>`llvm::Type::getPrimitiveSizeInBits() const (1 samples, 0.05%)</title><rect x="490.4" y="453" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="493.41" y="463.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitBitCast(llvm::BitCastInst&amp;) (1 samples, 0.05%)</title><rect x="1092.5" y="501" width="0.7" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="1095.52" y="511.5" ></text>
</g>
<g >
<title>`std::__1::vector&lt;std::__1::pair&lt;llvm::BasicBlock*, llvm::Termin (1 samples, 0.05%)</title><rect x="1162.0" y="517" width="0.6" height="15.0" fill="rgb(52,201,52)" rx="2" ry="2" />
<text  x="1164.97" y="527.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="572.6" y="405" width="0.6" height="15.0" fill="rgb(185,185,53)" rx="2" ry="2" />
<text  x="575.60" y="415.5" ></text>
</g>
<g >
<title>`isCallingConvCCompatible(llvm::CallInst*) (1 samples, 0.05%)</title><rect x="487.2" y="437" width="0.7" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="490.22" y="447.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::DecomposeGEPExpression(llvm::Value const*, (1 samples, 0.05%)</title><rect x="628.7" y="261" width="0.6" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="631.67" y="271.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::AnalysisKey*, std::__1::unique_ptr&lt;llvm::d (1 samples, 0.05%)</title><rect x="245.7" y="597" width="0.7" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="248.75" y="607.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="573.9" y="389" width="0.6" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="576.88" y="399.5" ></text>
</g>
<g >
<title>`DominatesMergePoint(llvm::Value*, llvm::BasicBlock*, llvm::Smal (3 samples, 0.16%)</title><rect x="719.1" y="485" width="2.0" height="15.0" fill="rgb(96,243,96)" rx="2" ry="2" />
<text  x="722.15" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solve() (6 samples, 0.32%)</title><rect x="18.9" y="565" width="3.8" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="21.92" y="575.5" ></text>
</g>
<g >
<title>`llvm::hash_value(llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="1114.2" y="373" width="0.6" height="15.0" fill="rgb(58,208,58)" rx="2" ry="2" />
<text  x="1117.18" y="383.5" ></text>
</g>
<g >
<title>`llvm::AliasSet::aliasesPointer(llvm::Value const*, unsigned lon (2 samples, 0.11%)</title><rect x="333.7" y="517" width="1.2" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="336.67" y="527.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (2 samples, 0.11%)</title><rect x="92.2" y="549" width="1.3" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="95.19" y="559.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="507.0" y="389" width="0.6" height="15.0" fill="rgb(204,204,60)" rx="2" ry="2" />
<text  x="509.98" y="399.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="716.6" y="389" width="0.6" height="15.0" fill="rgb(194,194,57)" rx="2" ry="2" />
<text  x="719.60" y="399.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="1107.8" y="341" width="0.6" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="1110.81" y="351.5" ></text>
</g>
<g >
<title>`ThreadCmpOverPHI(llvm::CmpInst::Predicate, llvm::Value*, llvm:: (1 samples, 0.05%)</title><rect x="679.0" y="437" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="682.01" y="447.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^33^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1045" width="1180.0" height="15.0" fill="rgb(108,219,219)" rx="2" ry="2" />
<text  x="13.00" y="1055.5" >`compile-file.lsp-compile-file52^33^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::hash_value(llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="97.3" y="469" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="100.29" y="479.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::willNotOverflowSignedSub(llvm::Value const* (1 samples, 0.05%)</title><rect x="486.0" y="469" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="488.95" y="479.5" ></text>
</g>
<g >
<title>`llvm::AAResults::pointsToConstantMemory(llvm::MemoryLocation co (1 samples, 0.05%)</title><rect x="149.5" y="533" width="0.7" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="152.54" y="543.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="744.6" y="453" width="0.7" height="15.0" fill="rgb(229,229,69)" rx="2" ry="2" />
<text  x="747.63" y="463.5" ></text>
</g>
<g >
<title>`top.lsp-top130^522^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1733" width="1180.0" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="13.00" y="1743.5" >`top.lsp-top130^522^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (12 samples, 0.65%)</title><rect x="684.1" y="453" width="7.6" height="15.0" fill="rgb(107,253,107)" rx="2" ry="2" />
<text  x="687.10" y="463.5" ></text>
</g>
<g >
<title>`ThreadCmpOverSelect(llvm::CmpInst::Predicate, llvm::Value*, llv (1 samples, 0.05%)</title><rect x="731.9" y="485" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="734.89" y="495.5" ></text>
</g>
<g >
<title>`llvm::APInt::udiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="559.9" y="389" width="0.6" height="15.0" fill="rgb(77,224,77)" rx="2" ry="2" />
<text  x="562.86" y="399.5" ></text>
</g>
<g >
<title>`llvm::TargetTransformInfo::getUserCost(llvm::User const*) const (1 samples, 0.05%)</title><rect x="560.5" y="485" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="563.50" y="495.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::BasicBlock*, llvm:: (5 samples, 0.27%)</title><rect x="206.9" y="517" width="3.2" height="15.0" fill="rgb(65,213,65)" rx="2" ry="2" />
<text  x="209.88" y="527.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="382.1" y="309" width="0.6" height="15.0" fill="rgb(214,214,64)" rx="2" ry="2" />
<text  x="385.10" y="319.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::CVPLatticeFunc::ComputeInstructionState( (3 samples, 0.16%)</title><rect x="356.6" y="645" width="1.9" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="359.61" y="655.5" ></text>
</g>
<g >
<title>`llvm::APInt::APInt(llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="374.4" y="373" width="0.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="377.45" y="383.5" ></text>
</g>
<g >
<title>`llvm::Type::getPrimitiveSizeInBits() const (1 samples, 0.05%)</title><rect x="308.2" y="517" width="0.6" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="311.19" y="527.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="61.0" y="581" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="63.97" y="591.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="450.3" y="453" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="453.27" y="463.5" ></text>
</g>
<g >
<title>`llvm::PointerType::get(llvm::Type*, unsigned int) (1 samples, 0.05%)</title><rect x="57.8" y="533" width="0.6" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="60.79" y="543.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value*&gt;::find(llvm::Value const*) c (1 samples, 0.05%)</title><rect x="37.4" y="501" width="0.6" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="40.40" y="511.5" ></text>
</g>
<g >
<title>`llvm::StringMapImpl::RemoveKey(llvm::StringRef) (1 samples, 0.05%)</title><rect x="399.9" y="501" width="0.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="402.94" y="511.5" ></text>
</g>
<g >
<title>`void std::__1::vector&lt;llvm::NonLocalDepEntry, std::__1::allocat (2 samples, 0.11%)</title><rect x="639.5" y="405" width="1.3" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="642.50" y="415.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="437.5" y="437" width="0.7" height="15.0" fill="rgb(200,200,59)" rx="2" ry="2" />
<text  x="440.53" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (2 samples, 0.11%)</title><rect x="559.2" y="437" width="1.3" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="562.22" y="447.5" ></text>
</g>
<g >
<title>`llvm::Value::getValueName() const (1 samples, 0.05%)</title><rect x="127.2" y="549" width="0.7" height="15.0" fill="rgb(94,241,94)" rx="2" ry="2" />
<text  x="130.24" y="559.5" ></text>
</g>
<g >
<title>`start (1,852 samples, 100.00%)</title><rect x="10.0" y="2261" width="1180.0" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="13.00" y="2271.5" >`start</text>
</g>
<g >
<title>`llvmo::llvm_sys__writeBitcodeToFile(gctools::smart_ptr&lt;llvmo::M (16 samples, 0.86%)</title><rect x="1179.8" y="773" width="10.2" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="1182.81" y="783.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, unsigned  (1 samples, 0.05%)</title><rect x="276.3" y="597" width="0.7" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="279.33" y="607.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedInstructionBits(llvm::Instr (1 samples, 0.05%)</title><rect x="1124.4" y="469" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="1127.37" y="479.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::BasicBlock*&gt;::insert(llvm::BasicBlo (1 samples, 0.05%)</title><rect x="565.0" y="485" width="0.6" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="567.96" y="495.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getAlignment(llvm::Type*, bool) const (1 samples, 0.05%)</title><rect x="58.4" y="565" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="61.42" y="575.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="413.3" y="373" width="0.7" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="416.32" y="383.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::MapInfo::getHashVa (2 samples, 0.11%)</title><rect x="71.2" y="501" width="1.2" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="74.17" y="511.5" ></text>
</g>
<g >
<title>`llvm::GVN::processInstruction(llvm::Instruction*) (171 samples, 9.23%)</title><rect x="584.7" y="485" width="109.0" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="587.71" y="495.5" >`llvm::GVN::p..</text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solve() (2 samples, 0.11%)</title><rect x="17.6" y="581" width="1.3" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="20.65" y="591.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="758.7" y="357" width="0.6" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="761.65" y="367.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getDependency(llvm::Instruction* (4 samples, 0.22%)</title><rect x="172.5" y="549" width="2.5" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="175.47" y="559.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="134.2" y="437" width="0.7" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="137.24" y="447.5" ></text>
</g>
<g >
<title>`llvm::Float2IntPass::runImpl(llvm::Function&amp;) (1 samples, 0.05%)</title><rect x="262.3" y="645" width="0.6" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="265.31" y="655.5" ></text>
</g>
<g >
<title>`getAllocationData(llvm::Value const*, AllocType, llvm::TargetLi (2 samples, 0.11%)</title><rect x="637.0" y="341" width="1.2" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="639.95" y="351.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (2 samples, 0.11%)</title><rect x="651.0" y="213" width="1.2" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="653.97" y="223.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="647.1" y="101" width="0.7" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="650.15" y="111.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;std::__1::pair&lt;unsigned  (1 samples, 0.05%)</title><rect x="697.5" y="373" width="0.6" height="15.0" fill="rgb(51,200,51)" rx="2" ry="2" />
<text  x="700.48" y="383.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Type*, llvm::PointerTyp (1 samples, 0.05%)</title><rect x="57.8" y="517" width="0.6" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="60.79" y="527.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std::__1:: (1 samples, 0.05%)</title><rect x="47.0" y="581" width="0.6" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="49.95" y="591.5" ></text>
</g>
<g >
<title>`llvm::PostDominatorTreeWrapperPass::runOnFunction(llvm::Functio (1 samples, 0.05%)</title><rect x="159.7" y="645" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="162.73" y="655.5" ></text>
</g>
<g >
<title>`getSizeWithOverflow(std::__1::pair&lt;llvm::APInt, llvm::APInt&gt; co (1 samples, 0.05%)</title><rect x="191.0" y="341" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="193.95" y="351.5" ></text>
</g>
<g >
<title>`SimplifyOrInst(llvm::Value*, llvm::Value*, llvm::SimplifyQuery  (1 samples, 0.05%)</title><rect x="322.8" y="549" width="0.7" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="325.84" y="559.5" ></text>
</g>
<g >
<title>`SortNonLocalDepInfoCache(std::__1::vector&lt;llvm::NonLocalDepEntr (1 samples, 0.05%)</title><rect x="640.8" y="405" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="643.78" y="415.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std::__1:: (2 samples, 0.11%)</title><rect x="215.2" y="517" width="1.2" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="218.16" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldLoadFromConstPtr(llvm::Constant*, llvm::Type* (1 samples, 0.05%)</title><rect x="248.3" y="581" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="251.29" y="591.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="132.3" y="421" width="0.7" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="135.33" y="431.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (2 samples, 0.11%)</title><rect x="92.2" y="453" width="1.3" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="95.19" y="463.5" ></text>
</g>
<g >
<title>`llvm::sinkRegion(llvm::DomTreeNodeBase&lt;llvm::BasicBlock&gt;*, llvm (2 samples, 0.11%)</title><rect x="335.6" y="597" width="1.3" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="338.58" y="607.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::u (1 samples, 0.05%)</title><rect x="308.8" y="485" width="0.7" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="311.82" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (3 samples, 0.16%)</title><rect x="749.7" y="485" width="1.9" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="752.73" y="495.5" ></text>
</g>
<g >
<title>`llvm::BlockFrequencyInfoImpl&lt;llvm::BasicBlock&gt;::initializeRPOT( (1 samples, 0.05%)</title><rect x="740.8" y="501" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="743.81" y="511.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="699.4" y="437" width="0.6" height="15.0" fill="rgb(190,190,55)" rx="2" ry="2" />
<text  x="702.40" y="447.5" ></text>
</g>
<g >
<title>`llvm::wouldInstructionBeTriviallyDead(llvm::Instruction*, llvm: (1 samples, 0.05%)</title><rect x="127.2" y="597" width="0.7" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="130.24" y="607.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="437.5" y="453" width="0.7" height="15.0" fill="rgb(190,190,55)" rx="2" ry="2" />
<text  x="440.53" y="463.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::BasicBlock*, llvm:: (1 samples, 0.05%)</title><rect x="659.9" y="389" width="0.6" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="662.89" y="399.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="157.2" y="565" width="0.6" height="15.0" fill="rgb(176,176,50)" rx="2" ry="2" />
<text  x="160.18" y="575.5" ></text>
</g>
<g >
<title>`DO-TRACK-LLVM-TIME^COMPILER^FN^^ (1,268 samples, 68.47%)</title><rect x="368.1" y="709" width="807.9" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="371.08" y="719.5" >`DO-TRACK-LLVM-TIME^COMPILER^FN^^</text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getSimplePointerDependencyFrom(l (27 samples, 1.46%)</title><rect x="184.6" y="469" width="17.2" height="15.0" fill="rgb(88,234,88)" rx="2" ry="2" />
<text  x="187.58" y="479.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="483.4" y="453" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="486.40" y="463.5" ></text>
</g>
<g >
<title>`llvm::FindAvailableLoadedValue(llvm::LoadInst*, llvm::BasicBloc (6 samples, 0.32%)</title><rect x="526.7" y="485" width="3.9" height="15.0" fill="rgb(99,244,99)" rx="2" ry="2" />
<text  x="529.73" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp_big(void const*) (2 samples, 0.11%)</title><rect x="143.8" y="533" width="1.3" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="146.80" y="543.5" ></text>
</g>
<g >
<title>`llvm::ValueEnumerator::incorporateFunction(llvm::Function const (1 samples, 0.05%)</title><rect x="1181.7" y="693" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="1184.72" y="703.5" ></text>
</g>
<g >
<title>`free (1 samples, 0.05%)</title><rect x="1176.6" y="613" width="0.7" height="15.0" fill="rgb(202,202,60)" rx="2" ry="2" />
<text  x="1179.62" y="623.5" ></text>
</g>
<g >
<title>`bool llvm::CallInst::hasFnAttrImpl&lt;llvm::Attribute::AttrKind&gt;(l (1 samples, 0.05%)</title><rect x="290.3" y="533" width="0.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="293.35" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::JumpThreading::runOnFunction(llvm::Funct (15 samples, 0.81%)</title><rect x="31.0" y="645" width="9.6" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="34.03" y="655.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::intersectAssumeOrGuar (1 samples, 0.05%)</title><rect x="36.8" y="581" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="39.76" y="591.5" ></text>
</g>
<g >
<title>`llvm::DemandedBits::performAnalysis() (1 samples, 0.05%)</title><rect x="40.6" y="613" width="0.6" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="43.58" y="623.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::DecomposeGEPExpression(llvm::Value const*, (1 samples, 0.05%)</title><rect x="192.9" y="357" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="195.86" y="367.5" ></text>
</g>
<g >
<title>`llvm::LazyValueInfo::getConstantOnEdge(llvm::Value*, llvm::Basi (3 samples, 0.16%)</title><rect x="17.0" y="613" width="1.9" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="20.01" y="623.5" ></text>
</g>
<g >
<title>`llvm::canConstantFoldCallTo(llvm::ImmutableCallSite, llvm::Func (1 samples, 0.05%)</title><rect x="290.3" y="549" width="0.7" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="293.35" y="559.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getPointerDependencyFrom(llvm::M (25 samples, 1.35%)</title><rect x="643.3" y="389" width="16.0" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="646.33" y="399.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="625.5" y="229" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="628.49" y="239.5" ></text>
</g>
<g >
<title>`llvm::generic_gep_type_iterator&lt;llvm::Use const*&gt;::operator+ (1 samples, 0.05%)</title><rect x="190.3" y="373" width="0.7" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="193.31" y="383.5" ></text>
</g>
<g >
<title>`llvm::BlockFrequencyInfoImplBase::addToDist(llvm::BlockFrequenc (1 samples, 0.05%)</title><rect x="254.7" y="549" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="257.67" y="559.5" ></text>
</g>
<g >
<title>`llvm::recognizeBSwapOrBitReverseIdiom(llvm::Instruction*, bool, (1 samples, 0.05%)</title><rect x="114.5" y="565" width="0.6" height="15.0" fill="rgb(99,244,99)" rx="2" ry="2" />
<text  x="117.49" y="575.5" ></text>
</g>
<g >
<title>`llvm::ValueHandleBase::~ValueHandleBase() (83 samples, 4.48%)</title><rect x="812.2" y="453" width="52.9" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="815.17" y="463.5" >`llvm..</text>
</g>
<g >
<title>`llvm::ValueHandleBase::~ValueHandleBase() (1 samples, 0.05%)</title><rect x="352.8" y="453" width="0.6" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="355.79" y="463.5" ></text>
</g>
<g >
<title>`llvm::isSafeToSpeculativelyExecute(llvm::Value const*, llvm::In (1 samples, 0.05%)</title><rect x="719.8" y="453" width="0.6" height="15.0" fill="rgb(52,201,52)" rx="2" ry="2" />
<text  x="722.78" y="463.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getValueInBlock(llvm: (3 samples, 0.16%)</title><rect x="387.2" y="485" width="1.9" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="390.19" y="495.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="341.3" y="629" width="0.7" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="344.32" y="639.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (1 samples, 0.05%)</title><rect x="326.0" y="565" width="0.7" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="329.03" y="575.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolutionWrapperPass::releaseMemory() (2 samples, 0.11%)</title><rect x="1166.4" y="517" width="1.3" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="1169.43" y="527.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="366.8" y="645" width="0.6" height="15.0" fill="rgb(69,218,69)" rx="2" ry="2" />
<text  x="369.80" y="655.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="308.8" y="501" width="0.7" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="311.82" y="511.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonEqual(llvm::Value const*, llvm::Value const*, l (1 samples, 0.05%)</title><rect x="220.3" y="533" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="223.26" y="543.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::ValueHand (1 samples, 0.05%)</title><rect x="250.8" y="277" width="0.7" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="253.84" y="287.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldLoadFromConstPtr(llvm::Constant*, llvm::Type* (1 samples, 0.05%)</title><rect x="192.2" y="293" width="0.7" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="195.22" y="303.5" ></text>
</g>
<g >
<title>`llvm::IRBuilderBase::SetInsertPoint(llvm::Instruction*) (3 samples, 0.16%)</title><rect x="771.4" y="501" width="1.9" height="15.0" fill="rgb(53,202,53)" rx="2" ry="2" />
<text  x="774.39" y="511.5" ></text>
</g>
<g >
<title>`llvm::ConstantRange::makeAllowedICmpRegion(llvm::CmpInst::Predi (1 samples, 0.05%)</title><rect x="101.1" y="533" width="0.6" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="104.11" y="543.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::GVN::Expression, u (1 samples, 0.05%)</title><rect x="227.3" y="533" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="230.27" y="543.5" ></text>
</g>
<g >
<title>`core::parse_ltvc_toplevel_funcall(gctools::GCRootsInModule*, gc (1,852 samples, 100.00%)</title><rect x="10.0" y="2117" width="1180.0" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="13.00" y="2127.5" >`core::parse_ltvc_toplevel_funcall(gctools::GCRootsInModule*, gc</text>
</g>
<g >
<title>`llvm::GlobalsAAResult::alias(llvm::MemoryLocation const&amp;, llvm: (1 samples, 0.05%)</title><rect x="654.8" y="325" width="0.6" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="657.79" y="335.5" ></text>
</g>
<g >
<title>`compiler-conditions.lsp-compiler-conditions125^193^TOP-COMPILE- (1,852 samples, 100.00%)</title><rect x="10.0" y="901" width="1180.0" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="13.00" y="911.5" >`compiler-conditions.lsp-compiler-conditions125^193^TOP-COMPILE-</text>
</g>
<g >
<title>`llvm::ConstantFoldGetElementPtr(llvm::Type*, llvm::Constant*, b (1 samples, 0.05%)</title><rect x="223.4" y="453" width="0.7" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="226.44" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="219.0" y="405" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="221.98" y="415.5" ></text>
</g>
<g >
<title>`llvm::GetElementPtrInst::hasAllZeroIndices() const (3 samples, 0.16%)</title><rect x="784.1" y="485" width="1.9" height="15.0" fill="rgb(72,221,72)" rx="2" ry="2" />
<text  x="787.14" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;llvm::Constant*, true&gt;::push_back (1 samples, 0.05%)</title><rect x="248.9" y="581" width="0.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="251.93" y="591.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1381" width="1180.0" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="13.00" y="1391.5" >`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`tryToReplaceWithConstant((anonymous namespace)::SCCPSolver&amp;, ll (1 samples, 0.05%)</title><rect x="367.4" y="661" width="0.7" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="370.44" y="671.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitICmpInst(llvm::ICmpInst&amp;) (41 samples, 2.21%)</title><rect x="495.5" y="501" width="26.1" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="498.51" y="511.5" >`..</text>
</g>
<g >
<title>`llvm::DenseMapInfo&lt;std::__1::pair&lt;llvm::MemoryLocation, llvm::M (1 samples, 0.05%)</title><rect x="333.7" y="389" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="336.67" y="399.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::computeExitLimitFromCond(llvm::Loop cons (1 samples, 0.05%)</title><rect x="250.8" y="453" width="0.7" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="253.84" y="463.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (5 samples, 0.27%)</title><rect x="593.6" y="357" width="3.2" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="596.63" y="367.5" ></text>
</g>
<g >
<title>`llvm::GetElementPtrInst::getIndexedType(llvm::Type*, llvm::Arra (2 samples, 0.11%)</title><rect x="504.4" y="325" width="1.3" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="507.43" y="335.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv_ov(llvm::APInt const&amp;, bool&amp;) const (1 samples, 0.05%)</title><rect x="758.0" y="437" width="0.7" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="761.01" y="447.5" ></text>
</g>
<g >
<title>`llvm::APInt::operator-=(unsigned long long) (1 samples, 0.05%)</title><rect x="234.9" y="533" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="237.91" y="543.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1116.7" y="421" width="0.7" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="1119.73" y="431.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolutionWrapperPass::runOnFunction(llvm::Function&amp; (1 samples, 0.05%)</title><rect x="584.1" y="549" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="587.07" y="559.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;std::__1::pair&lt;llvm::SCEVUnknown const*, llvm::L (1 samples, 0.05%)</title><rect x="1166.4" y="501" width="0.7" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="1169.43" y="511.5" ></text>
</g>
<g >
<title>`WRITE-BITCODE-TO-FILE^LLVM-SYS^FN^^ (16 samples, 0.86%)</title><rect x="1179.8" y="805" width="10.2" height="15.0" fill="rgb(64,178,178)" rx="2" ry="2" />
<text  x="1182.81" y="815.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^181^TOP-COMPILE-FILE (1,268 samples, 68.47%)</title><rect x="368.1" y="741" width="807.9" height="15.0" fill="rgb(91,203,203)" rx="2" ry="2" />
<text  x="371.08" y="751.5" >`compile-file.lsp-compile-file52^181^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasPHI(llvm::PHINode const*, unsigned lo (1 samples, 0.05%)</title><rect x="134.2" y="421" width="0.7" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="137.24" y="431.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorBase::grow_pod(void*, unsigned long, unsigned  (1 samples, 0.05%)</title><rect x="680.3" y="389" width="0.6" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="683.28" y="399.5" ></text>
</g>
<g >
<title>`epilogue-cclasp.lisp-epilogue-cclasp460^1^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="2085" width="1180.0" height="15.0" fill="rgb(55,170,170)" rx="2" ry="2" />
<text  x="13.00" y="2095.5" >`epilogue-cclasp.lisp-epilogue-cclasp460^1^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::MemorySSA::MemorySSA(llvm::Function&amp;, llvm::AAResults*, l (13 samples, 0.70%)</title><rect x="566.2" y="533" width="8.3" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="569.23" y="543.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefBehavior(llvm::ImmutableCallSite) (2 samples, 0.11%)</title><rect x="590.4" y="437" width="1.3" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="593.44" y="447.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="544.6" y="421" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="547.57" y="431.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasSelect(llvm::SelectInst const*, unsig (1 samples, 0.05%)</title><rect x="647.1" y="229" width="0.7" height="15.0" fill="rgb(89,235,89)" rx="2" ry="2" />
<text  x="650.15" y="239.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::eraseInstFromFunction(llvm::Instruction&amp;) (1 samples, 0.05%)</title><rect x="1140.3" y="485" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="1143.30" y="495.5" ></text>
</g>
<g >
<title>`llvm::GEPOperator::accumulateConstantOffset(llvm::DataLayout co (1 samples, 0.05%)</title><rect x="248.3" y="533" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="251.29" y="543.5" ></text>
</g>
<g >
<title>`llvm::AssumptionCache::assumptionsFor(llvm::Value const*) (1 samples, 0.05%)</title><rect x="1116.7" y="373" width="0.7" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="1119.73" y="383.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="29.1" y="549" width="0.7" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="32.11" y="559.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::PointerIntPair&lt;llvm::Va (2 samples, 0.11%)</title><rect x="357.2" y="629" width="1.3" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="360.25" y="639.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedBits(llvm::Instruction*, un (1 samples, 0.05%)</title><rect x="104.3" y="533" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="107.30" y="543.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;std::__1::pair&lt;llvm::MemoryLocation, (1 samples, 0.05%)</title><rect x="652.2" y="245" width="0.7" height="15.0" fill="rgb(52,201,52)" rx="2" ry="2" />
<text  x="655.25" y="255.5" ></text>
</g>
<g >
<title>`llvm::SSAUpdater::GetValueAtEndOfBlockInternal(llvm::BasicBlock (1 samples, 0.05%)</title><rect x="601.3" y="405" width="0.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="604.27" y="415.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="159.7" y="565" width="0.7" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="162.73" y="575.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (1 samples, 0.05%)</title><rect x="225.4" y="549" width="0.6" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="228.36" y="559.5" ></text>
</g>
<g >
<title>`llvm::gvn::GVNLegacyPass::runOnFunction(llvm::Function&amp;) (182 samples, 9.83%)</title><rect x="584.7" y="549" width="116.0" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="587.71" y="559.5" >`llvm::gvn::GV..</text>
</g>
<g >
<title>`tiny_size (1 samples, 0.05%)</title><rect x="566.9" y="453" width="0.6" height="15.0" fill="rgb(216,216,64)" rx="2" ry="2" />
<text  x="569.87" y="463.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm::DomT (1 samples, 0.05%)</title><rect x="438.8" y="501" width="0.6" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="441.80" y="511.5" ></text>
</g>
<g >
<title>`llvm::BlockFrequencyInfoImpl&lt;llvm::BasicBlock&gt;::propagateMassTo (1 samples, 0.05%)</title><rect x="254.7" y="565" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="257.67" y="575.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="621.7" y="245" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="624.66" y="255.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatt (1 samples, 0.05%)</title><rect x="382.1" y="389" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="385.10" y="399.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (5 samples, 0.27%)</title><rect x="535.6" y="389" width="3.2" height="15.0" fill="rgb(95,242,95)" rx="2" ry="2" />
<text  x="538.65" y="399.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (4 samples, 0.22%)</title><rect x="679.6" y="437" width="2.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="682.64" y="447.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (2 samples, 0.11%)</title><rect x="684.7" y="389" width="1.3" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="687.74" y="399.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Pass*, llvm::Small (1 samples, 0.05%)</title><rect x="344.5" y="613" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="347.50" y="623.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::u (1 samples, 0.05%)</title><rect x="508.3" y="389" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="511.25" y="399.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::KnownBits(unsigned int) (1 samples, 0.05%)</title><rect x="1151.8" y="469" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="1154.77" y="479.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::find_imp(void const*) const (1 samples, 0.05%)</title><rect x="557.3" y="261" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="560.31" y="271.5" ></text>
</g>
<g >
<title>`llvm::JumpThreadingPass::ProcessThreadableEdges(llvm::Value*, l (4 samples, 0.22%)</title><rect x="34.2" y="597" width="2.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="37.21" y="607.5" ></text>
</g>
<g >
<title>`llvm::ConstantExprKeyType::getHash() const (2 samples, 0.11%)</title><rect x="687.3" y="341" width="1.3" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="690.29" y="351.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock const*, llvm (1 samples, 0.05%)</title><rect x="339.4" y="597" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="342.41" y="607.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeAllocSize(llvm::Type*) const (1 samples, 0.05%)</title><rect x="112.6" y="485" width="0.6" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="115.58" y="495.5" ></text>
</g>
<g >
<title>`llvm::sroa::AllocaSliceRewriter::rewriteIntegerStore(llvm::Valu (1 samples, 0.05%)</title><rect x="707.7" y="437" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="710.68" y="447.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="612.7" y="341" width="0.7" height="15.0" fill="rgb(189,189,55)" rx="2" ry="2" />
<text  x="615.74" y="351.5" ></text>
</g>
<g >
<title>`llvm::LoopInfoWrapperPass::runOnFunction(llvm::Function&amp;) (3 samples, 0.16%)</title><rect x="1160.7" y="549" width="1.9" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="1163.69" y="559.5" ></text>
</g>
<g >
<title>`llvm::getConstantStringInfo(llvm::Value const*, llvm::StringRef (2 samples, 0.11%)</title><rect x="475.1" y="469" width="1.3" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="478.12" y="479.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="375.1" y="357" width="0.6" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="378.09" y="367.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;llvm::Function const*,  (1 samples, 0.05%)</title><rect x="352.8" y="565" width="0.6" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="355.79" y="575.5" ></text>
</g>
<g >
<title>`std::__1::vector&lt;llvm::Constant*, std::__1::allocator&lt;llvm::Con (1 samples, 0.05%)</title><rect x="765.0" y="421" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="768.02" y="431.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::FoldShiftByConstant(llvm::Value*, llvm::Con (1 samples, 0.05%)</title><rect x="543.3" y="469" width="0.6" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="546.29" y="479.5" ></text>
</g>
<g >
<title>`llvm::LPPassManager::runOnFunction(llvm::Function&amp;) (11 samples, 0.59%)</title><rect x="555.4" y="549" width="7.0" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="558.40" y="559.5" ></text>
</g>
<g >
<title>`llvm::SimplifyGEPInst(llvm::Type*, llvm::ArrayRef&lt;llvm::Value*&gt; (1 samples, 0.05%)</title><rect x="1145.4" y="501" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="1148.40" y="511.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasPHI(llvm::PHINode const*, unsigned lo (1 samples, 0.05%)</title><rect x="557.3" y="325" width="0.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="560.31" y="335.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedUseBits(llvm::Value*, llvm: (3 samples, 0.16%)</title><rect x="517.8" y="453" width="1.9" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="520.81" y="463.5" ></text>
</g>
<g >
<title>`llvm::getObjectSize(llvm::Value const*, unsigned long long&amp;, ll (1 samples, 0.05%)</title><rect x="651.0" y="181" width="0.6" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="653.97" y="191.5" ></text>
</g>
<g >
<title>`llvm::Value::stripPointerCasts() const (1 samples, 0.05%)</title><rect x="303.1" y="549" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="306.09" y="559.5" ></text>
</g>
<g >
<title>`isSameCompare(llvm::Value*, llvm::CmpInst::Predicate, llvm::Val (1 samples, 0.05%)</title><rect x="97.9" y="565" width="0.7" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="100.93" y="575.5" ></text>
</g>
<g >
<title>`llvm::hashing::detail::hash_short(char const*, unsigned long, u (1 samples, 0.05%)</title><rect x="390.4" y="469" width="0.6" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="393.38" y="479.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasSelect(llvm::SelectInst const*, unsig (3 samples, 0.16%)</title><rect x="627.4" y="309" width="1.9" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="630.40" y="319.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (1 samples, 0.05%)</title><rect x="375.1" y="421" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="378.09" y="431.5" ></text>
</g>
<g >
<title>`llvm::Instruction::mayReadFromMemory() const (1 samples, 0.05%)</title><rect x="135.5" y="565" width="0.7" height="15.0" fill="rgb(60,210,60)" rx="2" ry="2" />
<text  x="138.52" y="575.5" ></text>
</g>
<g >
<title>`llvm::ValueHandleBase::AddToUseList() (1 samples, 0.05%)</title><rect x="729.3" y="517" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="732.34" y="527.5" ></text>
</g>
<g >
<title>`llvm::DenseMapInfo&lt;llvm::MemoryLocation&gt;::getHashValue(llvm::Me (1 samples, 0.05%)</title><rect x="333.7" y="373" width="0.6" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="336.67" y="383.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (1 samples, 0.05%)</title><rect x="289.7" y="549" width="0.6" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="292.71" y="559.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;(anonymous namespace)::MemoryLocOrCall, llvm::Me (1 samples, 0.05%)</title><rect x="566.9" y="485" width="0.6" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="569.87" y="495.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitAllocSite(llvm::Instruction&amp;) (1 samples, 0.05%)</title><rect x="80.7" y="581" width="0.7" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="83.72" y="591.5" ></text>
</g>
<g >
<title>`addArgumentAttrs(llvm::SmallSetVector&lt;llvm::Function*, 8u&gt; cons (1 samples, 0.05%)</title><rect x="10.0" y="645" width="0.6" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="975.3" y="405" width="0.6" height="15.0" fill="rgb(229,229,69)" rx="2" ry="2" />
<text  x="978.28" y="415.5" ></text>
</g>
<g >
<title>`llvm::APInt::compare(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="512.1" y="485" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="515.07" y="495.5" ></text>
</g>
<g >
<title>`isObjectSmallerThan(llvm::Value const*, unsigned long long, llv (2 samples, 0.11%)</title><rect x="627.4" y="277" width="1.3" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="630.40" y="287.5" ></text>
</g>
<g >
<title>`std::__1::__split_buffer&lt;llvm::Constant*, std::__1::allocator&lt;l (1 samples, 0.05%)</title><rect x="271.9" y="501" width="0.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="274.87" y="511.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;llvm::Instruction*, true&gt;::push_b (2 samples, 0.11%)</title><rect x="1076.6" y="485" width="1.3" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="1079.59" y="495.5" ></text>
</g>
<g >
<title>`void std::__1::__insertion_sort_3&lt;std::__1::__less&lt;llvm::NonLoc (1 samples, 0.05%)</title><rect x="608.9" y="373" width="0.7" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="611.92" y="383.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (1 samples, 0.05%)</title><rect x="646.5" y="261" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="649.51" y="271.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::CastClass_match&lt;llvm::PatternMatch::On (1 samples, 0.05%)</title><rect x="311.4" y="581" width="0.6" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="314.37" y="591.5" ></text>
</g>
<g >
<title>`set_tiny_meta_header_in_use (1 samples, 0.05%)</title><rect x="572.0" y="389" width="0.6" height="15.0" fill="rgb(204,204,60)" rx="2" ry="2" />
<text  x="574.97" y="399.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;void const*, llvm::Pass* (1 samples, 0.05%)</title><rect x="43.1" y="565" width="0.7" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="46.13" y="575.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="134.2" y="405" width="0.7" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="137.24" y="415.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="280.8" y="517" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="283.79" y="527.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;unsigned int, llvm::GVN::Lead (1 samples, 0.05%)</title><rect x="229.2" y="565" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="232.18" y="575.5" ></text>
</g>
<g >
<title>`LINK-INLINE-REMOVE-BUILTINS^COMPILER^FN^^ (1,268 samples, 68.47%)</title><rect x="368.1" y="725" width="807.9" height="15.0" fill="rgb(91,203,203)" rx="2" ry="2" />
<text  x="371.08" y="735.5" >`LINK-INLINE-REMOVE-BUILTINS^COMPILER^FN^^</text>
</g>
<g >
<title>`llvm::GVN::Expression::operator==(llvm::GVN::Expression const&amp;) (1 samples, 0.05%)</title><rect x="212.6" y="485" width="0.7" height="15.0" fill="rgb(101,246,101)" rx="2" ry="2" />
<text  x="215.61" y="495.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::KnownBits(unsigned int) (1 samples, 0.05%)</title><rect x="549.7" y="469" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="552.67" y="479.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::alias(llvm::MemoryLocation const&amp;, llvm: (1 samples, 0.05%)</title><rect x="647.8" y="213" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="650.79" y="223.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm::Mem (1 samples, 0.05%)</title><rect x="333.7" y="421" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="336.67" y="431.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1091.9" y="357" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="1094.88" y="367.5" ></text>
</g>
<g >
<title>`void llvm::SmallVectorImpl&lt;llvm::BasicBlock*&gt;::append&lt;std::__1: (1 samples, 0.05%)</title><rect x="439.4" y="469" width="0.7" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="442.44" y="479.5" ></text>
</g>
<g >
<title>`llvm::IRBuilderBase::SetInsertPoint(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="480.2" y="501" width="0.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="483.22" y="511.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitGetElementPtrInst(llvm::GetElementPtrI (4 samples, 0.22%)</title><rect x="85.2" y="597" width="2.5" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="88.18" y="607.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeAllocSize(llvm::Type*) const (1 samples, 0.05%)</title><rect x="299.9" y="437" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="302.90" y="447.5" ></text>
</g>
<g >
<title>`tryToUnrollLoop(llvm::Loop*, llvm::DominatorTree&amp;, llvm::LoopIn (1 samples, 0.05%)</title><rect x="561.8" y="517" width="0.6" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="564.77" y="527.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::lookupOrAdd(llvm::Value*) (11 samples, 0.59%)</title><rect x="163.6" y="565" width="7.0" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="166.55" y="575.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::Value*, llvm::Value (1 samples, 0.05%)</title><rect x="231.7" y="597" width="0.7" height="15.0" fill="rgb(70,219,70)" rx="2" ry="2" />
<text  x="234.73" y="607.5" ></text>
</g>
<g >
<title>`llvm::isFreeCall(llvm::Value const*, llvm::TargetLibraryInfo co (1 samples, 0.05%)</title><rect x="550.3" y="501" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="553.30" y="511.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="119.6" y="533" width="0.6" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="122.59" y="543.5" ></text>
</g>
<g >
<title>`getValueFromCondition(llvm::Value*, llvm::Value*, bool) (3 samples, 0.16%)</title><rect x="382.1" y="421" width="1.9" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="385.10" y="431.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getIntPtrType(llvm::Type*) const (1 samples, 0.05%)</title><rect x="761.8" y="437" width="0.7" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="764.84" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (2 samples, 0.11%)</title><rect x="559.2" y="469" width="1.3" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="562.22" y="479.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (1 samples, 0.05%)</title><rect x="497.4" y="453" width="0.7" height="15.0" fill="rgb(108,254,108)" rx="2" ry="2" />
<text  x="500.42" y="463.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getTerminator() const (1 samples, 0.05%)</title><rect x="543.3" y="373" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="546.29" y="383.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (3 samples, 0.16%)</title><rect x="461.1" y="453" width="1.9" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="464.10" y="463.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (2 samples, 0.11%)</title><rect x="47.6" y="597" width="1.3" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="50.59" y="607.5" ></text>
</g>
<g >
<title>`llvm::isMathLibCallNoop(llvm::CallSite, llvm::TargetLibraryInfo (1 samples, 0.05%)</title><rect x="127.2" y="581" width="0.7" height="15.0" fill="rgb(69,218,69)" rx="2" ry="2" />
<text  x="130.24" y="591.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="765.0" y="325" width="0.7" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="768.02" y="335.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (2 samples, 0.11%)</title><rect x="48.9" y="533" width="1.2" height="15.0" fill="rgb(194,194,57)" rx="2" ry="2" />
<text  x="51.87" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::AggressiveDeadCodeElimination::performDe (2 samples, 0.11%)</title><rect x="11.3" y="629" width="1.2" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="14.27" y="639.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObjects(llvm::Value*, llvm::SmallVectorImpl&lt; (2 samples, 0.11%)</title><rect x="679.6" y="421" width="1.3" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="682.64" y="431.5" ></text>
</g>
<g >
<title>`llvm::GVN::addToLeaderTable(unsigned int, llvm::Value*, llvm::B (2 samples, 0.11%)</title><rect x="170.6" y="565" width="1.2" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="173.56" y="575.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (5 samples, 0.27%)</title><rect x="189.7" y="405" width="3.2" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="192.68" y="415.5" ></text>
</g>
<g >
<title>`getAllocationData(llvm::Value const*, AllocType, llvm::TargetLi (1 samples, 0.05%)</title><rect x="658.6" y="325" width="0.7" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="661.62" y="335.5" ></text>
</g>
<g >
<title>`llvm::canSinkOrHoistInst(llvm::Instruction&amp;, llvm::AAResults*,  (2 samples, 0.11%)</title><rect x="138.1" y="581" width="1.2" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="141.07" y="591.5" ></text>
</g>
<g >
<title>`llvm::OperandBundleUser&lt;llvm::CallInst, llvm::Use*&gt;::getNumTota (1 samples, 0.05%)</title><rect x="617.2" y="149" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="620.20" y="159.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getPointerDependencyFrom(llvm::M (7 samples, 0.38%)</title><rect x="593.6" y="437" width="4.5" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="596.63" y="447.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitAnd(llvm::BinaryOperator&amp;) (2 samples, 0.11%)</title><rect x="1091.2" y="501" width="1.3" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="1094.24" y="511.5" ></text>
</g>
<g >
<title>`llvm::ObjectSizeOffsetVisitor::visitGlobalVariable(llvm::Global (2 samples, 0.11%)</title><rect x="627.4" y="229" width="1.3" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="630.40" y="239.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (4 samples, 0.22%)</title><rect x="1141.6" y="453" width="2.5" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="1144.58" y="463.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="1119.9" y="485" width="0.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="1122.91" y="495.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="192.2" y="357" width="0.7" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="195.22" y="367.5" ></text>
</g>
<g >
<title>`llvm::wouldInstructionBeTriviallyDead(llvm::Instruction*, llvm: (1 samples, 0.05%)</title><rect x="554.8" y="517" width="0.6" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="557.76" y="527.5" ></text>
</g>
<g >
<title>`llvm::TargetLibraryInfoImpl::getLibFunc(llvm::Function const&amp;,  (1 samples, 0.05%)</title><rect x="332.4" y="581" width="0.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="335.40" y="591.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::Constant*, llvm::Constant*&gt;* l (1 samples, 0.05%)</title><rect x="471.9" y="453" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="474.93" y="463.5" ></text>
</g>
<g >
<title>`ThreadCmpOverPHI(llvm::CmpInst::Predicate, llvm::Value*, llvm:: (1 samples, 0.05%)</title><rect x="497.4" y="469" width="0.7" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="500.42" y="479.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="498.1" y="309" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="501.06" y="319.5" ></text>
</g>
<g >
<title>`llvm::MemorySSA::renamePass(llvm::DomTreeNodeBase&lt;llvm::BasicBl (2 samples, 0.11%)</title><rect x="573.2" y="501" width="1.3" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="576.24" y="511.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="422.9" y="453" width="0.6" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="425.87" y="463.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (6 samples, 0.32%)</title><rect x="394.2" y="485" width="3.8" height="15.0" fill="rgb(95,242,95)" rx="2" ry="2" />
<text  x="397.20" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;llvm::Instruction*, true&gt;::push_b (2 samples, 0.11%)</title><rect x="267.4" y="597" width="1.3" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="270.41" y="607.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="647.1" y="133" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="650.15" y="143.5" ></text>
</g>
<g >
<title>`llvm::APInt::lshr(unsigned int) const (1 samples, 0.05%)</title><rect x="548.4" y="405" width="0.6" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="551.39" y="415.5" ></text>
</g>
<g >
<title>`llvm::PMTopLevelManager::findAnalysisUsage(llvm::Pass*) (1 samples, 0.05%)</title><rect x="581.5" y="533" width="0.7" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="584.52" y="543.5" ></text>
</g>
<g >
<title>`llvm::iplist_impl&lt;llvm::simple_ilist&lt;llvm::Instruction&gt;, llvm:: (3 samples, 0.16%)</title><rect x="398.7" y="517" width="1.9" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="401.66" y="527.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (9 samples, 0.49%)</title><rect x="121.5" y="597" width="5.7" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="124.50" y="607.5" ></text>
</g>
<g >
<title>`llvm::InstructionCombiningPass::runOnFunction(llvm::Function&amp;) (123 samples, 6.64%)</title><rect x="51.4" y="645" width="78.4" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="54.41" y="655.5" >`llvm::In..</text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm: (1 samples, 0.05%)</title><rect x="207.5" y="501" width="0.7" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="210.52" y="511.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SCCPSolver::Solve() (2 samples, 0.11%)</title><rect x="229.8" y="629" width="1.3" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="232.82" y="639.5" ></text>
</g>
<g >
<title>`free_tiny (1 samples, 0.05%)</title><rect x="24.7" y="613" width="0.6" height="15.0" fill="rgb(227,227,68)" rx="2" ry="2" />
<text  x="27.65" y="623.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (5 samples, 0.27%)</title><rect x="110.7" y="565" width="3.2" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="113.67" y="575.5" ></text>
</g>
<g >
<title>`getValueFromCondition(llvm::Value*, llvm::Value*, bool) (3 samples, 0.16%)</title><rect x="408.2" y="389" width="1.9" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="411.22" y="399.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::PoisoningVH&lt;llvm:: (1 samples, 0.05%)</title><rect x="377.6" y="405" width="0.7" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="380.63" y="415.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (1 samples, 0.05%)</title><rect x="1116.7" y="453" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="1119.73" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldLoadFromConstPtr(llvm::Constant*, llvm::Type* (1 samples, 0.05%)</title><rect x="61.0" y="597" width="0.6" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="63.97" y="607.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (2 samples, 0.11%)</title><rect x="405.0" y="469" width="1.3" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="408.03" y="479.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^33^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1013" width="1180.0" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="13.00" y="1023.5" >`compile-file.lsp-compile-file52^33^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`tiny_size (1 samples, 0.05%)</title><rect x="466.2" y="405" width="0.6" height="15.0" fill="rgb(225,225,68)" rx="2" ry="2" />
<text  x="469.20" y="415.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedUseBits(llvm::Value*, llvm: (1 samples, 0.05%)</title><rect x="524.2" y="453" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="527.18" y="463.5" ></text>
</g>
<g >
<title>`small_malloc_from_free_list (2 samples, 0.11%)</title><rect x="668.8" y="293" width="1.3" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="671.81" y="303.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::alias(llvm::MemoryLocation const&amp;, llvm: (1 samples, 0.05%)</title><rect x="624.2" y="229" width="0.6" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="627.21" y="239.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LoopUnroll::runOnLoop(llvm::Loop*, llvm: (1 samples, 0.05%)</title><rect x="1160.1" y="533" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="1163.05" y="543.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock const*, (1 samples, 0.05%)</title><rect x="773.3" y="421" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="776.30" y="431.5" ></text>
</g>
<g >
<title>`llvm::GVN::PerformLoadPRE(llvm::LoadInst*, llvm::SmallVector&lt;ll (4 samples, 0.22%)</title><rect x="601.3" y="453" width="2.5" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="604.27" y="463.5" ></text>
</g>
<g >
<title>`llvm::MemorySSA::placePHINodes(llvm::SmallPtrSetImpl&lt;llvm::Basi (1 samples, 0.05%)</title><rect x="572.6" y="501" width="0.6" height="15.0" fill="rgb(100,245,100)" rx="2" ry="2" />
<text  x="575.60" y="511.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="27.2" y="533" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="30.20" y="543.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (1 samples, 0.05%)</title><rect x="392.9" y="485" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="395.93" y="495.5" ></text>
</g>
<g >
<title>`llvm::ObjectSizeOffsetVisitor::visitGlobalVariable(llvm::Global (1 samples, 0.05%)</title><rect x="651.0" y="165" width="0.6" height="15.0" fill="rgb(70,219,70)" rx="2" ry="2" />
<text  x="653.97" y="175.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std:: (1 samples, 0.05%)</title><rect x="259.1" y="581" width="0.7" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="262.13" y="591.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::PoisoningVH&lt;llvm::B (1 samples, 0.05%)</title><rect x="416.5" y="421" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="419.50" y="431.5" ></text>
</g>
<g >
<title>`llvm::APInt::flipAllBits() (1 samples, 0.05%)</title><rect x="1136.5" y="405" width="0.6" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="1139.48" y="415.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolutionWrapperPass::releaseMemory() (1 samples, 0.05%)</title><rect x="580.2" y="517" width="0.7" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="583.25" y="527.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::PointerIntPair&lt;llvm::Va (1 samples, 0.05%)</title><rect x="157.8" y="581" width="0.7" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="160.82" y="591.5" ></text>
</g>
<g >
<title>`llvm::wouldInstructionBeTriviallyDead(llvm::Instruction*, llvm: (2 samples, 0.11%)</title><rect x="331.8" y="613" width="1.2" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="334.76" y="623.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeAllocSize(llvm::Type*) const (1 samples, 0.05%)</title><rect x="188.4" y="325" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="191.40" y="335.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::ImmutableCallSite, llvm::M (3 samples, 0.16%)</title><rect x="198.0" y="437" width="1.9" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="200.96" y="447.5" ></text>
</g>
<g >
<title>`llvm::LPPassManager::runOnFunction(llvm::Function&amp;) (3 samples, 0.16%)</title><rect x="1158.8" y="549" width="1.9" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="1161.78" y="559.5" ></text>
</g>
<g >
<title>`llvm::InstCombineWorklist::Remove(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="1140.3" y="469" width="0.6" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="1143.30" y="479.5" ></text>
</g>
<g >
<title>`llvm::AAResults::callCapturesBefore(llvm::Instruction const*, l (1 samples, 0.05%)</title><rect x="655.4" y="341" width="0.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="658.43" y="351.5" ></text>
</g>
<g >
<title>`OPTIMIZE-MODULE-FOR-COMPILE-FILE^COMPILER^FN^^ (1,268 samples, 68.47%)</title><rect x="368.1" y="677" width="807.9" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="371.08" y="687.5" >`OPTIMIZE-MODULE-FOR-COMPILE-FILE^COMPILER^FN^^</text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="350.2" y="501" width="0.7" height="15.0" fill="rgb(180,180,51)" rx="2" ry="2" />
<text  x="353.24" y="511.5" ></text>
</g>
<g >
<title>`llvm::GEPOperator::hasAllZeroIndices() const (1 samples, 0.05%)</title><rect x="475.1" y="437" width="0.7" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="478.12" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::CorrelatedValuePropagation::runOnFunctio (26 samples, 1.40%)</title><rect x="372.5" y="549" width="16.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="375.54" y="559.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="680.3" y="357" width="0.6" height="15.0" fill="rgb(191,191,55)" rx="2" ry="2" />
<text  x="683.28" y="367.5" ></text>
</g>
<g >
<title>`llvm::GEPOperator::accumulateConstantOffset(llvm::DataLayout co (1 samples, 0.05%)</title><rect x="690.5" y="389" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="693.48" y="399.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^181^TOP-COMPILE-FILE (1,268 samples, 68.47%)</title><rect x="368.1" y="757" width="807.9" height="15.0" fill="rgb(92,204,204)" rx="2" ry="2" />
<text  x="371.08" y="767.5" >`compile-file.lsp-compile-file52^181^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::AliasSetTracker::add(llvm::BasicBlock&amp;) (4 samples, 0.22%)</title><rect x="556.0" y="501" width="2.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="559.04" y="511.5" ></text>
</g>
<g >
<title>`core::byte_code_interpreter(gctools::GCRootsInModule*, gctools: (1,852 samples, 100.00%)</title><rect x="10.0" y="2133" width="1180.0" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="13.00" y="2143.5" >`core::byte_code_interpreter(gctools::GCRootsInModule*, gctools:</text>
</g>
<g >
<title>`llvm::ScalarEvolution::getRangeRef(llvm::SCEV const*, llvm::Sca (1 samples, 0.05%)</title><rect x="132.3" y="533" width="0.7" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="135.33" y="543.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::PHINode*, llvm::de (1 samples, 0.05%)</title><rect x="1171.5" y="469" width="0.7" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="1174.52" y="479.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm: (1 samples, 0.05%)</title><rect x="257.9" y="597" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="260.85" y="607.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (5 samples, 0.27%)</title><rect x="110.7" y="533" width="3.2" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="113.67" y="543.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Metadata const*, llvm:: (1 samples, 0.05%)</title><rect x="1180.4" y="661" width="0.7" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="1183.44" y="671.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitSelectInst(llvm::SelectInst&amp;) (1 samples, 0.05%)</title><rect x="1139.0" y="501" width="0.7" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="1142.03" y="511.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (7 samples, 0.38%)</title><rect x="749.1" y="517" width="4.5" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="752.09" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="405.7" y="405" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="408.67" y="415.5" ></text>
</g>
<g >
<title>`void llvm::SmallVectorImpl&lt;llvm::BasicBlock*&gt;::append&lt;llvm::Bas (1 samples, 0.05%)</title><rect x="50.8" y="597" width="0.6" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="53.78" y="607.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std::__1:: (2 samples, 0.11%)</title><rect x="258.5" y="597" width="1.3" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="261.49" y="607.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::add(llvm::BasicBlock&amp;) (3 samples, 0.16%)</title><rect x="333.7" y="597" width="1.9" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="336.67" y="607.5" ></text>
</g>
<g >
<title>`llvm::DenseMapInfo&lt;std::__1::pair&lt;unsigned int, llvm::BasicBloc (1 samples, 0.05%)</title><rect x="697.5" y="357" width="0.6" height="15.0" fill="rgb(101,246,101)" rx="2" ry="2" />
<text  x="700.48" y="367.5" ></text>
</g>
<g >
<title>`llvm::FPPassManager::runOnModule(llvm::Module&amp;) (698 samples, 37.69%)</title><rect x="730.0" y="581" width="444.7" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="732.98" y="591.5" >`llvm::FPPassManager::runOnModule(llvm::Module&amp;)</text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, unsi (1 samples, 0.05%)</title><rect x="75.6" y="581" width="0.7" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="78.63" y="591.5" ></text>
</g>
<g >
<title>`top.lsp-top130^378^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1909" width="1180.0" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="13.00" y="1919.5" >`top.lsp-top130^378^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`isUseTriviallyOptimizableToLiveOnEntry(llvm::AAResults&amp;, llvm:: (1 samples, 0.05%)</title><rect x="568.1" y="453" width="0.7" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="571.14" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="731.3" y="405" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="734.25" y="415.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;unsigned long long, llv (1 samples, 0.05%)</title><rect x="1189.4" y="741" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="1192.36" y="751.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::BasicBlock*, llvm::Value*&gt;* ll (3 samples, 0.16%)</title><rect x="208.2" y="501" width="1.9" height="15.0" fill="rgb(65,213,65)" rx="2" ry="2" />
<text  x="211.15" y="511.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="619.1" y="229" width="0.7" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="622.11" y="239.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LoopUnroll::runOnLoop(llvm::Loop*, llvm: (2 samples, 0.11%)</title><rect x="561.1" y="533" width="1.3" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="564.13" y="543.5" ></text>
</g>
<g >
<title>`llvm::TryToSimplifyUncondBranchFromEmptyBlock(llvm::BasicBlock* (2 samples, 0.11%)</title><rect x="422.2" y="517" width="1.3" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="425.24" y="527.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitGetElementPtrInst(llvm::GetElementPtrI (4 samples, 0.22%)</title><rect x="291.6" y="597" width="2.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="294.62" y="607.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorImpl&lt;llvm::Instruction*&gt;::operator=(llvm::Smal (1 samples, 0.05%)</title><rect x="665.0" y="421" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="667.99" y="431.5" ></text>
</g>
<g >
<title>`FUNWIND-PROTECT^CORE^FN^^ (1,830 samples, 98.81%)</title><rect x="10.0" y="853" width="1166.0" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="13.00" y="863.5" >`FUNWIND-PROTECT^CORE^FN^^</text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (2 samples, 0.11%)</title><rect x="34.2" y="469" width="1.3" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="37.21" y="479.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::getModRefBehavior(llvm::ImmutableCallSite) (1 samples, 0.05%)</title><rect x="1130.1" y="405" width="0.6" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="1133.11" y="415.5" ></text>
</g>
<g >
<title>`bitTrackingDCE(llvm::Function&amp;, llvm::DemandedBits&amp;) (1 samples, 0.05%)</title><rect x="429.2" y="549" width="0.7" height="15.0" fill="rgb(89,235,89)" rx="2" ry="2" />
<text  x="432.24" y="559.5" ></text>
</g>
<g >
<title>`llvm::InstVisitor&lt;(anonymous namespace)::SCCPSolver, void&gt;::vis (3 samples, 0.16%)</title><rect x="709.6" y="517" width="1.9" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="712.59" y="527.5" ></text>
</g>
<g >
<title>`llvm::MetadataTracking::track(void*, llvm::Metadata&amp;, llvm::Poi (1 samples, 0.05%)</title><rect x="554.1" y="517" width="0.7" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="557.13" y="527.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="601.9" y="405" width="0.6" height="15.0" fill="rgb(108,254,108)" rx="2" ry="2" />
<text  x="604.91" y="415.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::createSCEV(llvm::Value*) (1 samples, 0.05%)</title><rect x="131.7" y="533" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="134.70" y="543.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::apint_match::match&lt;llvm::Value const&gt;( (1 samples, 0.05%)</title><rect x="40.6" y="549" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="43.58" y="559.5" ></text>
</g>
<g >
<title>`llvm::Instruction::mayWriteToMemory() const (1 samples, 0.05%)</title><rect x="528.6" y="453" width="0.7" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="531.64" y="463.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonEqual(llvm::Value const*, llvm::Value const*, l (1 samples, 0.05%)</title><rect x="309.5" y="565" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="312.46" y="575.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="217.7" y="421" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="220.71" y="431.5" ></text>
</g>
<g >
<title>`OUTPUT-BITCODE^COMPILER^FN^^ (16 samples, 0.86%)</title><rect x="1179.8" y="869" width="10.2" height="15.0" fill="rgb(80,193,193)" rx="2" ry="2" />
<text  x="1182.81" y="879.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="406.3" y="245" width="0.6" height="15.0" fill="rgb(229,229,69)" rx="2" ry="2" />
<text  x="409.31" y="255.5" ></text>
</g>
<g >
<title>`llvm::simplifyCFG(llvm::BasicBlock*, llvm::TargetTransformInfo  (5 samples, 0.27%)</title><rect x="1169.0" y="517" width="3.2" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="1171.97" y="527.5" ></text>
</g>
<g >
<title>`llvm::isAllocLikeFn(llvm::Value const*, llvm::TargetLibraryInfo (1 samples, 0.05%)</title><rect x="1094.4" y="469" width="0.7" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="1097.43" y="479.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::~AliasSetTracker() (1 samples, 0.05%)</title><rect x="136.2" y="597" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="139.16" y="607.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::ValueHand (2 samples, 0.11%)</title><rect x="813.4" y="437" width="1.3" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="816.44" y="447.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (2 samples, 0.11%)</title><rect x="668.8" y="373" width="1.3" height="15.0" fill="rgb(229,229,69)" rx="2" ry="2" />
<text  x="671.81" y="383.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::findAnalysisPass(void const*, bool) (2 samples, 0.11%)</title><rect x="44.4" y="581" width="1.3" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="47.41" y="591.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, llvm (1 samples, 0.05%)</title><rect x="707.7" y="389" width="0.6" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="710.68" y="399.5" ></text>
</g>
<g >
<title>`llvm::ObjectSizeOffsetVisitor::visitGlobalVariable(llvm::Global (1 samples, 0.05%)</title><rect x="615.9" y="229" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="618.93" y="239.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoCache::insertResult(llvm::V (1 samples, 0.05%)</title><rect x="416.5" y="437" width="0.6" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="419.50" y="447.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="204.3" y="325" width="0.7" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="207.33" y="335.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::ImmutableCallSite, llvm::M (1 samples, 0.05%)</title><rect x="148.9" y="533" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="151.90" y="543.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedBits(llvm::Instruction*, un (1 samples, 0.05%)</title><rect x="106.2" y="533" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="109.21" y="543.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;llvm::PoisoningVH&lt;l (2 samples, 0.11%)</title><rect x="421.0" y="485" width="1.2" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="423.96" y="495.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromShiftOperator(llvm::Operator const*, llvm:: (1 samples, 0.05%)</title><rect x="544.6" y="389" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="547.57" y="399.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getICmp(unsigned short, llvm::Constant*, ll (1 samples, 0.05%)</title><rect x="731.3" y="453" width="0.6" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="734.25" y="463.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="572.0" y="405" width="0.6" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="574.97" y="415.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="679.6" y="341" width="0.7" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="682.64" y="351.5" ></text>
</g>
<g >
<title>`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="1174.7" y="437" width="0.6" height="15.0" fill="rgb(223,223,67)" rx="2" ry="2" />
<text  x="1177.71" y="447.5" ></text>
</g>
<g >
<title>`llvm::Value::~Value() (2 samples, 0.11%)</title><rect x="1176.6" y="645" width="1.3" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="1179.62" y="655.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;unsigned long long, llv (1 samples, 0.05%)</title><rect x="1189.4" y="613" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="1192.36" y="623.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::CmpClass_match&lt;llvm::PatternMatch::spe (1 samples, 0.05%)</title><rect x="289.7" y="533" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="292.71" y="543.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;std::__1::pair&lt;llvm::MemoryLocation, (1 samples, 0.05%)</title><rect x="194.1" y="325" width="0.7" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="197.14" y="335.5" ></text>
</g>
<g >
<title>`llvm::GEPOperator::accumulateConstantOffset(llvm::DataLayout co (1 samples, 0.05%)</title><rect x="292.9" y="581" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="295.89" y="591.5" ></text>
</g>
<g >
<title>`llvm::GVN::findLeader(llvm::BasicBlock const*, unsigned int) (3 samples, 0.16%)</title><rect x="214.5" y="549" width="1.9" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="217.52" y="559.5" ></text>
</g>
<g >
<title>`unsigned int llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorT (1 samples, 0.05%)</title><rect x="159.7" y="597" width="0.7" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="162.73" y="607.5" ></text>
</g>
<g >
<title>`llvm::SimplifyCall(llvm::ImmutableCallSite, llvm::SimplifyQuery (1 samples, 0.05%)</title><rect x="1097.6" y="485" width="0.7" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="1100.61" y="495.5" ></text>
</g>
<g >
<title>`llvm::simplifyUsersOfIV(llvm::PHINode*, llvm::ScalarEvolution*, (3 samples, 0.16%)</title><rect x="131.1" y="597" width="1.9" height="15.0" fill="rgb(88,234,88)" rx="2" ry="2" />
<text  x="134.06" y="607.5" ></text>
</g>
<g >
<title>`llvm::SROA::splitAlloca(llvm::AllocaInst&amp;, llvm::sroa::AllocaSl (6 samples, 0.32%)</title><rect x="704.5" y="501" width="3.8" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="707.49" y="511.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::EarlyCSELegacyCommonPass&lt;true&gt;::runOnFun (12 samples, 0.65%)</title><rect x="23.4" y="645" width="7.6" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="26.38" y="655.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="685.4" y="309" width="0.6" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="688.38" y="319.5" ></text>
</g>
<g >
<title>0x18ca690fd (1,852 samples, 100.00%)</title><rect x="10.0" y="1493" width="1180.0" height="15.0" fill="rgb(181,181,52)" rx="2" ry="2" />
<text  x="13.00" y="1503.5" >0x18ca690fd</text>
</g>
<g >
<title>`szone_malloc_should_clear (2 samples, 0.11%)</title><rect x="1074.7" y="437" width="1.3" height="15.0" fill="rgb(200,200,59)" rx="2" ry="2" />
<text  x="1077.68" y="447.5" ></text>
</g>
<g >
<title>`llvm::TargetTransformInfo::getUserCost(llvm::User const*) const (2 samples, 0.11%)</title><rect x="335.6" y="581" width="1.3" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="338.58" y="591.5" ></text>
</g>
<g >
<title>`llvm::simplifyCFG(llvm::BasicBlock*, llvm::TargetTransformInfo  (8 samples, 0.43%)</title><rect x="232.4" y="613" width="5.1" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="235.37" y="623.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::KnownBits(unsigned int) (1 samples, 0.05%)</title><rect x="1116.1" y="437" width="0.6" height="15.0" fill="rgb(58,208,58)" rx="2" ry="2" />
<text  x="1119.09" y="447.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::getOrCreate(llvm:: (1 samples, 0.05%)</title><rect x="66.1" y="501" width="0.6" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="69.07" y="511.5" ></text>
</g>
<g >
<title>`llvm::LoopAccessInfo const&amp; llvm::function_ref&lt;llvm::LoopAccess (1 samples, 0.05%)</title><rect x="250.8" y="613" width="0.7" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="253.84" y="623.5" ></text>
</g>
<g >
<title>`llvm::InstCombineWorklist::Add(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="1125.6" y="405" width="0.7" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="1128.65" y="415.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="271.9" y="469" width="0.6" height="15.0" fill="rgb(183,183,53)" rx="2" ry="2" />
<text  x="274.87" y="479.5" ></text>
</g>
<g >
<title>`llvm::FindAvailableLoadedValue(llvm::LoadInst*, llvm::BasicBloc (2 samples, 0.11%)</title><rect x="315.8" y="581" width="1.3" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="318.83" y="591.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (10 samples, 0.54%)</title><rect x="500.0" y="389" width="6.3" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="502.97" y="399.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="257.2" y="485" width="0.7" height="15.0" fill="rgb(189,189,55)" rx="2" ry="2" />
<text  x="260.21" y="495.5" ></text>
</g>
<g >
<title>`llvm::canConstantFoldCallTo(llvm::ImmutableCallSite, llvm::Func (1 samples, 0.05%)</title><rect x="657.3" y="229" width="0.7" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="660.34" y="239.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="1111.0" y="293" width="0.6" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="1113.99" y="303.5" ></text>
</g>
<g >
<title>`free (1 samples, 0.05%)</title><rect x="808.3" y="469" width="0.7" height="15.0" fill="rgb(182,182,52)" rx="2" ry="2" />
<text  x="811.35" y="479.5" ></text>
</g>
<g >
<title>`llvm::formLCSSARecursively(llvm::Loop&amp;, llvm::DominatorTree&amp;, l (2 samples, 0.11%)</title><rect x="425.4" y="501" width="1.3" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="428.42" y="511.5" ></text>
</g>
<g >
<title>`llvm::po_iterator&lt;llvm::BasicBlock*, llvm::SmallPtrSet&lt;llvm::Ba (4 samples, 0.22%)</title><rect x="563.0" y="501" width="2.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="566.05" y="511.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldICmpUsingKnownBits(llvm::ICmpInst&amp;) (3 samples, 0.16%)</title><rect x="1121.2" y="485" width="1.9" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="1124.19" y="495.5" ></text>
</g>
<g >
<title>`llvm::hashing::detail::hash_combine_recursive_helper::combine(u (1 samples, 0.05%)</title><rect x="508.3" y="373" width="0.6" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="511.25" y="383.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::analyzeModule(llvm::Module&amp;, llvm::Targe (2 samples, 0.11%)</title><rect x="1174.7" y="565" width="1.3" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="1177.71" y="575.5" ></text>
</g>
<g >
<title>`llvm::getOrEnforceKnownAlignment(llvm::Value*, unsigned int, ll (14 samples, 0.76%)</title><rect x="531.2" y="485" width="8.9" height="15.0" fill="rgb(106,252,106)" rx="2" ry="2" />
<text  x="534.19" y="495.5" ></text>
</g>
<g >
<title>`llvm::TargetLibraryInfoImpl::getLibFunc(llvm::StringRef, llvm:: (1 samples, 0.05%)</title><rect x="550.9" y="469" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="553.94" y="479.5" ></text>
</g>
<g >
<title>`llvm::IRBuilder&lt;llvm::ConstantFolder, (anonymous namespace)::IR (2 samples, 0.11%)</title><rect x="706.4" y="437" width="1.3" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="709.40" y="447.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyAssociativeOrCommutative(llvm::Bina (1 samples, 0.05%)</title><rect x="78.8" y="581" width="0.6" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="81.81" y="591.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std::__1:: (1 samples, 0.05%)</title><rect x="155.3" y="581" width="0.6" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="158.27" y="591.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitAllocaInst(llvm::AllocaInst&amp;) (1 samples, 0.05%)</title><rect x="80.7" y="597" width="0.7" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="83.72" y="607.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::Value*, llvm::Value (1 samples, 0.05%)</title><rect x="367.4" y="629" width="0.7" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="370.44" y="639.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (2 samples, 0.11%)</title><rect x="556.7" y="373" width="1.2" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="559.67" y="383.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (7 samples, 0.38%)</title><rect x="270.6" y="581" width="4.5" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="273.59" y="591.5" ></text>
</g>
<g >
<title>`llvm::ObjectSizeOffsetVisitor::compute(llvm::Value*) (3 samples, 0.16%)</title><rect x="187.8" y="373" width="1.9" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="190.76" y="383.5" ></text>
</g>
<g >
<title>`llvm::CallSiteBase&lt;llvm::Function const, llvm::BasicBlock const (1 samples, 0.05%)</title><rect x="1130.7" y="405" width="0.7" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="1133.75" y="415.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="217.7" y="277" width="0.6" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="220.71" y="287.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (5 samples, 0.27%)</title><rect x="318.4" y="517" width="3.2" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="321.38" y="527.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeWrapperPass::releaseMemory() (3 samples, 0.16%)</title><rect x="155.3" y="613" width="1.9" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="158.27" y="623.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getAlignmentInfo(llvm::AlignTypeEnum, unsigne (1 samples, 0.05%)</title><rect x="292.3" y="581" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="295.26" y="591.5" ></text>
</g>
<g >
<title>`llvm::ConstantExprKeyType::getHash() const (1 samples, 0.05%)</title><rect x="750.4" y="389" width="0.6" height="15.0" fill="rgb(58,208,58)" rx="2" ry="2" />
<text  x="753.37" y="399.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (3 samples, 0.16%)</title><rect x="94.7" y="469" width="2.0" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="97.74" y="479.5" ></text>
</g>
<g >
<title>`llvm::upward_defs_iterator::operator+ (1 samples, 0.05%)</title><rect x="568.8" y="421" width="0.6" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="571.78" y="431.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (3 samples, 0.16%)</title><rect x="384.6" y="501" width="2.0" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="387.64" y="511.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::MapInfo::getHashVa (1 samples, 0.05%)</title><rect x="273.8" y="533" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="276.78" y="543.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::pointsToConstantMemory(llvm::MemoryLocatio (1 samples, 0.05%)</title><rect x="1159.4" y="453" width="0.7" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="1162.42" y="463.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="436.3" y="501" width="0.6" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="439.25" y="511.5" ></text>
</g>
<g >
<title>`SimplifyAddInst(llvm::Value*, llvm::Value*, bool, bool, llvm::S (1 samples, 0.05%)</title><rect x="481.5" y="485" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="484.49" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::BasicBlock const*&gt;::insert(llvm::Ba (1 samples, 0.05%)</title><rect x="744.0" y="501" width="0.6" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="747.00" y="511.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="413.3" y="437" width="0.7" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="416.32" y="447.5" ></text>
</g>
<g >
<title>`llvm::User::allocHungoffUses(unsigned int, bool) (1 samples, 0.05%)</title><rect x="573.9" y="437" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="576.88" y="447.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm::DomT (1 samples, 0.05%)</title><rect x="46.3" y="581" width="0.7" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="49.32" y="591.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv_ov(llvm::APInt const&amp;, bool&amp;) const (1 samples, 0.05%)</title><rect x="463.0" y="453" width="0.7" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="466.01" y="463.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (3 samples, 0.16%)</title><rect x="731.3" y="501" width="1.9" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="734.25" y="511.5" ></text>
</g>
<g >
<title>`DO-COMPILER-TIMER^COMPILER^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="965" width="1180.0" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="13.00" y="975.5" >`DO-COMPILER-TIMER^COMPILER^FN^^</text>
</g>
<g >
<title>`llvm::SetVector&lt;llvm::Instruction*, llvm::SmallVector&lt;llvm::Ins (1 samples, 0.05%)</title><rect x="707.7" y="421" width="0.6" height="15.0" fill="rgb(95,242,95)" rx="2" ry="2" />
<text  x="710.68" y="431.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="544.6" y="405" width="0.6" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="547.57" y="415.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm: (1 samples, 0.05%)</title><rect x="208.8" y="469" width="0.6" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="211.79" y="479.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldCastInstruction(unsigned int, llvm::Constant* (1 samples, 0.05%)</title><rect x="752.9" y="469" width="0.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="755.92" y="479.5" ></text>
</g>
<g >
<title>`isMinMaxWithLoads(llvm::Value*) (1 samples, 0.05%)</title><rect x="460.5" y="501" width="0.6" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="463.46" y="511.5" ></text>
</g>
<g >
<title>`llvm::MemorySSAWalker::getClobberingMemoryAccess(llvm::Instruct (3 samples, 0.16%)</title><rect x="149.5" y="581" width="1.9" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="152.54" y="591.5" ></text>
</g>
<g >
<title>`llvm::InstCombineWorklist::AddInitialGroup(llvm::ArrayRef&lt;llvm: (1 samples, 0.05%)</title><rect x="753.6" y="517" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="756.55" y="527.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (4 samples, 0.22%)</title><rect x="1148.6" y="453" width="2.5" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="1151.59" y="463.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (7 samples, 0.38%)</title><rect x="1147.9" y="501" width="4.5" height="15.0" fill="rgb(75,222,75)" rx="2" ry="2" />
<text  x="1150.95" y="511.5" ></text>
</g>
<g >
<title>`TPL^CORE^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="1797" width="1180.0" height="15.0" fill="rgb(67,180,180)" rx="2" ry="2" />
<text  x="13.00" y="1807.5" >`TPL^CORE^FN^^</text>
</g>
<g >
<title>`llvm::Constant::getUniqueInteger() const (1 samples, 0.05%)</title><rect x="176.3" y="453" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="179.30" y="463.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;llvm::Constant*, true&gt;::push_back (1 samples, 0.05%)</title><rect x="688.6" y="405" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="691.56" y="415.5" ></text>
</g>
<g >
<title>`compiler-conditions.lsp-compiler-conditions125^205^TOP-COMPILE- (1,852 samples, 100.00%)</title><rect x="10.0" y="1189" width="1180.0" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="13.00" y="1199.5" >`compiler-conditions.lsp-compiler-conditions125^205^TOP-COMPILE-</text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="744.6" y="437" width="0.7" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="747.63" y="447.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::FoldPHIArgOpIntoPHI(llvm::PHINode&amp;) (1 samples, 0.05%)</title><rect x="115.8" y="581" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="118.77" y="591.5" ></text>
</g>
<g >
<title>`llvm::Instruction::mayWriteToMemory() const (1 samples, 0.05%)</title><rect x="41.2" y="629" width="0.7" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="44.22" y="639.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="273.1" y="533" width="0.7" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="276.14" y="543.5" ></text>
</g>
<g >
<title>`llvm::PointerType::get(llvm::Type*, unsigned int) (1 samples, 0.05%)</title><rect x="298.0" y="421" width="0.6" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="300.99" y="431.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;unsigned int, llvm::GVN: (1 samples, 0.05%)</title><rect x="229.2" y="549" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="232.18" y="559.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getTerminator() const (1 samples, 0.05%)</title><rect x="261.7" y="565" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="264.67" y="575.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedInstructionBits(llvm::Instr (2 samples, 0.11%)</title><rect x="105.6" y="565" width="1.2" height="15.0" fill="rgb(70,219,70)" rx="2" ry="2" />
<text  x="108.57" y="575.5" ></text>
</g>
<g >
<title>`llvm::AssumptionCache::assumptionsFor(llvm::Value const*) (1 samples, 0.05%)</title><rect x="509.5" y="421" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="512.52" y="431.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::Grow(unsigned int) (1 samples, 0.05%)</title><rect x="712.8" y="453" width="0.6" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="715.78" y="463.5" ></text>
</g>
<g >
<title>`llvm::Value::getName() const (1 samples, 0.05%)</title><rect x="289.1" y="517" width="0.6" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="292.07" y="527.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1125" width="1180.0" height="15.0" fill="rgb(53,167,167)" rx="2" ry="2" />
<text  x="13.00" y="1135.5" >`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::APInt::sdiv_ov(llvm::APInt const&amp;, bool&amp;) const (1 samples, 0.05%)</title><rect x="647.8" y="117" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="650.79" y="127.5" ></text>
</g>
<g >
<title>`top.lsp-top130^522^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1589" width="1180.0" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="13.00" y="1599.5" >`top.lsp-top130^522^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::getOrCreate(llvm:: (1 samples, 0.05%)</title><rect x="758.7" y="405" width="0.6" height="15.0" fill="rgb(60,210,60)" rx="2" ry="2" />
<text  x="761.65" y="415.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::PHINode*, llvm::de (1 samples, 0.05%)</title><rect x="723.0" y="469" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="725.97" y="479.5" ></text>
</g>
<g >
<title>`std::__1::__vector_base&lt;std::__1::pair&lt;llvm::WeakTrackingVH, ll (1 samples, 0.05%)</title><rect x="352.8" y="469" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="355.79" y="479.5" ></text>
</g>
<g >
<title>`eliminateDeadStores(llvm::Function&amp;, llvm::AAResults*, llvm::Me (1 samples, 0.05%)</title><rect x="41.9" y="645" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="44.86" y="655.5" ></text>
</g>
<g >
<title>`llvm::generic_gep_type_iterator&lt;llvm::Value* const*&gt;::operator+ (1 samples, 0.05%)</title><rect x="450.9" y="453" width="0.6" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="453.91" y="463.5" ></text>
</g>
<g >
<title>`free_tiny (1 samples, 0.05%)</title><rect x="440.1" y="485" width="0.6" height="15.0" fill="rgb(190,190,55)" rx="2" ry="2" />
<text  x="443.08" y="495.5" ></text>
</g>
<g >
<title>`llvm::getObjectSize(llvm::Value const*, unsigned long long&amp;, ll (2 samples, 0.11%)</title><rect x="627.4" y="261" width="1.3" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="630.40" y="271.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (2 samples, 0.11%)</title><rect x="297.4" y="453" width="1.2" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="300.35" y="463.5" ></text>
</g>
<g >
<title>`llvm::APInt::operator (1 samples, 0.05%)</title><rect x="292.9" y="565" width="0.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="295.89" y="575.5" ></text>
</g>
<g >
<title>`llvm::BitstreamWriter::Emit(unsigned int, unsigned int) (1 samples, 0.05%)</title><rect x="1184.9" y="661" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="1187.90" y="671.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="544.6" y="453" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="547.57" y="463.5" ></text>
</g>
<g >
<title>`llvm::iplist_impl&lt;llvm::simple_ilist&lt;llvm::Instruction&gt;, llvm:: (1 samples, 0.05%)</title><rect x="701.3" y="501" width="0.6" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="704.31" y="511.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="55.2" y="565" width="0.7" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="58.24" y="575.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (2 samples, 0.11%)</title><rect x="306.3" y="485" width="1.2" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="309.27" y="495.5" ></text>
</g>
<g >
<title>`llvm::APInt::udiv(llvm::APInt const&amp;) const (2 samples, 0.11%)</title><rect x="69.3" y="517" width="1.2" height="15.0" fill="rgb(58,208,58)" rx="2" ry="2" />
<text  x="72.25" y="527.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::createNodeFromSelectLikePHI(llvm::PHINod (1 samples, 0.05%)</title><rect x="131.1" y="533" width="0.6" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="134.06" y="543.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Metadata const*, llvm:: (1 samples, 0.05%)</title><rect x="1179.8" y="661" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="1182.81" y="671.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (2 samples, 0.11%)</title><rect x="34.2" y="453" width="1.3" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="37.21" y="463.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::commonShiftTransforms(llvm::BinaryOperator&amp; (1 samples, 0.05%)</title><rect x="543.3" y="485" width="0.6" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="546.29" y="495.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::Valu (1 samples, 0.05%)</title><rect x="726.2" y="485" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="729.16" y="495.5" ></text>
</g>
<g >
<title>`llvm::scc_iterator&lt;llvm::Function const*, llvm::GraphTraits&lt;llv (1 samples, 0.05%)</title><rect x="257.2" y="597" width="0.7" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="260.21" y="607.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::createNodeForPHI(llvm::PHINode*) (1 samples, 0.05%)</title><rect x="250.8" y="325" width="0.7" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="253.84" y="335.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::BasicBlock*, std::__1::unique_ptr&lt;llvm::Do (1 samples, 0.05%)</title><rect x="155.3" y="597" width="0.6" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="158.27" y="607.5" ></text>
</g>
<g >
<title>`getAllocationData(llvm::Value const*, AllocType, llvm::TargetLi (2 samples, 0.11%)</title><rect x="288.4" y="549" width="1.3" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="291.43" y="559.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="323.5" y="533" width="0.6" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="326.48" y="543.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="412.7" y="421" width="0.6" height="15.0" fill="rgb(214,214,64)" rx="2" ry="2" />
<text  x="415.68" y="431.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::addUnknown(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="135.5" y="581" width="0.7" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="138.52" y="591.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::resetAll() (1 samples, 0.05%)</title><rect x="1151.1" y="453" width="0.7" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="1154.13" y="463.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="638.2" y="325" width="0.7" height="15.0" fill="rgb(202,202,59)" rx="2" ry="2" />
<text  x="641.23" y="335.5" ></text>
</g>
<g >
<title>`top.lsp-top130^378^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1941" width="1180.0" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="13.00" y="1951.5" >`top.lsp-top130^378^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (1 samples, 0.05%)</title><rect x="647.1" y="165" width="0.7" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="650.15" y="175.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="572.0" y="421" width="0.6" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="574.97" y="431.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (1 samples, 0.05%)</title><rect x="324.1" y="565" width="0.7" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="327.11" y="575.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::PointerIntPair&lt;llv (1 samples, 0.05%)</title><rect x="660.5" y="373" width="0.7" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="663.53" y="383.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (1 samples, 0.05%)</title><rect x="247.7" y="565" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="250.66" y="575.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Va (1 samples, 0.05%)</title><rect x="35.5" y="501" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="38.49" y="511.5" ></text>
</g>
<g >
<title>`llvm::ConstantRange::contains(llvm::ConstantRange const&amp;) const (1 samples, 0.05%)</title><rect x="1117.4" y="453" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="1120.37" y="463.5" ></text>
</g>
<g >
<title>`llvm::Value::setNameImpl(llvm::Twine const&amp;) (1 samples, 0.05%)</title><rect x="412.0" y="421" width="0.7" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="415.04" y="431.5" ></text>
</g>
<g >
<title>`llvm::ConstantRange::makeExactICmpRegion(llvm::CmpInst::Predica (1 samples, 0.05%)</title><rect x="510.8" y="453" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="513.80" y="463.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::GetNonLocalInfoForBlock(llvm::In (5 samples, 0.27%)</title><rect x="202.4" y="501" width="3.2" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="205.42" y="511.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getAlignment(llvm::Type*, bool) const (1 samples, 0.05%)</title><rect x="299.9" y="421" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="302.90" y="431.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="72.4" y="549" width="0.7" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="75.44" y="559.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="192.2" y="341" width="0.7" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="195.22" y="351.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::findAnalysisPass(void const*, bool) (1 samples, 0.05%)</title><rect x="1162.6" y="533" width="0.6" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="1165.60" y="543.5" ></text>
</g>
<g >
<title>`llvm::replaceDominatedUsesWith(llvm::Value*, llvm::Value*, llvm (5 samples, 0.27%)</title><rect x="675.2" y="453" width="3.2" height="15.0" fill="rgb(101,246,101)" rx="2" ry="2" />
<text  x="678.18" y="463.5" ></text>
</g>
<g >
<title>`llvm::FPPassManager::runOnModule(llvm::Module&amp;) (167 samples, 9.02%)</title><rect x="245.1" y="677" width="106.4" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="248.11" y="687.5" >`llvm::FPPass..</text>
</g>
<g >
<title>`llvm::ConstantFoldLoadFromConstPtr(llvm::Constant*, llvm::Type* (2 samples, 0.11%)</title><rect x="768.2" y="485" width="1.3" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="771.21" y="495.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="57.1" y="501" width="0.7" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="60.15" y="511.5" ></text>
</g>
<g >
<title>`SimplifyFunction(llvm::Function*, llvm::CallGraph&amp;) (1 samples, 0.05%)</title><rect x="10.6" y="645" width="0.7" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="13.64" y="655.5" ></text>
</g>
<g >
<title>`llvm::iplist_impl&lt;llvm::simple_ilist&lt;llvm::MemoryAccess, llvm:: (1 samples, 0.05%)</title><rect x="579.6" y="437" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="582.61" y="447.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="655.4" y="325" width="0.7" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="658.43" y="335.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solveBlockValueImpl(l (5 samples, 0.27%)</title><rect x="13.8" y="565" width="3.2" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="16.82" y="575.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm: (1 samples, 0.05%)</title><rect x="433.7" y="485" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="436.70" y="495.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="73.1" y="549" width="0.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="76.08" y="559.5" ></text>
</g>
<g >
<title>`llvm::Type::getScalarSizeInBits() const (1 samples, 0.05%)</title><rect x="322.2" y="549" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="325.20" y="559.5" ></text>
</g>
<g >
<title>`stripAndComputeConstantOffsets(llvm::DataLayout const&amp;, llvm::V (1 samples, 0.05%)</title><rect x="732.5" y="469" width="0.7" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="735.53" y="479.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std::__1:: (2 samples, 0.11%)</title><rect x="434.3" y="501" width="1.3" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="437.34" y="511.5" ></text>
</g>
<g >
<title>`llvm::BitstreamWriter::Emit(unsigned int, unsigned int) (1 samples, 0.05%)</title><rect x="1184.3" y="677" width="0.6" height="15.0" fill="rgb(101,246,101)" rx="2" ry="2" />
<text  x="1187.27" y="687.5" ></text>
</g>
<g >
<title>`std::__1::__split_buffer&lt;llvm::Constant*, std::__1::allocator&lt;l (1 samples, 0.05%)</title><rect x="467.5" y="405" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="470.47" y="415.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (4 samples, 0.22%)</title><rect x="488.5" y="469" width="2.5" height="15.0" fill="rgb(82,230,82)" rx="2" ry="2" />
<text  x="491.50" y="479.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock const*, (1 samples, 0.05%)</title><rect x="694.9" y="469" width="0.7" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="697.94" y="479.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitPHINode(llvm::PHINode&amp;) (1 samples, 0.05%)</title><rect x="540.1" y="501" width="0.6" height="15.0" fill="rgb(59,209,59)" rx="2" ry="2" />
<text  x="543.11" y="511.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::PoisoningVH&lt;llvm::Basic (1 samples, 0.05%)</title><rect x="380.2" y="389" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="383.18" y="399.5" ></text>
</g>
<g >
<title>`getAllocationData(llvm::Value const*, AllocType, llvm::TargetLi (2 samples, 0.11%)</title><rect x="200.5" y="437" width="1.3" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="203.51" y="447.5" ></text>
</g>
<g >
<title>`llvm::LoopBase&lt;llvm::BasicBlock, llvm::Loop&gt;::getExitingBlocks( (1 samples, 0.05%)</title><rect x="555.4" y="421" width="0.6" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="558.40" y="431.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasSelect(llvm::SelectInst const*, unsig (1 samples, 0.05%)</title><rect x="595.5" y="309" width="0.7" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="598.54" y="319.5" ></text>
</g>
<g >
<title>`llvm::BlockFrequencyInfoImpl&lt;llvm::BasicBlock&gt;::propagateMassTo (1 samples, 0.05%)</title><rect x="254.0" y="565" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="257.03" y="575.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::AggressiveDeadCodeElimination::markLive( (1 samples, 0.05%)</title><rect x="371.3" y="517" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="374.26" y="527.5" ></text>
</g>
<g >
<title>`computeOverflowForSignedAdd(llvm::Value const*, llvm::Value con (1 samples, 0.05%)</title><rect x="482.1" y="469" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="485.13" y="479.5" ></text>
</g>
<g >
<title>`llvm::MDNode::classof(llvm::Metadata const*) (1 samples, 0.05%)</title><rect x="725.5" y="437" width="0.7" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="728.52" y="447.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::MaxMin_match&lt;llvm::ICmpInst, llvm::Pat (1 samples, 0.05%)</title><rect x="312.6" y="581" width="0.7" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="315.65" y="591.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;llvm::Constant*, ll (1 samples, 0.05%)</title><rect x="470.7" y="453" width="0.6" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="473.66" y="463.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="467.5" y="389" width="0.6" height="15.0" fill="rgb(224,224,68)" rx="2" ry="2" />
<text  x="470.47" y="399.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::commonShiftTransforms(llvm::BinaryOperator&amp; (2 samples, 0.11%)</title><rect x="105.6" y="581" width="1.2" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="108.57" y="591.5" ></text>
</g>
<g >
<title>`llvm::JumpThreadingPass::ProcessThreadableEdges(llvm::Value*, l (14 samples, 0.76%)</title><rect x="405.0" y="501" width="9.0" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="408.03" y="511.5" ></text>
</g>
<g >
<title>`COMPILE-FILE^COMMON-LISP^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="1461" width="1180.0" height="15.0" fill="rgb(91,203,203)" rx="2" ry="2" />
<text  x="13.00" y="1471.5" >`COMPILE-FILE^COMMON-LISP^FN^^</text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (3 samples, 0.16%)</title><rect x="56.5" y="549" width="1.9" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="59.51" y="559.5" ></text>
</g>
<g >
<title>`llvm::APInt::udiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="1107.8" y="325" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="1110.81" y="335.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;llvm::Constant*, llvm::C (1 samples, 0.05%)</title><rect x="470.7" y="469" width="0.6" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="473.66" y="479.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="357.9" y="581" width="0.6" height="15.0" fill="rgb(184,184,53)" rx="2" ry="2" />
<text  x="360.88" y="591.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeBase&lt;llvm::BasicBlock, false&gt;::updateDFSNumb (1 samples, 0.05%)</title><rect x="171.8" y="533" width="0.7" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="174.84" y="543.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::PointerIntPair&lt;llvm::Value const*,  (1 samples, 0.05%)</title><rect x="638.2" y="405" width="0.7" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="641.23" y="415.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="120.2" y="485" width="0.7" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="123.23" y="495.5" ></text>
</g>
<g >
<title>`llvm::BlockFrequencyInfoImplBase::finalizeMetrics() (1 samples, 0.05%)</title><rect x="255.9" y="613" width="0.7" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="258.94" y="623.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::MapInfo::getHashVa (3 samples, 0.16%)</title><rect x="502.5" y="309" width="1.9" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="505.52" y="319.5" ></text>
</g>
<g >
<title>`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="744.6" y="389" width="0.7" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="747.63" y="399.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (2 samples, 0.11%)</title><rect x="34.2" y="437" width="1.3" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="37.21" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (5 samples, 0.27%)</title><rect x="394.8" y="469" width="3.2" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="397.84" y="479.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="340.7" y="613" width="0.6" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="343.68" y="623.5" ></text>
</g>
<g >
<title>`llvm::IsConstantOffsetFromGlobal(llvm::Constant*, llvm::GlobalV (1 samples, 0.05%)</title><rect x="453.5" y="453" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="456.46" y="463.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="176.9" y="485" width="0.7" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="179.93" y="495.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm::DomT (1 samples, 0.05%)</title><rect x="50.1" y="597" width="0.7" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="53.14" y="607.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="709.0" y="437" width="0.6" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="711.95" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SCCPSolver::visitTerminatorInst(llvm::Te (3 samples, 0.16%)</title><rect x="364.9" y="645" width="1.9" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="367.89" y="655.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (1 samples, 0.05%)</title><rect x="540.1" y="469" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="543.11" y="479.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitAdd(llvm::BinaryOperator&amp;) (5 samples, 0.27%)</title><rect x="480.9" y="501" width="3.1" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="483.85" y="511.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="406.3" y="277" width="0.6" height="15.0" fill="rgb(194,194,57)" rx="2" ry="2" />
<text  x="409.31" y="287.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAWrapperPass::runOnModule(llvm::Module&amp;) (2 samples, 0.11%)</title><rect x="351.5" y="677" width="1.3" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="354.51" y="687.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="573.9" y="357" width="0.6" height="15.0" fill="rgb(177,177,50)" rx="2" ry="2" />
<text  x="576.88" y="367.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="494.2" y="485" width="0.7" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="497.23" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="87.1" y="565" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="90.10" y="575.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="375.1" y="309" width="0.6" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="378.09" y="319.5" ></text>
</g>
<g >
<title>`llvm::InstructionCombiningPass::runOnFunction(llvm::Function&amp;) (180 samples, 9.72%)</title><rect x="440.7" y="549" width="114.7" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="443.71" y="559.5" >`llvm::Instruc..</text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::BasicBlock*, llvm::DomTreeBuil (1 samples, 0.05%)</title><rect x="50.1" y="581" width="0.7" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="53.14" y="591.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (1 samples, 0.05%)</title><rect x="595.5" y="277" width="0.7" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="598.54" y="287.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoCache::hasCachedValueInfo(l (2 samples, 0.11%)</title><rect x="37.4" y="533" width="1.3" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="40.40" y="543.5" ></text>
</g>
<g >
<title>`llvm::isGEPBasedOnPointerToString(llvm::GEPOperator const*, uns (1 samples, 0.05%)</title><rect x="733.8" y="437" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="736.80" y="447.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value*&gt;::insert(llvm::Value*) (1 samples, 0.05%)</title><rect x="301.8" y="549" width="0.7" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="304.81" y="559.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1123.7" y="293" width="0.7" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="1126.74" y="303.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::BasicBlock const*&gt;::find(llvm::Basi (1 samples, 0.05%)</title><rect x="426.1" y="421" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="429.06" y="431.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;unsigned long long, llv (1 samples, 0.05%)</title><rect x="1189.4" y="629" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="1192.36" y="639.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeWrapperPass::releaseMemory() (1 samples, 0.05%)</title><rect x="343.2" y="613" width="0.7" height="15.0" fill="rgb(100,245,100)" rx="2" ry="2" />
<text  x="346.23" y="623.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm:: (1 samples, 0.05%)</title><rect x="527.4" y="437" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="530.37" y="447.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(llvm (3 samples, 0.16%)</title><rect x="659.3" y="405" width="1.9" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="662.25" y="415.5" ></text>
</g>
<g >
<title>`SimplifyRightShift(llvm::Instruction::BinaryOps, llvm::Value*,  (1 samples, 0.05%)</title><rect x="221.5" y="533" width="0.7" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="224.53" y="543.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (2 samples, 0.11%)</title><rect x="668.8" y="341" width="1.3" height="15.0" fill="rgb(223,223,67)" rx="2" ry="2" />
<text  x="671.81" y="351.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, ll (1 samples, 0.05%)</title><rect x="483.4" y="469" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="486.40" y="479.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="573.9" y="421" width="0.6" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="576.88" y="431.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldICmpBinOp(llvm::ICmpInst&amp;) (1 samples, 0.05%)</title><rect x="514.0" y="485" width="0.6" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="516.98" y="495.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="723.6" y="405" width="0.6" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="726.61" y="415.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (2 samples, 0.11%)</title><rect x="651.0" y="245" width="1.2" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="653.97" y="255.5" ></text>
</g>
<g >
<title>`DO-TRACK-LLVM-TIME^COMPILER^FN^^ (6 samples, 0.32%)</title><rect x="1176.0" y="869" width="3.8" height="15.0" fill="rgb(56,170,170)" rx="2" ry="2" />
<text  x="1178.98" y="879.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (1 samples, 0.05%)</title><rect x="497.4" y="437" width="0.7" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="500.42" y="447.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getPointerABIAlignment(unsigned int) const (1 samples, 0.05%)</title><rect x="493.6" y="485" width="0.6" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="496.60" y="495.5" ></text>
</g>
<g >
<title>`free_tiny (1 samples, 0.05%)</title><rect x="1165.8" y="485" width="0.6" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="1168.79" y="495.5" ></text>
</g>
<g >
<title>`combineStoreToNewValue(llvm::InstCombiner&amp;, llvm::StoreInst&amp;, l (1 samples, 0.05%)</title><rect x="1125.6" y="485" width="0.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="1128.65" y="495.5" ></text>
</g>
<g >
<title>`llvm::GVN::performScalarPRE(llvm::Instruction*) (9 samples, 0.49%)</title><rect x="694.3" y="501" width="5.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="697.30" y="511.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyMultipleUseDemandedBits(llvm::Instr (1 samples, 0.05%)</title><rect x="81.4" y="533" width="0.6" height="15.0" fill="rgb(83,231,83)" rx="2" ry="2" />
<text  x="84.36" y="543.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getTerminator() const (1 samples, 0.05%)</title><rect x="711.5" y="501" width="0.6" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="714.50" y="511.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::u (1 samples, 0.05%)</title><rect x="397.4" y="405" width="0.6" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="400.39" y="415.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="152.7" y="501" width="0.7" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="155.72" y="511.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (9 samples, 0.49%)</title><rect x="296.1" y="533" width="5.7" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="299.08" y="543.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="219.0" y="389" width="0.6" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="221.98" y="399.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="225.4" y="405" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="228.36" y="415.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, (ano (1 samples, 0.05%)</title><rect x="371.9" y="501" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="374.90" y="511.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedUseBits(llvm::Value*, llvm: (2 samples, 0.11%)</title><rect x="103.7" y="549" width="1.2" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="106.66" y="559.5" ></text>
</g>
<g >
<title>`llvm::getConstantStringInfo(llvm::Value const*, llvm::StringRef (2 samples, 0.11%)</title><rect x="733.2" y="469" width="1.2" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="736.16" y="479.5" ></text>
</g>
<g >
<title>`llvm::GVN::splitCriticalEdges(llvm::BasicBlock*, llvm::BasicBlo (1 samples, 0.05%)</title><rect x="176.9" y="533" width="0.7" height="15.0" fill="rgb(60,210,60)" rx="2" ry="2" />
<text  x="179.93" y="543.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std::__1:: (5 samples, 0.27%)</title><rect x="575.8" y="501" width="3.2" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="578.79" y="511.5" ></text>
</g>
<g >
<title>`llvm::APInt::flipAllBits() (1 samples, 0.05%)</title><rect x="313.9" y="565" width="0.7" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="316.92" y="575.5" ></text>
</g>
<g >
<title>`ThreadCmpOverPHI(llvm::CmpInst::Predicate, llvm::Value*, llvm:: (1 samples, 0.05%)</title><rect x="1104.6" y="469" width="0.7" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="1107.62" y="479.5" ></text>
</g>
<g >
<title>`llvm::isPotentiallyReachable(llvm::BasicBlock const*, llvm::Bas (3 samples, 0.16%)</title><rect x="773.3" y="469" width="1.9" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="776.30" y="479.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;std::__1::pair&lt;llvm::Memo (1 samples, 0.05%)</title><rect x="622.9" y="277" width="0.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="625.94" y="287.5" ></text>
</g>
<g >
<title>`llvm::PassRegistry::getPassInfo(void const*) const (1 samples, 0.05%)</title><rect x="240.6" y="629" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="243.65" y="639.5" ></text>
</g>
<g >
<title>`top.lsp-top130^378^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1925" width="1180.0" height="15.0" fill="rgb(102,212,212)" rx="2" ry="2" />
<text  x="13.00" y="1935.5" >`top.lsp-top130^378^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::getOrEnforceKnownAlignment(llvm::Value*, unsigned int, ll (6 samples, 0.32%)</title><rect x="1134.6" y="485" width="3.8" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="1137.57" y="495.5" ></text>
</g>
<g >
<title>`llvm::PHINode::addIncoming(llvm::Value*, llvm::BasicBlock*) (1 samples, 0.05%)</title><rect x="723.6" y="469" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="726.61" y="479.5" ></text>
</g>
<g >
<title>`llvm::combineMetadata(llvm::Instruction*, llvm::Instruction con (1 samples, 0.05%)</title><rect x="693.7" y="485" width="0.6" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="696.66" y="495.5" ></text>
</g>
<g >
<title>`llvm::MemorySSAWrapperPass::releaseMemory() (2 samples, 0.11%)</title><rect x="579.0" y="517" width="1.2" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="581.97" y="527.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeBase&lt;llvm::BasicBlock, false&gt;::dominates(llv (3 samples, 0.16%)</title><rect x="675.8" y="421" width="1.9" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="678.82" y="431.5" ></text>
</g>
<g >
<title>`llvm::ConstantExprKeyType::getHash() const (1 samples, 0.05%)</title><rect x="512.7" y="341" width="0.6" height="15.0" fill="rgb(71,220,71)" rx="2" ry="2" />
<text  x="515.71" y="351.5" ></text>
</g>
<g >
<title>`optimizeGlobalsInModule(llvm::Module&amp;, llvm::DataLayout const&amp;, (3 samples, 0.16%)</title><rect x="241.9" y="661" width="1.9" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="244.92" y="671.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::getSCEV(llvm::Value*) (1 samples, 0.05%)</title><rect x="250.8" y="357" width="0.7" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="253.84" y="367.5" ></text>
</g>
<g >
<title>`llvm::LoopInfoBase&lt;llvm::BasicBlock, llvm::Loop&gt;::analyze(llvm: (4 samples, 0.22%)</title><rect x="338.8" y="629" width="2.5" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="341.77" y="639.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::CastGEPIndices(llvm::Type*, llvm::ArrayR (2 samples, 0.11%)</title><rect x="761.2" y="453" width="1.3" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="764.20" y="463.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="39.9" y="517" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="42.95" y="527.5" ></text>
</g>
<g >
<title>`llvm::Value::stripPointerCasts() const (1 samples, 0.05%)</title><rect x="87.1" y="581" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="90.10" y="591.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitICmpInst(llvm::ICmpInst&amp;) (33 samples, 1.78%)</title><rect x="1102.7" y="501" width="21.0" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="1105.71" y="511.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getInvariantGroupPointerDependen (1 samples, 0.05%)</title><rect x="643.3" y="373" width="0.7" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="646.33" y="383.5" ></text>
</g>
<g >
<title>`free_tiny (1 samples, 0.05%)</title><rect x="158.5" y="517" width="0.6" height="15.0" fill="rgb(219,219,66)" rx="2" ry="2" />
<text  x="161.46" y="527.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObjects(llvm::Value*, llvm::SmallVectorImpl&lt; (2 samples, 0.11%)</title><rect x="92.2" y="517" width="1.3" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="95.19" y="527.5" ></text>
</g>
<g >
<title>`llvm::Instruction::mayReadFromMemory() const (1 samples, 0.05%)</title><rect x="698.8" y="485" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="701.76" y="495.5" ></text>
</g>
<g >
<title>`llvm::PointerType::get(llvm::Type*, unsigned int) (1 samples, 0.05%)</title><rect x="1110.4" y="325" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="1113.36" y="335.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::DomTreeNodeBase&lt;llvm::BasicBlock&gt;*&gt; (1 samples, 0.05%)</title><rect x="702.6" y="469" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="705.58" y="479.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::PointerIntPair&lt;llvm::Value*, 2u, (anonymou (1 samples, 0.05%)</title><rect x="358.5" y="645" width="0.7" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="361.52" y="655.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::isCompare() const (1 samples, 0.05%)</title><rect x="96.7" y="485" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="99.65" y="495.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="777.8" y="453" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="780.76" y="463.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value*&gt;::insert(llvm::Value*) (2 samples, 0.11%)</title><rect x="621.0" y="261" width="1.3" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="624.03" y="271.5" ></text>
</g>
<g >
<title>`llvm::LoopInfoBase&lt;llvm::BasicBlock, llvm::Loop&gt;::analyze(llvm: (6 samples, 0.32%)</title><rect x="562.4" y="533" width="3.8" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="565.41" y="543.5" ></text>
</g>
<g >
<title>`llvm::SmallVector&lt;unsigned int, 4u&gt;::SmallVector(llvm::SmallVec (1 samples, 0.05%)</title><rect x="589.2" y="357" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="592.17" y="367.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::IndVarSimplifyLegacyPass::runOnLoop(llvm (4 samples, 0.22%)</title><rect x="130.4" y="629" width="2.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="133.42" y="639.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="257.2" y="501" width="0.7" height="15.0" fill="rgb(176,176,50)" rx="2" ry="2" />
<text  x="260.21" y="511.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="752.3" y="469" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="755.28" y="479.5" ></text>
</g>
<g >
<title>`llvm::APInt::udiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="55.9" y="533" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="58.87" y="543.5" ></text>
</g>
<g >
<title>`unsigned int llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorT (1 samples, 0.05%)</title><rect x="582.8" y="501" width="0.6" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="585.80" y="511.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Type*, llvm::PointerTyp (1 samples, 0.05%)</title><rect x="1100.2" y="453" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="1103.16" y="463.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstructionsInBlock(llvm::BasicBlock*, llvm::Targ (1 samples, 0.05%)</title><rect x="413.3" y="469" width="0.7" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="416.32" y="479.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseSetPair&lt;std::__1::pair&lt;llvm::BasicBlock*, ll (1 samples, 0.05%)</title><rect x="709.0" y="469" width="0.6" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="711.95" y="479.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="347.1" y="549" width="0.6" height="15.0" fill="rgb(225,225,68)" rx="2" ry="2" />
<text  x="350.05" y="559.5" ></text>
</g>
<g >
<title>`llvm::computeOverflowForSignedAdd(llvm::Value const*, llvm::Val (1 samples, 0.05%)</title><rect x="79.4" y="581" width="0.7" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="82.45" y="591.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getIntPtrType(llvm::Type*) const (1 samples, 0.05%)</title><rect x="444.5" y="453" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="447.54" y="463.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="1174.7" y="469" width="0.6" height="15.0" fill="rgb(204,204,60)" rx="2" ry="2" />
<text  x="1177.71" y="479.5" ></text>
</g>
<g >
<title>`bool llvm::CallInst::hasFnAttrImpl&lt;llvm::Attribute::AttrKind&gt;(l (1 samples, 0.05%)</title><rect x="528.6" y="437" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="531.64" y="447.5" ></text>
</g>
<g >
<title>`llvm::LazyValueInfo::getPredicateOnEdge(unsigned int, llvm::Val (9 samples, 0.49%)</title><rect x="415.2" y="485" width="5.8" height="15.0" fill="rgb(106,252,106)" rx="2" ry="2" />
<text  x="418.23" y="495.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::Value*, llvm::ValueLatticeElem (1 samples, 0.05%)</title><rect x="17.6" y="485" width="0.7" height="15.0" fill="rgb(70,219,70)" rx="2" ry="2" />
<text  x="20.65" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getValueOnEdge(llvm:: (1 samples, 0.05%)</title><rect x="375.7" y="501" width="0.7" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="378.72" y="511.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solveBlockValueImpl(l (2 samples, 0.11%)</title><rect x="374.4" y="469" width="1.3" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="377.45" y="479.5" ></text>
</g>
<g >
<title>`std::__1::__split_buffer&lt;llvm::DomTreeNodeBase&lt;llvm::BasicBlock (1 samples, 0.05%)</title><rect x="437.5" y="485" width="0.7" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="440.53" y="495.5" ></text>
</g>
<g >
<title>`llvm::GVN::performPRE(llvm::Function&amp;) (5 samples, 0.27%)</title><rect x="226.6" y="613" width="3.2" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="229.63" y="623.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (5 samples, 0.27%)</title><rect x="304.4" y="501" width="3.1" height="15.0" fill="rgb(65,213,65)" rx="2" ry="2" />
<text  x="307.36" y="511.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solveBlockValueImpl(l (4 samples, 0.22%)</title><rect x="20.2" y="549" width="2.5" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="23.19" y="559.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::IntegerType*, unsigned long long,  (1 samples, 0.05%)</title><rect x="212.0" y="533" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="214.98" y="543.5" ></text>
</g>
<g >
<title>`llvm::VNCoercion::analyzeLoadFromClobberingWrite(llvm::Type*, l (1 samples, 0.05%)</title><rect x="176.3" y="517" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="179.30" y="527.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (2 samples, 0.11%)</title><rect x="594.9" y="325" width="1.3" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="597.90" y="335.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::createExpr(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="589.8" y="453" width="0.6" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="592.81" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::MapInfo::getHashVa (1 samples, 0.05%)</title><rect x="265.5" y="517" width="0.6" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="268.50" y="527.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;unsigned int, true&gt;::push_back(un (1 samples, 0.05%)</title><rect x="213.9" y="533" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="216.89" y="543.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, unsigned  (1 samples, 0.05%)</title><rect x="75.6" y="597" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="78.63" y="607.5" ></text>
</g>
<g >
<title>`llvm::ConstantExprKeyType::getHash() const (1 samples, 0.05%)</title><rect x="95.4" y="389" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="98.38" y="399.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::find_imp(void const*) const (1 samples, 0.05%)</title><rect x="738.3" y="485" width="0.6" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="741.26" y="495.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="209.4" y="453" width="0.7" height="15.0" fill="rgb(192,192,56)" rx="2" ry="2" />
<text  x="212.43" y="463.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (20 samples, 1.08%)</title><rect x="89.0" y="581" width="12.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="92.01" y="591.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObjects(llvm::Value*, llvm::SmallVectorImpl&lt; (9 samples, 0.49%)</title><rect x="296.1" y="549" width="5.7" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="299.08" y="559.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;std::__1::pair&lt;llvm::MemoryAc (2 samples, 0.11%)</title><rect x="150.2" y="533" width="1.2" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="153.17" y="543.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;llvm::Function*, (anonymous namespace)::CVPLat (1 samples, 0.05%)</title><rect x="360.4" y="629" width="0.7" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="363.43" y="639.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::BinaryOp_match&lt;llvm::PatternMatch::bin (1 samples, 0.05%)</title><rect x="1095.1" y="453" width="0.6" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="1098.06" y="463.5" ></text>
</g>
<g >
<title>`llvm::Twine::printOneChild(llvm::raw_ostream&amp;, llvm::Twine::Chi (1 samples, 0.05%)</title><rect x="705.8" y="405" width="0.6" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="708.77" y="415.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::addPointer(llvm::Value*, unsigned long l (2 samples, 0.11%)</title><rect x="333.7" y="565" width="1.2" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="336.67" y="575.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (3 samples, 0.16%)</title><rect x="633.1" y="325" width="1.9" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="636.13" y="335.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedBits(llvm::Instruction*, un (1 samples, 0.05%)</title><rect x="517.8" y="437" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="520.81" y="447.5" ></text>
</g>
<g >
<title>`llvm::LibCallSimplifier::optimizeCall(llvm::CallInst*) (2 samples, 0.11%)</title><rect x="487.2" y="453" width="1.3" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="490.22" y="463.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (2 samples, 0.11%)</title><rect x="536.9" y="341" width="1.3" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="539.92" y="351.5" ></text>
</g>
<g >
<title>`llvm::decomposeBitTestICmp(llvm::Value*, llvm::Value*, llvm::Cm (1 samples, 0.05%)</title><rect x="119.0" y="565" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="121.95" y="575.5" ></text>
</g>
<g >
<title>`free_tiny (2 samples, 0.11%)</title><rect x="763.1" y="421" width="1.3" height="15.0" fill="rgb(219,219,66)" rx="2" ry="2" />
<text  x="766.11" y="431.5" ></text>
</g>
<g >
<title>`llvm::gvn::GVNLegacyPass::runOnFunction(llvm::Function&amp;) (108 samples, 5.83%)</title><rect x="161.0" y="645" width="68.8" height="15.0" fill="rgb(88,234,88)" rx="2" ry="2" />
<text  x="164.00" y="655.5" >`llvm::..</text>
</g>
<g >
<title>`SimplifyLShrInst(llvm::Value*, llvm::Value*, bool, llvm::Simpli (3 samples, 0.16%)</title><rect x="521.6" y="485" width="1.9" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="524.63" y="495.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::pointsToConstantMemory(llvm::MemoryLocatio (1 samples, 0.05%)</title><rect x="149.5" y="517" width="0.7" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="152.54" y="527.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (2 samples, 0.11%)</title><rect x="143.8" y="549" width="1.3" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="146.80" y="559.5" ></text>
</g>
<g >
<title>`llvm::generic_gep_type_iterator&lt;llvm::Use const*&gt;::getIndexedTy (1 samples, 0.05%)</title><rect x="192.9" y="341" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="195.86" y="351.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::lookupOrAddCmp(unsigned int, llvm::CmpIn (3 samples, 0.16%)</title><rect x="212.6" y="549" width="1.9" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="215.61" y="559.5" ></text>
</g>
<g >
<title>`free_small (1 samples, 0.05%)</title><rect x="936.4" y="437" width="0.7" height="15.0" fill="rgb(213,213,63)" rx="2" ry="2" />
<text  x="939.41" y="447.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::GVN::Expression, u (5 samples, 0.27%)</title><rect x="164.2" y="517" width="3.2" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="167.19" y="527.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (4 samples, 0.22%)</title><rect x="1141.6" y="421" width="2.5" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="1144.58" y="431.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitLoadInst(llvm::LoadInst&amp;) (11 samples, 0.59%)</title><rect x="106.8" y="597" width="7.1" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="109.85" y="607.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="709.0" y="405" width="0.6" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="711.95" y="415.5" ></text>
</g>
<g >
<title>`isDereferenceableAndAlignedPointer(llvm::Value const*, unsigned (1 samples, 0.05%)</title><rect x="719.1" y="421" width="0.7" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="722.15" y="431.5" ></text>
</g>
<g >
<title>`stripAndComputeConstantOffsets(llvm::DataLayout const&amp;, llvm::V (1 samples, 0.05%)</title><rect x="308.8" y="549" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="311.82" y="559.5" ></text>
</g>
<g >
<title>`llvm::formLCSSA(llvm::Loop&amp;, llvm::DominatorTree&amp;, llvm::LoopIn (3 samples, 0.16%)</title><rect x="735.7" y="517" width="1.9" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="738.71" y="527.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObjects(llvm::Value*, llvm::SmallVectorImpl&lt; (1 samples, 0.05%)</title><rect x="217.7" y="485" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="220.71" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ModuleBitcodeWriter::writeDISubprogram(l (1 samples, 0.05%)</title><rect x="1179.8" y="677" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="1182.81" y="687.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::Instruction*, llvm::SmallPtrSet&lt;llvm::Poin (1 samples, 0.05%)</title><rect x="183.3" y="469" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="186.30" y="479.5" ></text>
</g>
<g >
<title>`void std::__1::vector&lt;llvm::DomTreeNodeBase&lt;llvm::BasicBlock&gt;*, (2 samples, 0.11%)</title><rect x="48.9" y="597" width="1.2" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="51.87" y="607.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::initializeAnalysisImpl(llvm::Pass*) (1 samples, 0.05%)</title><rect x="154.0" y="645" width="0.6" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="157.00" y="655.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1365" width="1180.0" height="15.0" fill="rgb(66,180,180)" rx="2" ry="2" />
<text  x="13.00" y="1375.5" >`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::GVN::Expression, u (1 samples, 0.05%)</title><rect x="212.6" y="501" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="215.61" y="511.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (2 samples, 0.11%)</title><rect x="556.7" y="405" width="1.2" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="559.67" y="415.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (1 samples, 0.05%)</title><rect x="543.9" y="453" width="0.7" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="546.93" y="463.5" ></text>
</g>
<g >
<title>`llvm::TryToSimplifyUncondBranchFromEmptyBlock(llvm::BasicBlock* (1 samples, 0.05%)</title><rect x="350.2" y="581" width="0.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="353.24" y="591.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (2 samples, 0.11%)</title><rect x="633.8" y="293" width="1.2" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="636.77" y="303.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (1 samples, 0.05%)</title><rect x="507.6" y="437" width="0.7" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="510.61" y="447.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock const*, std: (1 samples, 0.05%)</title><rect x="579.6" y="469" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="582.61" y="479.5" ></text>
</g>
<g >
<title>`llvm::Value::~Value() (1 samples, 0.05%)</title><rect x="422.2" y="485" width="0.7" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="425.24" y="495.5" ></text>
</g>
<g >
<title>`llvm::isGEPBasedOnPointerToString(llvm::GEPOperator const*, uns (1 samples, 0.05%)</title><rect x="768.8" y="453" width="0.7" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="771.84" y="463.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (1 samples, 0.05%)</title><rect x="680.9" y="421" width="0.7" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="683.92" y="431.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="497.4" y="405" width="0.7" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="500.42" y="415.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;std::__1::pair&lt;llvm::SCEV const*, llvm::Instruct (1 samples, 0.05%)</title><rect x="130.4" y="597" width="0.7" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="133.42" y="607.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="95.4" y="437" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="98.38" y="447.5" ></text>
</g>
<g >
<title>`std::__1::enable_if&lt;is_hashable_data&lt;llvm::Metadata* const&gt;::va (1 samples, 0.05%)</title><rect x="450.3" y="389" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="453.27" y="399.5" ></text>
</g>
<g >
<title>`llvm::LazyValueInfo::getConstantRange(llvm::Value*, llvm::Basic (3 samples, 0.16%)</title><rect x="387.2" y="501" width="1.9" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="390.19" y="511.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (3 samples, 0.16%)</title><rect x="192.9" y="373" width="1.9" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="195.86" y="383.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getPointerDependencyFrom(llvm::M (5 samples, 0.27%)</title><rect x="202.4" y="485" width="3.2" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="205.42" y="495.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="649.7" y="245" width="0.6" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="652.70" y="255.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="498.1" y="341" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="501.06" y="351.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm::DomT (1 samples, 0.05%)</title><rect x="50.1" y="549" width="0.7" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="53.14" y="559.5" ></text>
</g>
<g >
<title>`DYLD-STUB$$operator delete(void*) (1 samples, 0.05%)</title><rect x="464.3" y="437" width="0.6" height="15.0" fill="rgb(185,185,53)" rx="2" ry="2" />
<text  x="467.29" y="447.5" ></text>
</g>
<g >
<title>`default_zone_free_definite_size (1 samples, 0.05%)</title><rect x="417.8" y="389" width="0.6" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="420.78" y="399.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (9 samples, 0.49%)</title><rect x="445.8" y="485" width="5.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="448.81" y="495.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::AssumptionCache::A (1 samples, 0.05%)</title><rect x="1142.9" y="357" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="1145.85" y="367.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SCCPSolver::Solve() (6 samples, 0.32%)</title><rect x="363.6" y="661" width="3.8" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="366.62" y="671.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="975.3" y="421" width="0.6" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="978.28" y="431.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="177.6" y="469" width="0.6" height="15.0" fill="rgb(189,189,55)" rx="2" ry="2" />
<text  x="180.57" y="479.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (8 samples, 0.43%)</title><rect x="1107.2" y="405" width="5.1" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="1110.17" y="415.5" ></text>
</g>
<g >
<title>`CATCH-FUNCTION^CORE^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="2037" width="1180.0" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="13.00" y="2047.5" >`CATCH-FUNCTION^CORE^FN^^</text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value*&gt;::insert(llvm::Value*) (2 samples, 0.11%)</title><rect x="18.9" y="533" width="1.3" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="21.92" y="543.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm::Mem (1 samples, 0.05%)</title><rect x="654.2" y="309" width="0.6" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="657.16" y="319.5" ></text>
</g>
<g >
<title>`SimplifyRightShift(llvm::Instruction::BinaryOps, llvm::Value*,  (1 samples, 0.05%)</title><rect x="1123.7" y="469" width="0.7" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="1126.74" y="479.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getAlignment(llvm::Type*, bool) const (1 samples, 0.05%)</title><rect x="708.3" y="469" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="711.32" y="479.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="422.9" y="437" width="0.6" height="15.0" fill="rgb(182,182,52)" rx="2" ry="2" />
<text  x="425.87" y="447.5" ></text>
</g>
<g >
<title>`llvm::LoopBase&lt;llvm::BasicBlock, llvm::Loop&gt;::getExitBlocks(llv (1 samples, 0.05%)</title><rect x="543.3" y="389" width="0.6" height="15.0" fill="rgb(63,211,63)" rx="2" ry="2" />
<text  x="546.29" y="399.5" ></text>
</g>
<g >
<title>`llvm::CallSiteBase&lt;llvm::Function, llvm::BasicBlock, llvm::Valu (1 samples, 0.05%)</title><rect x="286.5" y="581" width="0.7" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="289.52" y="591.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(llvm (34 samples, 1.84%)</title><rect x="640.8" y="421" width="21.6" height="15.0" fill="rgb(101,246,101)" rx="2" ry="2" />
<text  x="643.78" y="431.5" >`..</text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (1 samples, 0.05%)</title><rect x="1113.5" y="437" width="0.7" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="1116.54" y="447.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="350.2" y="485" width="0.7" height="15.0" fill="rgb(204,204,60)" rx="2" ry="2" />
<text  x="353.24" y="495.5" ></text>
</g>
<g >
<title>`llvm::ConstantRange::isEmptySet() const (1 samples, 0.05%)</title><rect x="101.1" y="517" width="0.6" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="104.11" y="527.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="751.0" y="453" width="0.6" height="15.0" fill="rgb(96,243,96)" rx="2" ry="2" />
<text  x="754.00" y="463.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::BasicBlock*, llvm::SSAUpdaterImpl&lt;llvm::SS (1 samples, 0.05%)</title><rect x="737.0" y="373" width="0.6" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="739.99" y="383.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (1 samples, 0.05%)</title><rect x="645.2" y="293" width="0.7" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="648.24" y="303.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::DecomposeGEPExpression(llvm::Value const*, (1 samples, 0.05%)</title><rect x="594.3" y="325" width="0.6" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="597.27" y="335.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::BinaryOp_match&lt;llvm::PatternMatch::bin (1 samples, 0.05%)</title><rect x="514.6" y="469" width="0.7" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="517.62" y="479.5" ></text>
</g>
<g >
<title>`llvm::PopulateLoopsDFS&lt;llvm::BasicBlock, llvm::Loop&gt;::traverse( (1 samples, 0.05%)</title><rect x="340.0" y="613" width="0.7" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="343.04" y="623.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::commonShiftTransforms(llvm::BinaryOperator&amp; (2 samples, 0.11%)</title><rect x="523.5" y="485" width="1.3" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="526.54" y="495.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Metadata const*, l (1 samples, 0.05%)</title><rect x="1179.8" y="645" width="0.6" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="1182.81" y="655.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (6 samples, 0.32%)</title><rect x="217.7" y="549" width="3.8" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="220.71" y="559.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (1 samples, 0.05%)</title><rect x="146.3" y="597" width="0.7" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="149.35" y="607.5" ></text>
</g>
<g >
<title>`FUNWIND-PROTECT^CORE^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="1173" width="1180.0" height="15.0" fill="rgb(83,196,196)" rx="2" ry="2" />
<text  x="13.00" y="1183.5" >`FUNWIND-PROTECT^CORE^FN^^</text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoCache::isOverdefined(llvm:: (1 samples, 0.05%)</title><rect x="37.4" y="517" width="0.6" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="40.40" y="527.5" ></text>
</g>
<g >
<title>`isUndefShift(llvm::Value*) (1 samples, 0.05%)</title><rect x="521.6" y="437" width="0.7" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="524.63" y="447.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::alias(llvm::MemoryLocation const&amp;, llvm::M (2 samples, 0.11%)</title><rect x="556.7" y="389" width="1.2" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="559.67" y="399.5" ></text>
</g>
<g >
<title>`llvm::LoopInfoBase&lt;llvm::BasicBlock, llvm::Loop&gt;::analyze(llvm: (3 samples, 0.16%)</title><rect x="1160.7" y="533" width="1.9" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="1163.69" y="543.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedInstructionBits(llvm::Instr (2 samples, 0.11%)</title><rect x="284.0" y="581" width="1.2" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="286.97" y="591.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="412.7" y="389" width="0.6" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="415.68" y="399.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="748.5" y="373" width="0.6" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="751.46" y="383.5" ></text>
</g>
<g >
<title>`void std::__1::__sort&lt;std::__1::__less&lt;llvm::NonLocalDepEntry,  (1 samples, 0.05%)</title><rect x="640.8" y="389" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="643.78" y="399.5" ></text>
</g>
<g >
<title>`llvm::IRBuilder&lt;llvm::TargetFolder, llvm::IRBuilderCallbackInse (2 samples, 0.11%)</title><rect x="524.8" y="469" width="1.3" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="527.82" y="479.5" ></text>
</g>
<g >
<title>`llvm::Value::getValueName() const (1 samples, 0.05%)</title><rect x="1094.4" y="405" width="0.7" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="1097.43" y="415.5" ></text>
</g>
<g >
<title>`llvm::CastInst* llvm::IRBuilder&lt;llvm::TargetFolder, llvm::IRBui (1 samples, 0.05%)</title><rect x="524.8" y="453" width="0.7" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="527.82" y="463.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;void const*, llvm::Pass* (2 samples, 0.11%)</title><rect x="44.4" y="565" width="1.3" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="47.41" y="575.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (2 samples, 0.11%)</title><rect x="47.6" y="549" width="1.3" height="15.0" fill="rgb(192,192,56)" rx="2" ry="2" />
<text  x="50.59" y="559.5" ></text>
</g>
<g >
<title>`llvm::JumpThreadingPass::FindLoopHeaders(llvm::Function&amp;) (2 samples, 0.11%)</title><rect x="31.0" y="613" width="1.3" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="34.03" y="623.5" ></text>
</g>
<g >
<title>`small_malloc_should_clear (1 samples, 0.05%)</title><rect x="382.1" y="277" width="0.6" height="15.0" fill="rgb(203,203,60)" rx="2" ry="2" />
<text  x="385.10" y="287.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="745.9" y="517" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="748.91" y="527.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getSimplePointerDependencyFrom(l (7 samples, 0.38%)</title><rect x="593.6" y="405" width="4.5" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="596.63" y="415.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::getModRefBehavior(llvm::ImmutableCallSite) (1 samples, 0.05%)</title><rect x="590.4" y="421" width="0.7" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="593.44" y="431.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solve() (1 samples, 0.05%)</title><rect x="406.3" y="405" width="0.6" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="409.31" y="415.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm: (1 samples, 0.05%)</title><rect x="261.0" y="597" width="0.7" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="264.04" y="607.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::CGPassManager::runOnModule(llvm::Module&amp; (563 samples, 30.40%)</title><rect x="368.1" y="581" width="358.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="371.08" y="591.5" >`(anonymous namespace)::CGPassManager::runOnModu..</text>
</g>
<g >
<title>`llvmo::Module_O::moduleDelete() (6 samples, 0.32%)</title><rect x="1176.0" y="773" width="3.8" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="1178.98" y="783.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LegacyLICMPass::runOnLoop(llvm::Loop*, l (8 samples, 0.43%)</title><rect x="556.0" y="533" width="5.1" height="15.0" fill="rgb(59,209,59)" rx="2" ry="2" />
<text  x="559.04" y="543.5" ></text>
</g>
<g >
<title>`llvm::LoopInfoWrapperPass::runOnFunction(llvm::Function&amp;) (8 samples, 0.43%)</title><rect x="143.2" y="645" width="5.1" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="146.16" y="655.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (1 samples, 0.05%)</title><rect x="29.1" y="597" width="0.7" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="32.11" y="607.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::getModRefInfo(llvm::ImmutableCallSite, l (1 samples, 0.05%)</title><rect x="570.7" y="373" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="573.69" y="383.5" ></text>
</g>
<g >
<title>`llvm::GVN::processBlock(llvm::BasicBlock*) (172 samples, 9.29%)</title><rect x="584.7" y="501" width="109.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="587.71" y="511.5" >`llvm::GVN::p..</text>
</g>
<g >
<title>`llvm::MemorySSAWrapperPass::releaseMemory() (1 samples, 0.05%)</title><rect x="158.5" y="613" width="0.6" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="161.46" y="623.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="120.2" y="469" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="123.23" y="479.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::alias(llvm::MemoryLocation const&amp;, llvm::M (4 samples, 0.22%)</title><rect x="202.4" y="421" width="2.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="205.42" y="431.5" ></text>
</g>
<g >
<title>`small_malloc_should_clear (1 samples, 0.05%)</title><rect x="709.0" y="373" width="0.6" height="15.0" fill="rgb(202,202,60)" rx="2" ry="2" />
<text  x="711.95" y="383.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::MapInfo::getHashVa (1 samples, 0.05%)</title><rect x="450.3" y="421" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="453.27" y="431.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="262.9" y="597" width="0.7" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="265.95" y="607.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, llvm::Sma (1 samples, 0.05%)</title><rect x="183.3" y="453" width="0.6" height="15.0" fill="rgb(52,201,52)" rx="2" ry="2" />
<text  x="186.30" y="463.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::CollectSCCMembership(llvm::CallGraph&amp;) (1 samples, 0.05%)</title><rect x="1175.3" y="549" width="0.7" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="1178.35" y="559.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (1 samples, 0.05%)</title><rect x="1123.7" y="437" width="0.7" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="1126.74" y="447.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="333.7" y="437" width="0.6" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="336.67" y="447.5" ></text>
</g>
<g >
<title>`llvm::APInt::APInt(unsigned int, unsigned long long, bool) (1 samples, 0.05%)</title><rect x="1151.8" y="453" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="1154.77" y="463.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="716.6" y="357" width="0.6" height="15.0" fill="rgb(189,189,55)" rx="2" ry="2" />
<text  x="719.60" y="367.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value const*&gt;::insert(llvm::Value c (1 samples, 0.05%)</title><rect x="174.4" y="389" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="177.38" y="399.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (1 samples, 0.05%)</title><rect x="90.9" y="469" width="0.7" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="93.92" y="479.5" ></text>
</g>
<g >
<title>`llvm::StringMapImpl::FindKey(llvm::StringRef) const (1 samples, 0.05%)</title><rect x="38.7" y="453" width="0.6" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="41.67" y="463.5" ></text>
</g>
<g >
<title>`RUN-COMPILER^CL-BENCH.MISC^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="1477" width="1180.0" height="15.0" fill="rgb(55,170,170)" rx="2" ry="2" />
<text  x="13.00" y="1487.5" >`RUN-COMPILER^CL-BENCH.MISC^FN^^</text>
</g>
<g >
<title>`llvm::Constant::isNullValue() const (1 samples, 0.05%)</title><rect x="766.9" y="437" width="0.7" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="769.93" y="447.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::createNodeForPHI(llvm::PHINode*) (1 samples, 0.05%)</title><rect x="131.1" y="421" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="134.06" y="431.5" ></text>
</g>
<g >
<title>`llvm::formLCSSARecursively(llvm::Loop&amp;, llvm::DominatorTree&amp;, l (1 samples, 0.05%)</title><rect x="250.2" y="629" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="253.21" y="639.5" ></text>
</g>
<g >
<title>`llvm::Loop::hasDedicatedExits() const (1 samples, 0.05%)</title><rect x="561.8" y="469" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="564.77" y="479.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::GVN::Expression, unsign (1 samples, 0.05%)</title><rect x="212.6" y="517" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="215.61" y="527.5" ></text>
</g>
<g >
<title>`llvm::User::growHungoffUses(unsigned int, bool) (1 samples, 0.05%)</title><rect x="723.6" y="453" width="0.6" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="726.61" y="463.5" ></text>
</g>
<g >
<title>`llvm::upward_defs_iterator::fillInCurrentPair() (1 samples, 0.05%)</title><rect x="568.8" y="405" width="0.6" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="571.78" y="415.5" ></text>
</g>
<g >
<title>`compiler-conditions.lsp-compiler-conditions125^205^TOP-COMPILE- (1,852 samples, 100.00%)</title><rect x="10.0" y="1205" width="1180.0" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="13.00" y="1215.5" >`compiler-conditions.lsp-compiler-conditions125^205^TOP-COMPILE-</text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="436.3" y="453" width="0.6" height="15.0" fill="rgb(180,180,52)" rx="2" ry="2" />
<text  x="439.25" y="463.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::createAddRecFromPHI(llvm::PHINode*) (1 samples, 0.05%)</title><rect x="131.7" y="501" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="134.70" y="511.5" ></text>
</g>
<g >
<title>`llvm::LazyValueInfo::getConstantOnEdge(llvm::Value*, llvm::Basi (1 samples, 0.05%)</title><rect x="406.3" y="437" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="409.31" y="447.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::recordAvailableAnalysis(llvm::Pass*) (1 samples, 0.05%)</title><rect x="342.0" y="645" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="344.95" y="655.5" ></text>
</g>
<g >
<title>`DO-COMPILER-TIMER^COMPILER^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="1093" width="1180.0" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="13.00" y="1103.5" >`DO-COMPILER-TIMER^COMPILER^FN^^</text>
</g>
<g >
<title>`llvm::Instruction::isIdenticalTo(llvm::Instruction const*) cons (1 samples, 0.05%)</title><rect x="349.6" y="565" width="0.6" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="352.60" y="575.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::createCmpExpr(unsigned int, llvm::CmpIns (1 samples, 0.05%)</title><rect x="213.3" y="533" width="0.6" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="216.25" y="543.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1123.7" y="405" width="0.7" height="15.0" fill="rgb(70,219,70)" rx="2" ry="2" />
<text  x="1126.74" y="415.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, unsigned i (2 samples, 0.11%)</title><rect x="586.6" y="453" width="1.3" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="589.62" y="463.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SCCPSolver::markEdgeExecutable(llvm::Bas (2 samples, 0.11%)</title><rect x="364.9" y="629" width="1.3" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="367.89" y="639.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1135.8" y="405" width="0.7" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="1138.84" y="415.5" ></text>
</g>
<g >
<title>`llvm::sroa::AllocaSliceRewriter::visitLoadInst(llvm::LoadInst&amp;) (2 samples, 0.11%)</title><rect x="706.4" y="453" width="1.3" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="709.40" y="463.5" ></text>
</g>
<g >
<title>`llvm::AAResults::Model&lt;llvm::BasicAAResult&gt;::getModRefBehavior( (1 samples, 0.05%)</title><rect x="169.3" y="533" width="0.6" height="15.0" fill="rgb(60,210,60)" rx="2" ry="2" />
<text  x="172.29" y="543.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (12 samples, 0.65%)</title><rect x="1107.2" y="469" width="7.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="1110.17" y="479.5" ></text>
</g>
<g >
<title>`llvm::FoldBranchToCommonDest(llvm::BranchInst*, unsigned int) (2 samples, 0.11%)</title><rect x="235.6" y="565" width="1.2" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="238.55" y="575.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (6 samples, 0.32%)</title><rect x="1134.6" y="469" width="3.8" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="1137.57" y="479.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;llvm::Function const*,  (1 samples, 0.05%)</title><rect x="352.8" y="597" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="355.79" y="607.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitICmpInst(llvm::ICmpInst&amp;) (28 samples, 1.51%)</title><rect x="87.7" y="597" width="17.9" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="90.73" y="607.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="582.2" y="501" width="0.6" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="585.16" y="511.5" ></text>
</g>
<g >
<title>`llvm::Instruction::mayWriteToMemory() const (1 samples, 0.05%)</title><rect x="529.9" y="469" width="0.7" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="532.91" y="479.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (2 samples, 0.11%)</title><rect x="556.7" y="341" width="1.2" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="559.67" y="351.5" ></text>
</g>
<g >
<title>`stripAndComputeConstantOffsets(llvm::DataLayout const&amp;, llvm::V (1 samples, 0.05%)</title><rect x="405.7" y="437" width="0.6" height="15.0" fill="rgb(77,224,77)" rx="2" ry="2" />
<text  x="408.67" y="447.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::removeDeadPasses(llvm::Pass*, llvm::String (8 samples, 0.43%)</title><rect x="154.6" y="645" width="5.1" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="157.63" y="655.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value const*, llvm (1 samples, 0.05%)</title><rect x="289.1" y="485" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="292.07" y="495.5" ></text>
</g>
<g >
<title>`void llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt; (1 samples, 0.05%)</title><rect x="159.7" y="613" width="0.7" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="162.73" y="623.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="647.8" y="197" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="650.79" y="207.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="442.6" y="389" width="0.7" height="15.0" fill="rgb(224,224,67)" rx="2" ry="2" />
<text  x="445.62" y="399.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::findAnalysisPass(void const*, bool) (1 samples, 0.05%)</title><rect x="426.7" y="517" width="0.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="429.70" y="527.5" ></text>
</g>
<g >
<title>`llvm::wouldInstructionBeTriviallyDead(llvm::Instruction*, llvm: (1 samples, 0.05%)</title><rect x="1154.3" y="501" width="0.7" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="1157.32" y="511.5" ></text>
</g>
<g >
<title>`llvm::Argument::hasStructRetAttr() const (1 samples, 0.05%)</title><rect x="384.0" y="373" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="387.01" y="383.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="582.2" y="485" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="585.16" y="495.5" ></text>
</g>
<g >
<title>`_platform_memchr$VARIANT$Base (1 samples, 0.05%)</title><rect x="550.9" y="437" width="0.7" height="15.0" fill="rgb(213,213,64)" rx="2" ry="2" />
<text  x="553.94" y="447.5" ></text>
</g>
<g >
<title>`SimplifyLShrInst(llvm::Value*, llvm::Value*, bool, llvm::Simpli (1 samples, 0.05%)</title><rect x="221.5" y="549" width="0.7" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="224.53" y="559.5" ></text>
</g>
<g >
<title>`ThreadCmpOverSelect(llvm::CmpInst::Predicate, llvm::Value*, llv (2 samples, 0.11%)</title><rect x="92.2" y="565" width="1.3" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="95.19" y="575.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1115.5" y="405" width="0.6" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="1118.45" y="415.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (1 samples, 0.05%)</title><rect x="39.9" y="501" width="0.7" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="42.95" y="511.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1123.7" y="325" width="0.7" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="1126.74" y="335.5" ></text>
</g>
<g >
<title>`llvm::Constant::isNullValue() const (1 samples, 0.05%)</title><rect x="542.0" y="469" width="0.7" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="545.02" y="479.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (1 samples, 0.05%)</title><rect x="142.5" y="581" width="0.7" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="145.53" y="591.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="136.8" y="549" width="0.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="139.79" y="559.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorImpl&lt;unsigned int&gt;::operator=(llvm::SmallVecto (1 samples, 0.05%)</title><rect x="588.5" y="421" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="591.53" y="431.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getTerminator() const (1 samples, 0.05%)</title><rect x="252.8" y="597" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="255.75" y="607.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::findAnalysisPass(void const*, bool) (1 samples, 0.05%)</title><rect x="426.7" y="485" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="429.70" y="495.5" ></text>
</g>
<g >
<title>`unsigned int llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorT (2 samples, 0.11%)</title><rect x="50.1" y="613" width="1.3" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="53.14" y="623.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm::Basi (3 samples, 0.16%)</title><rect x="663.1" y="405" width="1.9" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="666.08" y="415.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::DecomposeGEPExpression(llvm::Value const*, (1 samples, 0.05%)</title><rect x="173.1" y="421" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="176.11" y="431.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="108.8" y="469" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="111.76" y="479.5" ></text>
</g>
<g >
<title>`small_free_list_add_ptr (1 samples, 0.05%)</title><rect x="867.6" y="357" width="0.6" height="15.0" fill="rgb(214,214,64)" rx="2" ry="2" />
<text  x="870.60" y="367.5" ></text>
</g>
<g >
<title>`llvm::SSAUpdaterImpl&lt;llvm::SSAUpdater&gt;::GetValue(llvm::BasicBlo (1 samples, 0.05%)</title><rect x="737.0" y="437" width="0.6" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="739.99" y="447.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::findAnalysisPass(void const*, bool) (1 samples, 0.05%)</title><rect x="43.1" y="581" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="46.13" y="591.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="462.4" y="405" width="0.6" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="465.38" y="415.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="394.2" y="421" width="0.6" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="397.20" y="431.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (2 samples, 0.11%)</title><rect x="297.4" y="437" width="1.2" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="300.35" y="447.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="463.0" y="437" width="0.7" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="466.01" y="447.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::run() (150 samples, 8.10%)</title><rect x="456.0" y="517" width="95.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="459.00" y="527.5" >`llvm::Inst..</text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="565.6" y="517" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="568.59" y="527.5" ></text>
</g>
<g >
<title>`tiny_free_list_remove_ptr (1 samples, 0.05%)</title><rect x="701.3" y="453" width="0.6" height="15.0" fill="rgb(177,177,50)" rx="2" ry="2" />
<text  x="704.31" y="463.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObjects(llvm::Value*, llvm::SmallVectorImpl&lt; (9 samples, 0.49%)</title><rect x="1107.2" y="453" width="5.7" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="1110.17" y="463.5" ></text>
</g>
<g >
<title>`llvm::SmallVector&lt;llvm::Value const*, 4u&gt;::SmallVector&lt;llvm::Us (1 samples, 0.05%)</title><rect x="560.5" y="469" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="563.50" y="479.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (5 samples, 0.27%)</title><rect x="1134.6" y="437" width="3.2" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="1137.57" y="447.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm (1 samples, 0.05%)</title><rect x="134.9" y="453" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="137.88" y="463.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::computeForAddSub(bool, bool, llvm::KnownBits c (1 samples, 0.05%)</title><rect x="544.6" y="325" width="0.6" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="547.57" y="335.5" ></text>
</g>
<g >
<title>`llvm::GVN::processLoad(llvm::LoadInst*) (4 samples, 0.22%)</title><rect x="172.5" y="565" width="2.5" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="175.47" y="575.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::eraseInstFromFunction(llvm::Instruction&amp;) (1 samples, 0.05%)</title><rect x="278.2" y="597" width="0.7" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="281.24" y="607.5" ></text>
</g>
<g >
<title>`small_malloc_should_clear (2 samples, 0.11%)</title><rect x="668.8" y="309" width="1.3" height="15.0" fill="rgb(181,181,52)" rx="2" ry="2" />
<text  x="671.81" y="319.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="412.7" y="405" width="0.6" height="15.0" fill="rgb(184,184,53)" rx="2" ry="2" />
<text  x="415.68" y="415.5" ></text>
</g>
<g >
<title>`llvm::Value::getPointerAlignment(llvm::DataLayout const&amp;) const (1 samples, 0.05%)</title><rect x="384.0" y="389" width="0.6" height="15.0" fill="rgb(95,242,95)" rx="2" ry="2" />
<text  x="387.01" y="399.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::addUnknown(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="334.9" y="581" width="0.7" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="337.95" y="591.5" ></text>
</g>
<g >
<title>`llvm::GlobalValue::isDeclaration() const (1 samples, 0.05%)</title><rect x="230.5" y="613" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="233.45" y="623.5" ></text>
</g>
<g >
<title>`llvm::TrackingMDRef::operator=(llvm::TrackingMDRef&amp;&amp;) (1 samples, 0.05%)</title><rect x="120.9" y="597" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="123.86" y="607.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (1 samples, 0.05%)</title><rect x="734.4" y="485" width="0.7" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="737.44" y="495.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::createSCEV(llvm::Value*) (2 samples, 0.11%)</title><rect x="131.1" y="565" width="1.2" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="134.06" y="575.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std:: (1 samples, 0.05%)</title><rect x="47.0" y="565" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="49.95" y="575.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (2 samples, 0.11%)</title><rect x="442.6" y="453" width="1.3" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="445.62" y="463.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SimplifyCFGOpt::run(llvm::BasicBlock*) (1 samples, 0.05%)</title><rect x="717.2" y="453" width="0.7" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="720.24" y="463.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ReassociateLegacyPass::runOnFunction(llv (2 samples, 0.11%)</title><rect x="428.0" y="549" width="1.2" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="430.97" y="559.5" ></text>
</g>
<g >
<title>`void std::__1::__insertion_sort_3&lt;std::__1::__less&lt;llvm::NonLoc (1 samples, 0.05%)</title><rect x="607.6" y="389" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="610.65" y="399.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::BasicBlock const*&gt;::find(llvm::Basi (1 samples, 0.05%)</title><rect x="348.3" y="597" width="0.7" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="351.33" y="607.5" ></text>
</g>
<g >
<title>`llvm::IsConstantOffsetFromGlobal(llvm::Constant*, llvm::GlobalV (2 samples, 0.11%)</title><rect x="690.5" y="405" width="1.2" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="693.48" y="415.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="252.1" y="613" width="0.7" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="255.12" y="623.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (2 samples, 0.11%)</title><rect x="522.3" y="309" width="1.2" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="525.27" y="319.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (23 samples, 1.24%)</title><rect x="614.7" y="325" width="14.6" height="15.0" fill="rgb(75,222,75)" rx="2" ry="2" />
<text  x="617.65" y="335.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="120.2" y="437" width="0.7" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="123.23" y="447.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (7 samples, 0.38%)</title><rect x="93.5" y="565" width="4.4" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="96.47" y="575.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::u (1 samples, 0.05%)</title><rect x="90.9" y="373" width="0.7" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="93.92" y="383.5" ></text>
</g>
<g >
<title>`llvm::CmpInst::makeCmpResultType(llvm::Type*) (1 samples, 0.05%)</title><rect x="91.6" y="549" width="0.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="94.56" y="559.5" ></text>
</g>
<g >
<title>`llvm::Value::setName(llvm::Twine const&amp;) (2 samples, 0.11%)</title><rect x="706.4" y="405" width="1.3" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="709.40" y="415.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObjects(llvm::Value*, llvm::SmallVectorImpl&lt; (1 samples, 0.05%)</title><rect x="247.0" y="565" width="0.7" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="250.02" y="575.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::BasicBlock*&gt;::insert(llvm::BasicBlo (1 samples, 0.05%)</title><rect x="386.6" y="501" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="389.56" y="511.5" ></text>
</g>
<g >
<title>`llvm::iplist_impl&lt;llvm::simple_ilist&lt;llvm::BasicBlock&gt;, llvm::S (5 samples, 0.27%)</title><rect x="1176.0" y="709" width="3.2" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="1178.98" y="719.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="640.1" y="325" width="0.7" height="15.0" fill="rgb(176,176,50)" rx="2" ry="2" />
<text  x="643.14" y="335.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;unsigned long long, llv (1 samples, 0.05%)</title><rect x="1189.4" y="597" width="0.6" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="1192.36" y="607.5" ></text>
</g>
<g >
<title>`tiny_free_no_lock (1 samples, 0.05%)</title><rect x="1165.8" y="469" width="0.6" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="1168.79" y="479.5" ></text>
</g>
<g >
<title>`llvm::GetElementPtrConstantExpr::getSourceElementType() const (1 samples, 0.05%)</title><rect x="320.3" y="485" width="0.6" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="323.29" y="495.5" ></text>
</g>
<g >
<title>`llvm::APInt::zextOrTrunc(unsigned int) const (1 samples, 0.05%)</title><rect x="549.0" y="421" width="0.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="552.03" y="431.5" ></text>
</g>
<g >
<title>`llvm::ConstantExprKeyType::getHash() const (1 samples, 0.05%)</title><rect x="273.8" y="517" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="276.78" y="527.5" ></text>
</g>
<g >
<title>`wrapped_llvm_sys__writeBitcodeToFile_Module_spcore__String_spbo (16 samples, 0.86%)</title><rect x="1179.8" y="789" width="10.2" height="15.0" fill="rgb(224,224,68)" rx="2" ry="2" />
<text  x="1182.81" y="799.5" ></text>
</g>
<g >
<title>`free_small (2 samples, 0.11%)</title><rect x="418.4" y="389" width="1.3" height="15.0" fill="rgb(188,188,55)" rx="2" ry="2" />
<text  x="421.41" y="399.5" ></text>
</g>
<g >
<title>`llvm::Value::stripPointerCastsAndBarriers() const (1 samples, 0.05%)</title><rect x="195.4" y="405" width="0.6" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="198.41" y="415.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="652.9" y="261" width="0.6" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="655.88" y="271.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (1 samples, 0.05%)</title><rect x="1116.7" y="469" width="0.7" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="1119.73" y="479.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (1 samples, 0.05%)</title><rect x="295.4" y="549" width="0.7" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="298.44" y="559.5" ></text>
</g>
<g >
<title>`llvm::formDedicatedExitBlocks(llvm::Loop*, llvm::DominatorTree* (1 samples, 0.05%)</title><rect x="252.8" y="613" width="0.6" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="255.75" y="623.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="405.0" y="421" width="0.7" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="408.03" y="431.5" ></text>
</g>
<g >
<title>`llvm::isFreeCall(llvm::Value const*, llvm::TargetLibraryInfo co (1 samples, 0.05%)</title><rect x="554.8" y="501" width="0.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="557.76" y="511.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="18.3" y="517" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="21.28" y="527.5" ></text>
</g>
<g >
<title>`llvm::hashing::detail::hash_short(char const*, unsigned long, u (1 samples, 0.05%)</title><rect x="748.5" y="357" width="0.6" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="751.46" y="367.5" ></text>
</g>
<g >
<title>`llvm::APInt::operator-=(llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="271.2" y="533" width="0.7" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="274.23" y="543.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="177.6" y="437" width="0.6" height="15.0" fill="rgb(221,221,67)" rx="2" ry="2" />
<text  x="180.57" y="447.5" ></text>
</g>
<g >
<title>`SimplifyWithOpReplaced(llvm::Value*, llvm::Value*, llvm::Value* (1 samples, 0.05%)</title><rect x="615.3" y="245" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="618.29" y="255.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (20 samples, 1.08%)</title><rect x="756.7" y="501" width="12.8" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="759.74" y="511.5" ></text>
</g>
<g >
<title>`llvm::isFreeCall(llvm::Value const*, llvm::TargetLibraryInfo co (1 samples, 0.05%)</title><rect x="550.9" y="485" width="0.7" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="553.94" y="495.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="368.7" y="533" width="0.7" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="371.71" y="543.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1123.7" y="357" width="0.7" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="1126.74" y="367.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="467.5" y="373" width="0.6" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="470.47" y="383.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;void const*, llvm::Pass* (1 samples, 0.05%)</title><rect x="1162.6" y="517" width="0.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="1165.60" y="527.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="467.5" y="325" width="0.6" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="470.47" y="335.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SimplifyCFGOpt::SimplifyCondBranch(llvm: (6 samples, 0.32%)</title><rect x="233.0" y="581" width="3.8" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="236.00" y="591.5" ></text>
</g>
<g >
<title>`getFoldedCast(llvm::Instruction::CastOps, llvm::Constant*, llvm (1 samples, 0.05%)</title><rect x="273.8" y="565" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="276.78" y="575.5" ></text>
</g>
<g >
<title>`llvm::MemorySSA::buildMemorySSA() (9 samples, 0.49%)</title><rect x="148.3" y="613" width="5.7" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="151.26" y="623.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, unsi (1 samples, 0.05%)</title><rect x="1125.6" y="373" width="0.7" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="1128.65" y="383.5" ></text>
</g>
<g >
<title>`core::Lisp_O::run() (1,852 samples, 100.00%)</title><rect x="10.0" y="2181" width="1180.0" height="15.0" fill="rgb(94,241,94)" rx="2" ry="2" />
<text  x="13.00" y="2191.5" >`core::Lisp_O::run()</text>
</g>
<g >
<title>`llvm::ConstantRange::isEmptySet() const (1 samples, 0.05%)</title><rect x="717.2" y="405" width="0.7" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="720.24" y="415.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::MapInfo::getHashVa (2 samples, 0.11%)</title><rect x="687.3" y="357" width="1.3" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="690.29" y="367.5" ></text>
</g>
<g >
<title>`SimplifyAssociativeBinOp(llvm::Instruction::BinaryOps, llvm::Va (1 samples, 0.05%)</title><rect x="322.8" y="565" width="0.7" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="325.84" y="575.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std:: (1 samples, 0.05%)</title><rect x="215.8" y="501" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="218.80" y="511.5" ></text>
</g>
<g >
<title>`llvm::FindFunctionBackedges(llvm::Function const&amp;, llvm::SmallV (2 samples, 0.11%)</title><rect x="31.0" y="597" width="1.3" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="34.03" y="607.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldAndOfICmps(llvm::ICmpInst*, llvm::ICmpI (1 samples, 0.05%)</title><rect x="285.2" y="581" width="0.7" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="288.25" y="591.5" ></text>
</g>
<g >
<title>`llvm::iplist_impl&lt;llvm::simple_ilist&lt;llvm::MemoryAccess, llvm:: (1 samples, 0.05%)</title><rect x="579.6" y="453" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="582.61" y="463.5" ></text>
</g>
<g >
<title>`free_tiny (1 samples, 0.05%)</title><rect x="1109.1" y="325" width="0.6" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="1112.08" y="335.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (4 samples, 0.22%)</title><rect x="202.4" y="437" width="2.6" height="15.0" fill="rgb(99,244,99)" rx="2" ry="2" />
<text  x="205.42" y="447.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::run() (103 samples, 5.56%)</title><rect x="62.2" y="613" width="65.7" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="65.25" y="623.5" >`llvm::..</text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="975.3" y="437" width="0.6" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="978.28" y="447.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="138.1" y="533" width="0.6" height="15.0" fill="rgb(58,208,58)" rx="2" ry="2" />
<text  x="141.07" y="543.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getTerminator() const (1 samples, 0.05%)</title><rect x="401.8" y="517" width="0.7" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="404.85" y="527.5" ></text>
</g>
<g >
<title>`compiler-conditions.lsp-compiler-conditions125^193^TOP-COMPILE- (1,852 samples, 100.00%)</title><rect x="10.0" y="933" width="1180.0" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="13.00" y="943.5" >`compiler-conditions.lsp-compiler-conditions125^193^TOP-COMPILE-</text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (1 samples, 0.05%)</title><rect x="619.1" y="181" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="622.11" y="191.5" ></text>
</g>
<g >
<title>`llvm::MemoryPhi::MemoryPhi(llvm::LLVMContext&amp;, llvm::BasicBlock (1 samples, 0.05%)</title><rect x="572.6" y="469" width="0.6" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="575.60" y="479.5" ></text>
</g>
<g >
<title>`llvm::LazyValueInfo::eraseBlock(llvm::BasicBlock*) (2 samples, 0.11%)</title><rect x="421.0" y="517" width="1.2" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="423.96" y="527.5" ></text>
</g>
<g >
<title>`isObjectSmallerThan(llvm::Value const*, unsigned long long, llv (6 samples, 0.32%)</title><rect x="185.9" y="405" width="3.8" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="188.85" y="415.5" ></text>
</g>
<g >
<title>`free (1 samples, 0.05%)</title><rect x="34.2" y="421" width="0.6" height="15.0" fill="rgb(188,188,54)" rx="2" ry="2" />
<text  x="37.21" y="431.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::PruneEH::runOnSCC(llvm::CallGraphSCC&amp;) (1 samples, 0.05%)</title><rect x="10.6" y="661" width="0.7" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="13.64" y="671.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="1168.3" y="485" width="0.7" height="15.0" fill="rgb(217,217,65)" rx="2" ry="2" />
<text  x="1171.34" y="495.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="357.9" y="549" width="0.6" height="15.0" fill="rgb(217,217,65)" rx="2" ry="2" />
<text  x="360.88" y="559.5" ></text>
</g>
<g >
<title>`_platform_bzero$VARIANT$Ivybridge (1 samples, 0.05%)</title><rect x="249.6" y="533" width="0.6" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="252.57" y="543.5" ></text>
</g>
<g >
<title>`llvm::isSafeToSpeculativelyExecute(llvm::Value const*, llvm::In (1 samples, 0.05%)</title><rect x="605.1" y="405" width="0.6" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="608.10" y="415.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasSelect(llvm::SelectInst const*, unsig (1 samples, 0.05%)</title><rect x="625.5" y="245" width="0.6" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="628.49" y="255.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ModuleBitcodeWriter::write() (10 samples, 0.54%)</title><rect x="1179.8" y="725" width="6.4" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="1182.81" y="735.5" ></text>
</g>
<g >
<title>`set_tiny_meta_header_in_use (1 samples, 0.05%)</title><rect x="680.3" y="309" width="0.6" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="683.28" y="319.5" ></text>
</g>
<g >
<title>`llvm::MetadataTracking::retrack(void*, llvm::Metadata&amp;, void*) (1 samples, 0.05%)</title><rect x="771.4" y="485" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="774.39" y="495.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (9 samples, 0.49%)</title><rect x="1107.2" y="421" width="5.7" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="1110.17" y="431.5" ></text>
</g>
<g >
<title>`llvm::removeUnreachableBlocks(llvm::Function&amp;, llvm::LazyValueI (2 samples, 0.11%)</title><rect x="726.8" y="549" width="1.3" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="729.79" y="559.5" ></text>
</g>
<g >
<title>`malloc (2 samples, 0.11%)</title><rect x="47.6" y="581" width="1.3" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="50.59" y="591.5" ></text>
</g>
<g >
<title>`llvm::BlockFrequencyInfoImplBase::addToDist(llvm::BlockFrequenc (1 samples, 0.05%)</title><rect x="254.0" y="549" width="0.7" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="257.03" y="559.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::createNodeFromSelectLikePHI(llvm::PHINod (1 samples, 0.05%)</title><rect x="131.1" y="405" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="134.06" y="415.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::AnalyzeCallGraph(llvm::CallGraph&amp;, llvm: (1 samples, 0.05%)</title><rect x="1174.7" y="549" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="1177.71" y="559.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1123.7" y="341" width="0.7" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="1126.74" y="351.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="391.0" y="453" width="0.7" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="394.02" y="463.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="49.5" y="501" width="0.6" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="52.50" y="511.5" ></text>
</g>
<g >
<title>`GetCaseResults(llvm::SwitchInst*, llvm::ConstantInt*, llvm::Bas (1 samples, 0.05%)</title><rect x="717.9" y="469" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="720.87" y="479.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SimplifyCFGOpt::FoldValueComparisonIntoP (1 samples, 0.05%)</title><rect x="714.7" y="469" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="717.69" y="479.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm:: (5 samples, 0.27%)</title><rect x="1128.8" y="453" width="3.2" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="1131.83" y="463.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::Valu (1 samples, 0.05%)</title><rect x="231.7" y="581" width="0.7" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="234.73" y="591.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (8 samples, 0.43%)</title><rect x="303.7" y="533" width="5.1" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="306.73" y="543.5" ></text>
</g>
<g >
<title>`bool llvm::CallInst::hasFnAttrImpl&lt;llvm::Attribute::AttrKind&gt;(l (1 samples, 0.05%)</title><rect x="657.3" y="213" width="0.7" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="660.34" y="223.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (3 samples, 0.16%)</title><rect x="691.7" y="421" width="2.0" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="694.75" y="431.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::pointsToConstantMemory(llvm::MemoryLocatio (1 samples, 0.05%)</title><rect x="657.3" y="309" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="660.34" y="319.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1157" width="1180.0" height="15.0" fill="rgb(82,194,194)" rx="2" ry="2" />
<text  x="13.00" y="1167.5" >`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, unsig (1 samples, 0.05%)</title><rect x="205.6" y="501" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="208.60" y="511.5" ></text>
</g>
<g >
<title>`llvm::Use::initTags(llvm::Use*, llvm::Use*) (1 samples, 0.05%)</title><rect x="1092.5" y="453" width="0.7" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="1095.52" y="463.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (3 samples, 0.16%)</title><rect x="633.1" y="309" width="1.9" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="636.13" y="319.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm:: (3 samples, 0.16%)</title><rect x="656.1" y="341" width="1.9" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="659.07" y="351.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="462.4" y="437" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="465.38" y="447.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;llvm::Value const*, true&gt;::push_b (1 samples, 0.05%)</title><rect x="138.7" y="533" width="0.6" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="141.70" y="543.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatt (1 samples, 0.05%)</title><rect x="35.5" y="453" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="38.49" y="463.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^33^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1061" width="1180.0" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="13.00" y="1071.5" >`compile-file.lsp-compile-file52^33^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="765.0" y="357" width="0.7" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="768.02" y="367.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::BasicBlock*, unsigned int&gt;* ll (1 samples, 0.05%)</title><rect x="177.6" y="501" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="180.57" y="511.5" ></text>
</g>
<g >
<title>`llvm::formLCSSAForInstructions(llvm::SmallVectorImpl&lt;llvm::Inst (3 samples, 0.16%)</title><rect x="735.7" y="501" width="1.9" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="738.71" y="511.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (6 samples, 0.32%)</title><rect x="593.6" y="389" width="3.9" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="596.63" y="399.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;llvm::Value*, true&gt;::push_back(ll (1 samples, 0.05%)</title><rect x="507.0" y="437" width="0.6" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="509.98" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solve() (8 samples, 0.43%)</title><rect x="415.9" y="453" width="5.1" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="418.86" y="463.5" ></text>
</g>
<g >
<title>`llvm::LoopAccessInfo::canAnalyzeLoop() (1 samples, 0.05%)</title><rect x="250.8" y="549" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="253.84" y="559.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="568.1" y="405" width="0.7" height="15.0" fill="rgb(100,245,100)" rx="2" ry="2" />
<text  x="571.14" y="415.5" ></text>
</g>
<g >
<title>`llvm::Value* SimplifyCall&lt;llvm::Use*&gt;(llvm::ImmutableCallSite,  (1 samples, 0.05%)</title><rect x="617.8" y="165" width="0.7" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="620.84" y="175.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::BasicBlock*, llvm::Value*, llvm::DenseMapI (2 samples, 0.11%)</title><rect x="208.8" y="485" width="1.3" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="211.79" y="495.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Type*, llvm::Point (1 samples, 0.05%)</title><rect x="298.0" y="389" width="0.6" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="300.99" y="399.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="224.1" y="517" width="0.6" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="227.08" y="527.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::SCEV const*, llvm::Smal (1 samples, 0.05%)</title><rect x="580.2" y="469" width="0.7" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="583.25" y="479.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="17.6" y="405" width="0.7" height="15.0" fill="rgb(224,224,67)" rx="2" ry="2" />
<text  x="20.65" y="415.5" ></text>
</g>
<g >
<title>`free (2 samples, 0.11%)</title><rect x="782.9" y="485" width="1.2" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="785.86" y="495.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (12 samples, 0.65%)</title><rect x="433.1" y="533" width="7.6" height="15.0" fill="rgb(106,252,106)" rx="2" ry="2" />
<text  x="436.07" y="543.5" ></text>
</g>
<g >
<title>`llvm::SimplifySelectInst(llvm::Value*, llvm::Value*, llvm::Valu (1 samples, 0.05%)</title><rect x="624.2" y="197" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="627.21" y="207.5" ></text>
</g>
<g >
<title>`std::__1::__split_buffer&lt;llvm::Constant*, std::__1::allocator&lt;l (1 samples, 0.05%)</title><rect x="685.4" y="341" width="0.6" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="688.38" y="351.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::findAlignmentLowerBound(llvm::AlignTypeEnum,  (1 samples, 0.05%)</title><rect x="189.7" y="357" width="0.6" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="192.68" y="367.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv_ov(llvm::APInt const&amp;, bool&amp;) const (1 samples, 0.05%)</title><rect x="264.9" y="565" width="0.6" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="267.86" y="575.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::BasicBlock*, llvm::DomTreeBuilder::SemiNCA (1 samples, 0.05%)</title><rect x="176.9" y="453" width="0.7" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="179.93" y="463.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::Instruction*, llvm::SmallPtrSe (1 samples, 0.05%)</title><rect x="183.3" y="485" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="186.30" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoCache::hasCachedValueInfo(l (3 samples, 0.16%)</title><rect x="380.2" y="421" width="1.9" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="383.18" y="431.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="443.9" y="421" width="0.6" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="446.90" y="431.5" ></text>
</g>
<g >
<title>`computeKnownBitsAddSub(bool, llvm::Value const*, llvm::Value co (1 samples, 0.05%)</title><rect x="1123.7" y="389" width="0.7" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="1126.74" y="399.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (1 samples, 0.05%)</title><rect x="333.7" y="453" width="0.6" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="336.67" y="463.5" ></text>
</g>
<g >
<title>`canPeel(llvm::Loop*) (1 samples, 0.05%)</title><rect x="561.8" y="485" width="0.6" height="15.0" fill="rgb(89,235,89)" rx="2" ry="2" />
<text  x="564.77" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp_big(void const*) (1 samples, 0.05%)</title><rect x="712.8" y="469" width="0.6" height="15.0" fill="rgb(69,218,69)" rx="2" ry="2" />
<text  x="715.78" y="479.5" ></text>
</g>
<g >
<title>`std::__1::__split_buffer&lt;llvm::Constant*, std::__1::allocator&lt;l (1 samples, 0.05%)</title><rect x="442.6" y="405" width="0.7" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="445.62" y="415.5" ></text>
</g>
<g >
<title>`llvm::FindAvailablePtrLoadStore(llvm::Value*, llvm::Type*, bool (9 samples, 0.49%)</title><rect x="1128.2" y="469" width="5.7" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="1131.20" y="479.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::GVN::Expression, unsign (1 samples, 0.05%)</title><rect x="589.2" y="373" width="0.6" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="592.17" y="383.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="176.9" y="469" width="0.7" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="179.93" y="479.5" ></text>
</g>
<g >
<title>`llvm::InstructionCombiningPass::runOnFunction(llvm::Function&amp;) (646 samples, 34.88%)</title><rect x="747.2" y="549" width="411.6" height="15.0" fill="rgb(100,245,100)" rx="2" ry="2" />
<text  x="750.18" y="559.5" >`llvm::InstructionCombiningPass::runOnFunction(llvm::Fun..</text>
</g>
<g >
<title>`llvm::ScalarEvolution::computeExitLimitFromICmp(llvm::Loop cons (1 samples, 0.05%)</title><rect x="250.8" y="405" width="0.7" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="253.84" y="415.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BranchProbabilityI (1 samples, 0.05%)</title><rect x="256.6" y="565" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="259.58" y="575.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedBits(llvm::Instruction*, un (1 samples, 0.05%)</title><rect x="81.4" y="549" width="0.6" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="84.36" y="559.5" ></text>
</g>
<g >
<title>`llvm::getOrEnforceKnownAlignment(llvm::Value*, unsigned int, ll (1 samples, 0.05%)</title><rect x="543.9" y="485" width="0.7" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="546.93" y="495.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::not_match&lt;llvm::PatternMatch::specific (1 samples, 0.05%)</title><rect x="322.8" y="533" width="0.7" height="15.0" fill="rgb(69,218,69)" rx="2" ry="2" />
<text  x="325.84" y="543.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (1 samples, 0.05%)</title><rect x="647.8" y="165" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="650.79" y="175.5" ></text>
</g>
<g >
<title>`char* llvm::hashing::detail::hash_combine_recursive_helper::com (1 samples, 0.05%)</title><rect x="166.1" y="485" width="0.6" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="169.10" y="495.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="225.4" y="437" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="228.36" y="447.5" ></text>
</g>
<g >
<title>`llvm::GVN::performScalarPRE(llvm::Instruction*) (4 samples, 0.22%)</title><rect x="227.3" y="597" width="2.5" height="15.0" fill="rgb(106,252,106)" rx="2" ry="2" />
<text  x="230.27" y="607.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::getOrCreate(llvm:: (1 samples, 0.05%)</title><rect x="297.4" y="421" width="0.6" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="300.35" y="431.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getIndexedOffsetInType(llvm::Type*, llvm::Arr (1 samples, 0.05%)</title><rect x="299.3" y="453" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="302.27" y="463.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="261.7" y="581" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="264.67" y="591.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (4 samples, 0.22%)</title><rect x="202.4" y="405" width="2.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="205.42" y="415.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::Constant*, llvm::Co (1 samples, 0.05%)</title><rect x="471.9" y="469" width="0.7" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="474.93" y="479.5" ></text>
</g>
<g >
<title>`llvm::AssumptionCache::assumptionsFor(llvm::Value const*) (1 samples, 0.05%)</title><rect x="533.7" y="405" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="536.74" y="415.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::Grow(unsigned int) (1 samples, 0.05%)</title><rect x="247.0" y="501" width="0.7" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="250.02" y="511.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (2 samples, 0.11%)</title><rect x="522.3" y="453" width="1.2" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="525.27" y="463.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="744.6" y="405" width="0.7" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="747.63" y="415.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getPointerSize(unsigned int) const (1 samples, 0.05%)</title><rect x="73.1" y="517" width="0.6" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="76.08" y="527.5" ></text>
</g>
<g >
<title>`llvm::BranchProbabilityInfoWrapperPass::runOnFunction(llvm::Fun (7 samples, 0.38%)</title><rect x="741.4" y="549" width="4.5" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="744.45" y="559.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::u (1 samples, 0.05%)</title><rect x="72.4" y="501" width="0.7" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="75.44" y="511.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::add(llvm::LoadInst*) (2 samples, 0.11%)</title><rect x="333.7" y="581" width="1.2" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="336.67" y="591.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldICmpAndConstant(llvm::ICmpInst&amp;, llvm:: (1 samples, 0.05%)</title><rect x="515.3" y="469" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="518.26" y="479.5" ></text>
</g>
<g >
<title>`llvm::CallSiteBase&lt;llvm::Function, llvm::BasicBlock, llvm::Valu (1 samples, 0.05%)</title><rect x="373.2" y="501" width="0.6" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="376.17" y="511.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="412.7" y="357" width="0.6" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="415.68" y="367.5" ></text>
</g>
<g >
<title>`llvm::ScopedNoAliasAAWrapperPass* llvm::Pass::getAnalysisIfAvai (1 samples, 0.05%)</title><rect x="431.2" y="533" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="434.16" y="543.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::commonShiftTransforms(llvm::BinaryOperator&amp; (1 samples, 0.05%)</title><rect x="1124.4" y="485" width="0.6" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="1127.37" y="495.5" ></text>
</g>
<g >
<title>`llvm::Value::stripPointerCastsAndBarriers() const (1 samples, 0.05%)</title><rect x="174.4" y="405" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="177.38" y="415.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::KnownBits(unsigned int) (1 samples, 0.05%)</title><rect x="489.8" y="437" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="492.77" y="447.5" ></text>
</g>
<g >
<title>`llvm::DemandedBits::isInstructionDead(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="40.6" y="629" width="0.6" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="43.58" y="639.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="406.3" y="229" width="0.6" height="15.0" fill="rgb(194,194,57)" rx="2" ry="2" />
<text  x="409.31" y="239.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value const*&gt;::insert(llvm::Value c (1 samples, 0.05%)</title><rect x="626.8" y="261" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="629.76" y="271.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solveBlockValueImpl(l (6 samples, 0.32%)</title><rect x="417.1" y="437" width="3.9" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="420.14" y="447.5" ></text>
</g>
<g >
<title>`DominatesMergePoint(llvm::Value*, llvm::BasicBlock*, llvm::Smal (1 samples, 0.05%)</title><rect x="719.1" y="453" width="0.7" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="722.15" y="463.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^181^TOP-COMPILE-FILE (1,830 samples, 98.81%)</title><rect x="10.0" y="837" width="1166.0" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="13.00" y="847.5" >`compile-file.lsp-compile-file52^181^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="391.0" y="437" width="0.7" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="394.02" y="447.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObjects(llvm::Value*, llvm::SmallVectorImpl&lt; (6 samples, 0.32%)</title><rect x="93.5" y="549" width="3.8" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="96.47" y="559.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std::__1:: (1 samples, 0.05%)</title><rect x="677.1" y="405" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="680.10" y="415.5" ></text>
</g>
<g >
<title>`llvm::FoldBranchToCommonDest(llvm::BranchInst*, unsigned int) (1 samples, 0.05%)</title><rect x="349.0" y="565" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="351.96" y="575.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Metadata const*, l (1 samples, 0.05%)</title><rect x="1180.4" y="645" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="1183.44" y="655.5" ></text>
</g>
<g >
<title>`llvm::Twine::str() const (1 samples, 0.05%)</title><rect x="705.8" y="453" width="0.6" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="708.77" y="463.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedUseBits(llvm::Value*, llvm: (1 samples, 0.05%)</title><rect x="484.7" y="469" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="487.68" y="479.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="90.9" y="389" width="0.7" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="93.92" y="399.5" ></text>
</g>
<g >
<title>`llvm::APInt::udiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="647.1" y="37" width="0.7" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="650.15" y="47.5" ></text>
</g>
<g >
<title>`llvm::TargetLibraryInfoImpl::getLibFunc(llvm::StringRef, llvm:: (1 samples, 0.05%)</title><rect x="332.4" y="565" width="0.6" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="335.40" y="575.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::BasicBlock*&gt;::insert(llvm::BasicBlo (1 samples, 0.05%)</title><rect x="249.6" y="597" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="252.57" y="607.5" ></text>
</g>
<g >
<title>`llvm::GEPOperator::accumulateConstantOffset(llvm::DataLayout co (1 samples, 0.05%)</title><rect x="715.3" y="405" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="718.32" y="415.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="132.3" y="389" width="0.7" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="135.33" y="399.5" ></text>
</g>
<g >
<title>`isObjectSmallerThan(llvm::Value const*, unsigned long long, llv (1 samples, 0.05%)</title><rect x="615.9" y="277" width="0.7" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="618.93" y="287.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (1 samples, 0.05%)</title><rect x="134.2" y="389" width="0.7" height="15.0" fill="rgb(60,210,60)" rx="2" ry="2" />
<text  x="137.24" y="399.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::lookupOrAddCall(llvm::CallInst*) (2 samples, 0.11%)</title><rect x="590.4" y="453" width="1.3" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="593.44" y="463.5" ></text>
</g>
<g >
<title>`tryToReplaceWithConstant((anonymous namespace)::SCCPSolver&amp;, ll (2 samples, 0.11%)</title><rect x="231.1" y="629" width="1.3" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="234.09" y="639.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::computeExitLimit(llvm::Loop const*, llvm (1 samples, 0.05%)</title><rect x="555.4" y="453" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="558.40" y="463.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1124.4" y="341" width="0.6" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="1127.37" y="351.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitPHINode(llvm::PHINode&amp;) (1 samples, 0.05%)</title><rect x="115.8" y="597" width="0.6" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="118.77" y="607.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (1 samples, 0.05%)</title><rect x="28.5" y="565" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="31.48" y="575.5" ></text>
</g>
<g >
<title>`bool llvm::CallInst::hasFnAttrImpl&lt;llvm::Attribute::AttrKind&gt;(l (1 samples, 0.05%)</title><rect x="169.9" y="501" width="0.7" height="15.0" fill="rgb(65,213,65)" rx="2" ry="2" />
<text  x="172.92" y="511.5" ></text>
</g>
<g >
<title>`llvm::LoopBase&lt;llvm::BasicBlock, llvm::Loop&gt;::getExitingBlocks( (1 samples, 0.05%)</title><rect x="251.5" y="613" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="254.48" y="623.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::Valu (92 samples, 4.97%)</title><rect x="1004.0" y="421" width="58.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="1006.95" y="431.5" >`bool ..</text>
</g>
<g >
<title>`llvm::ScalarEvolution::getBackedgeTakenInfo(llvm::Loop const*) (1 samples, 0.05%)</title><rect x="250.8" y="501" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="253.84" y="511.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::CastGEPIndices(llvm::Type*, llvm::ArrayR (1 samples, 0.05%)</title><rect x="270.6" y="533" width="0.6" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="273.59" y="543.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (6 samples, 0.32%)</title><rect x="26.6" y="613" width="3.8" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="29.57" y="623.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (3 samples, 0.16%)</title><rect x="650.3" y="261" width="1.9" height="15.0" fill="rgb(101,246,101)" rx="2" ry="2" />
<text  x="653.33" y="271.5" ></text>
</g>
<g >
<title>`llvm::ConstantExprKeyType::getHash() const (1 samples, 0.05%)</title><rect x="34.8" y="373" width="0.7" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="37.85" y="383.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldConstant(llvm::Constant const*, llvm::DataLay (1 samples, 0.05%)</title><rect x="262.9" y="613" width="0.7" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="265.95" y="623.5" ></text>
</g>
<g >
<title>`llvm::TrackingMDRef::operator=(llvm::TrackingMDRef&amp;&amp;) (2 samples, 0.11%)</title><rect x="1146.0" y="501" width="1.3" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="1149.04" y="511.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldOpIntoPhi(llvm::Instruction&amp;, llvm::PHI (1 samples, 0.05%)</title><rect x="325.4" y="533" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="328.39" y="543.5" ></text>
</g>
<g >
<title>`llvm::Loop::isRecursivelyLCSSAForm(llvm::DominatorTree&amp;, llvm:: (3 samples, 0.16%)</title><rect x="336.9" y="629" width="1.9" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="339.86" y="639.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="634.4" y="277" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="637.41" y="287.5" ></text>
</g>
<g >
<title>`llvm::MemorySSA::OptimizeUses::optimizeUses() (5 samples, 0.27%)</title><rect x="148.3" y="597" width="3.1" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="151.26" y="607.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::zextOrTrunc(unsigned int) (1 samples, 0.05%)</title><rect x="777.8" y="421" width="0.6" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="780.76" y="431.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (1 samples, 0.05%)</title><rect x="732.5" y="485" width="0.7" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="735.53" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoCache::isOverdefined(llvm:: (1 samples, 0.05%)</title><rect x="387.2" y="405" width="0.6" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="390.19" y="415.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (1 samples, 0.05%)</title><rect x="392.9" y="469" width="0.7" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="395.93" y="479.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, (ano (1 samples, 0.05%)</title><rect x="371.3" y="485" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="374.26" y="495.5" ></text>
</g>
<g >
<title>`isObjectSmallerThan(llvm::Value const*, unsigned long long, llv (1 samples, 0.05%)</title><rect x="191.0" y="373" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="193.95" y="383.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (2 samples, 0.11%)</title><rect x="759.3" y="405" width="1.3" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="762.29" y="415.5" ></text>
</g>
<g >
<title>`llvm::getConstantDataArrayInfo(llvm::Value const*, llvm::Consta (2 samples, 0.11%)</title><rect x="733.2" y="453" width="1.2" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="736.16" y="463.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedBits(llvm::Instruction*, un (2 samples, 0.11%)</title><rect x="284.0" y="549" width="1.2" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="286.97" y="559.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (1 samples, 0.05%)</title><rect x="289.7" y="565" width="0.6" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="292.71" y="575.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;unsigned int, llvm::GVN::LeaderTable (1 samples, 0.05%)</title><rect x="171.2" y="533" width="0.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="174.20" y="543.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::ImmutableCallSite, llvm::M (3 samples, 0.16%)</title><rect x="107.5" y="517" width="1.9" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="110.48" y="527.5" ></text>
</g>
<g >
<title>`llvm::MemorySSA::OptimizeUses::optimizeUses() (8 samples, 0.43%)</title><rect x="566.2" y="501" width="5.1" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="569.23" y="511.5" ></text>
</g>
<g >
<title>`llvm::Value::getValueName() const (1 samples, 0.05%)</title><rect x="347.7" y="629" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="350.69" y="639.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LCSSAWrapperPass::runOnFunction(llvm::Fu (4 samples, 0.22%)</title><rect x="735.7" y="549" width="2.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="738.71" y="559.5" ></text>
</g>
<g >
<title>`llvm::GVN::propagateEquality(llvm::Value*, llvm::Value*, llvm:: (11 samples, 0.59%)</title><rect x="671.4" y="469" width="7.0" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="674.36" y="479.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="735.1" y="485" width="0.6" height="15.0" fill="rgb(217,217,65)" rx="2" ry="2" />
<text  x="738.08" y="495.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;void const*, llvm::PassI (1 samples, 0.05%)</title><rect x="240.6" y="597" width="0.7" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="243.65" y="607.5" ></text>
</g>
<g >
<title>`llvm::SSAUpdater::GetValueAtEndOfBlockInternal(llvm::BasicBlock (1 samples, 0.05%)</title><rect x="424.8" y="469" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="427.78" y="479.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::BasicBlock*, llvm::Value*&gt;* ll (1 samples, 0.05%)</title><rect x="422.9" y="485" width="0.6" height="15.0" fill="rgb(89,235,89)" rx="2" ry="2" />
<text  x="425.87" y="495.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (1 samples, 0.05%)</title><rect x="295.4" y="533" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="298.44" y="543.5" ></text>
</g>
<g >
<title>`DO-COMPILATION-UNIT^COMPILER^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="1285" width="1180.0" height="15.0" fill="rgb(105,216,216)" rx="2" ry="2" />
<text  x="13.00" y="1295.5" >`DO-COMPILATION-UNIT^COMPILER^FN^^</text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="767.6" y="405" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="770.57" y="415.5" ></text>
</g>
<g >
<title>`llvm::Intrinsic::getName(llvm::Intrinsic::ID) (1 samples, 0.05%)</title><rect x="36.8" y="565" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="39.76" y="575.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (2 samples, 0.11%)</title><rect x="247.0" y="581" width="1.3" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="250.02" y="591.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::ImmutableCallSite, llvm::M (2 samples, 0.11%)</title><rect x="631.9" y="341" width="1.2" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="634.86" y="351.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;(anonymous namespace)::Simple (1 samples, 0.05%)</title><rect x="391.0" y="485" width="0.7" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="394.02" y="495.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (2 samples, 0.11%)</title><rect x="92.2" y="485" width="1.3" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="95.19" y="495.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, ll (1 samples, 0.05%)</title><rect x="1122.5" y="437" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="1125.46" y="447.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::add(llvm::BasicBlock&amp;) (5 samples, 0.27%)</title><rect x="133.0" y="597" width="3.2" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="135.97" y="607.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solveBlockValueImpl(l (2 samples, 0.11%)</title><rect x="17.6" y="565" width="1.3" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="20.65" y="575.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (4 samples, 0.22%)</title><rect x="684.1" y="421" width="2.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="687.10" y="431.5" ></text>
</g>
<g >
<title>`llvm::CallGraph::CallGraph(llvm::Module&amp;) (3 samples, 0.16%)</title><rect x="728.1" y="565" width="1.9" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="731.07" y="575.5" ></text>
</g>
<g >
<title>`llvm::APInt::clearUnusedBits() (1 samples, 0.05%)</title><rect x="452.8" y="421" width="0.7" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="455.82" y="431.5" ></text>
</g>
<g >
<title>`llvm::isPotentiallyReachable(llvm::BasicBlock const*, llvm::Bas (1 samples, 0.05%)</title><rect x="325.4" y="517" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="328.39" y="527.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::createSCEV(llvm::Value*) (1 samples, 0.05%)</title><rect x="250.8" y="341" width="0.7" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="253.84" y="351.5" ></text>
</g>
<g >
<title>`llvm::ValueEnumerator::setInstructionID(llvm::Instruction const (1 samples, 0.05%)</title><rect x="1183.0" y="693" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="1185.99" y="703.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::apint_match::match&lt;llvm::Value&gt;(llvm:: (1 samples, 0.05%)</title><rect x="521.0" y="469" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="523.99" y="479.5" ></text>
</g>
<g >
<title>`SpeculativelyExecuteBB(llvm::BranchInst*, llvm::BasicBlock*, ll (1 samples, 0.05%)</title><rect x="233.6" y="565" width="0.7" height="15.0" fill="rgb(77,224,77)" rx="2" ry="2" />
<text  x="236.64" y="575.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1301" width="1180.0" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="13.00" y="1311.5" >`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (2 samples, 0.11%)</title><rect x="559.2" y="453" width="1.3" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="562.22" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldCastInstruction(unsigned int, llvm::Constant* (1 samples, 0.05%)</title><rect x="262.9" y="565" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="265.95" y="575.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (1 samples, 0.05%)</title><rect x="173.7" y="405" width="0.7" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="176.75" y="415.5" ></text>
</g>
<g >
<title>`llvm::SimplifySelectInst(llvm::Value*, llvm::Value*, llvm::Valu (1 samples, 0.05%)</title><rect x="542.7" y="485" width="0.6" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="545.66" y="495.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (12 samples, 0.65%)</title><rect x="499.3" y="421" width="7.7" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="502.33" y="431.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm::SSAU (1 samples, 0.05%)</title><rect x="737.0" y="357" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="739.99" y="367.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1413" width="1180.0" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="13.00" y="1423.5" >`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (3 samples, 0.16%)</title><rect x="83.3" y="565" width="1.9" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="86.27" y="575.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitBranchInst(llvm::BranchInst&amp;) (1 samples, 0.05%)</title><rect x="82.0" y="597" width="0.6" height="15.0" fill="rgb(71,220,71)" rx="2" ry="2" />
<text  x="85.00" y="607.5" ></text>
</g>
<g >
<title>`llvm::Value* SimplifyCall&lt;llvm::Use*&gt;(llvm::ImmutableCallSite,  (1 samples, 0.05%)</title><rect x="656.7" y="245" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="659.71" y="255.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std::__1:: (2 samples, 0.11%)</title><rect x="155.9" y="597" width="1.3" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="158.91" y="607.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solve() (1 samples, 0.05%)</title><rect x="35.5" y="533" width="0.6" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="38.49" y="543.5" ></text>
</g>
<g >
<title>`llvm::PMTopLevelManager::findAnalysisPass(void const*) (1 samples, 0.05%)</title><rect x="43.1" y="597" width="0.7" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="46.13" y="607.5" ></text>
</g>
<g >
<title>`llvm::scc_iterator&lt;llvm::Function const*, llvm::GraphTraits&lt;llv (1 samples, 0.05%)</title><rect x="257.2" y="581" width="0.7" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="260.21" y="591.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;llvm::Constant*, true&gt;::push_back (1 samples, 0.05%)</title><rect x="506.3" y="389" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="509.34" y="399.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (6 samples, 0.32%)</title><rect x="645.9" y="293" width="3.8" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="648.87" y="303.5" ></text>
</g>
<g >
<title>`getValueFromCondition(llvm::Value*, llvm::Value*, bool) (1 samples, 0.05%)</title><rect x="17.0" y="565" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="20.01" y="575.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::AssertingVH&lt;llvm::Instruction&gt;, llvm::deta (1 samples, 0.05%)</title><rect x="428.6" y="517" width="0.6" height="15.0" fill="rgb(84,232,84)" rx="2" ry="2" />
<text  x="431.61" y="527.5" ></text>
</g>
<g >
<title>`llvm::OperandBundleUser&lt;llvm::CallInst, llvm::Use*&gt;::hasClobber (1 samples, 0.05%)</title><rect x="1130.1" y="389" width="0.6" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="1133.11" y="399.5" ></text>
</g>
<g >
<title>`eliminateTailRecursion(llvm::Function&amp;, llvm::TargetTransformIn (1 samples, 0.05%)</title><rect x="42.5" y="645" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="45.49" y="655.5" ></text>
</g>
<g >
<title>`llvm::APInt::operator (1 samples, 0.05%)</title><rect x="221.5" y="437" width="0.7" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="224.53" y="447.5" ></text>
</g>
<g >
<title>`llvm::computeOverflowForUnsignedAdd(llvm::Value const*, llvm::V (1 samples, 0.05%)</title><rect x="80.1" y="581" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="83.09" y="591.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::BasicBlock*, llvm::Value*&gt;* ll (4 samples, 0.22%)</title><rect x="667.5" y="405" width="2.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="670.54" y="415.5" ></text>
</g>
<g >
<title>`llvm::SROA::runOnAlloca(llvm::AllocaInst&amp;) (7 samples, 0.38%)</title><rect x="704.5" y="517" width="4.5" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="707.49" y="527.5" ></text>
</g>
<g >
<title>`small_free_list_remove_ptr_no_clear (1 samples, 0.05%)</title><rect x="1075.3" y="389" width="0.7" height="15.0" fill="rgb(199,199,59)" rx="2" ry="2" />
<text  x="1078.31" y="399.5" ></text>
</g>
<g >
<title>`canEvaluateTruncated(llvm::Value*, llvm::Type*, llvm::InstCombi (1 samples, 0.05%)</title><rect x="120.2" y="581" width="0.7" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="123.23" y="591.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefBehavior(llvm::Function const*) (1 samples, 0.05%)</title><rect x="590.4" y="405" width="0.7" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="593.44" y="415.5" ></text>
</g>
<g >
<title>`llvm::TargetLibraryInfoImpl::getLibFunc(llvm::StringRef, llvm:: (1 samples, 0.05%)</title><rect x="291.0" y="565" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="293.98" y="575.5" ></text>
</g>
<g >
<title>`llvm::PMTopLevelManager::findAnalysisPassInfo(void const*) cons (1 samples, 0.05%)</title><rect x="240.6" y="645" width="0.7" height="15.0" fill="rgb(87,233,87)" rx="2" ry="2" />
<text  x="243.65" y="655.5" ></text>
</g>
<g >
<title>`llvm::SROA::promoteAllocas(llvm::Function&amp;) (4 samples, 0.22%)</title><rect x="701.9" y="517" width="2.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="704.94" y="527.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::AllocaDerivedValueTracker::walk(llvm::Va (1 samples, 0.05%)</title><rect x="42.5" y="629" width="0.6" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="45.49" y="639.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::Instruction*, unsig (1 samples, 0.05%)</title><rect x="455.4" y="501" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="458.37" y="511.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::computeForAddSub(bool, bool, llvm::KnownBits c (1 samples, 0.05%)</title><rect x="537.6" y="293" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="540.56" y="303.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="624.2" y="213" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="627.21" y="223.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::WeakTrackingVH, llvm::CallGraphNode*&gt;::pai (1 samples, 0.05%)</title><rect x="1175.3" y="485" width="0.7" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="1178.35" y="495.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (15 samples, 0.81%)</title><rect x="65.4" y="597" width="9.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="68.43" y="607.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::createNodeForPHI(llvm::PHINode*) (1 samples, 0.05%)</title><rect x="131.1" y="485" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="134.06" y="495.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="758.0" y="421" width="0.7" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="761.01" y="431.5" ></text>
</g>
<g >
<title>`computeOverflowForSignedAdd(llvm::Value const*, llvm::Value con (2 samples, 0.11%)</title><rect x="280.2" y="565" width="1.2" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="283.15" y="575.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="512.7" y="405" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="515.71" y="415.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::createNodeForPHI(llvm::PHINode*) (1 samples, 0.05%)</title><rect x="131.1" y="549" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="134.06" y="559.5" ></text>
</g>
<g >
<title>`runImpl(llvm::Function&amp;, llvm::SimplifyQuery const&amp;, llvm::Opti (6 samples, 0.32%)</title><rect x="246.4" y="629" width="3.8" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="249.38" y="639.5" ></text>
</g>
<g >
<title>`llvm::PHITransAddr::PHITranslateSubExpr(llvm::Value*, llvm::Bas (1 samples, 0.05%)</title><rect x="602.5" y="389" width="0.7" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="605.55" y="399.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm::DomT (1 samples, 0.05%)</title><rect x="438.8" y="453" width="0.6" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="441.80" y="463.5" ></text>
</g>
<g >
<title>`llvm::canConstantFoldCallTo(llvm::ImmutableCallSite, llvm::Func (1 samples, 0.05%)</title><rect x="1097.6" y="453" width="0.7" height="15.0" fill="rgb(72,221,72)" rx="2" ry="2" />
<text  x="1100.61" y="463.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getSinglePredecessor() const (1 samples, 0.05%)</title><rect x="1170.2" y="485" width="0.7" height="15.0" fill="rgb(53,202,53)" rx="2" ry="2" />
<text  x="1173.25" y="495.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeAllocSize(llvm::Type*) const (1 samples, 0.05%)</title><rect x="299.3" y="437" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="302.27" y="447.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::SCEV const*, llvm::SmallVector&lt;std::__1::p (1 samples, 0.05%)</title><rect x="580.2" y="485" width="0.7" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="583.25" y="495.5" ></text>
</g>
<g >
<title>`std::__1::__function::__func&lt;llvm::TargetTransformInfo (*)(llvm (1 samples, 0.05%)</title><rect x="730.0" y="517" width="0.6" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="732.98" y="527.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitCallSite(llvm::CallSite) (4 samples, 0.22%)</title><rect x="82.6" y="581" width="2.6" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="85.63" y="591.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ModuleBitcodeWriterBase::ModuleBitcodeWr (2 samples, 0.11%)</title><rect x="1186.2" y="725" width="1.3" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="1189.18" y="735.5" ></text>
</g>
<g >
<title>`llvm::LLVMContext::shouldDiscardValueNames() const (1 samples, 0.05%)</title><rect x="706.4" y="373" width="0.6" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="709.40" y="383.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="509.5" y="437" width="0.7" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="512.52" y="447.5" ></text>
</g>
<g >
<title>`llvm::Value::stripAndAccumulateInBoundsConstantOffsets(llvm::Da (1 samples, 0.05%)</title><rect x="86.5" y="565" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="89.46" y="575.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="709.0" y="389" width="0.6" height="15.0" fill="rgb(214,214,64)" rx="2" ry="2" />
<text  x="711.95" y="399.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (6 samples, 0.32%)</title><rect x="93.5" y="517" width="3.8" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="96.47" y="527.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::BasicBlock const*&gt;::find(llvm::Basi (1 samples, 0.05%)</title><rect x="36.1" y="581" width="0.7" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="39.12" y="591.5" ></text>
</g>
<g >
<title>`llvm::ConstantRange::isFullSet() const (1 samples, 0.05%)</title><rect x="1117.4" y="437" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="1120.37" y="447.5" ></text>
</g>
<g >
<title>`llvm::PredIteratorCache::GetPreds(llvm::BasicBlock*) (3 samples, 0.16%)</title><rect x="663.1" y="421" width="1.9" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="666.08" y="431.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="394.2" y="453" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="397.20" y="463.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value const*&gt;::insert(llvm::Value c (1 samples, 0.05%)</title><rect x="527.4" y="389" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="530.37" y="399.5" ></text>
</g>
<g >
<title>`llvm::isMallocOrCallocLikeFn(llvm::Value const*, llvm::TargetLi (1 samples, 0.05%)</title><rect x="570.1" y="357" width="0.6" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="573.05" y="367.5" ></text>
</g>
<g >
<title>`llvm::ObjectSizeOffsetVisitor::compute(llvm::Value*) (1 samples, 0.05%)</title><rect x="172.5" y="405" width="0.6" height="15.0" fill="rgb(82,230,82)" rx="2" ry="2" />
<text  x="175.47" y="415.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="685.4" y="325" width="0.6" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="688.38" y="335.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="173.7" y="373" width="0.7" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="176.75" y="383.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeBase&lt;llvm::BasicBlock, false&gt;::updateDFSNumb (1 samples, 0.05%)</title><rect x="735.7" y="469" width="0.6" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="738.71" y="479.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::alias(llvm::MemoryLocation const&amp;, llvm: (1 samples, 0.05%)</title><rect x="595.5" y="261" width="0.7" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="598.54" y="271.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="225.4" y="421" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="228.36" y="431.5" ></text>
</g>
<g >
<title>`llvm::BlockFrequencyInfoImpl&lt;llvm::BasicBlock&gt;::tryToComputeMas (1 samples, 0.05%)</title><rect x="254.0" y="581" width="0.7" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="257.03" y="591.5" ></text>
</g>
<g >
<title>`COMPILE-FILE-TO-MODULE^COMPILER^FN^^ (1,830 samples, 98.81%)</title><rect x="10.0" y="885" width="1166.0" height="15.0" fill="rgb(64,178,178)" rx="2" ry="2" />
<text  x="13.00" y="895.5" >`COMPILE-FILE-TO-MODULE^COMPILER^FN^^</text>
</g>
<g >
<title>`llvm::LoopBase&lt;llvm::BasicBlock, llvm::Loop&gt;::getExitingBlocks( (1 samples, 0.05%)</title><rect x="738.3" y="517" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="741.26" y="527.5" ></text>
</g>
<g >
<title>`llvm::hash_value(llvm::GVN::Expression const&amp;) (1 samples, 0.05%)</title><rect x="587.9" y="405" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="590.89" y="415.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (1 samples, 0.05%)</title><rect x="731.9" y="453" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="734.89" y="463.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SCCPSolver::Solve() (4 samples, 0.22%)</title><rect x="709.0" y="533" width="2.5" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="711.95" y="543.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm::DomT (1 samples, 0.05%)</title><rect x="176.9" y="437" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="179.93" y="447.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="712.8" y="485" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="715.78" y="495.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::computeExitLimit(llvm::Loop const*, llvm (1 samples, 0.05%)</title><rect x="250.8" y="469" width="0.7" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="253.84" y="479.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::PointerIntPair&lt;llvm::Va (1 samples, 0.05%)</title><rect x="357.9" y="613" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="360.88" y="623.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (2 samples, 0.11%)</title><rect x="522.3" y="341" width="1.2" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="525.27" y="351.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solve() (11 samples, 0.59%)</title><rect x="377.6" y="469" width="7.0" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="380.63" y="479.5" ></text>
</g>
<g >
<title>`llvm::BlockFrequencyInfoImpl&lt;llvm::BasicBlock&gt;::computeMassInLo (1 samples, 0.05%)</title><rect x="254.7" y="581" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="257.67" y="591.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::find_imp(void const*) const (1 samples, 0.05%)</title><rect x="1160.1" y="405" width="0.6" height="15.0" fill="rgb(71,220,71)" rx="2" ry="2" />
<text  x="1163.05" y="415.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::u (2 samples, 0.11%)</title><rect x="759.3" y="389" width="1.3" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="762.29" y="399.5" ></text>
</g>
<g >
<title>`llvm::IRBuilderBase::SetInstDebugLocation(llvm::Instruction*) c (1 samples, 0.05%)</title><rect x="525.5" y="453" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="528.45" y="463.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedBits(llvm::Instruction*, un (2 samples, 0.11%)</title><rect x="314.6" y="565" width="1.2" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="317.56" y="575.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="647.8" y="133" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="650.79" y="143.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::DecomposeGEPExpression(llvm::Value const*, (1 samples, 0.05%)</title><rect x="626.1" y="229" width="0.7" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="629.12" y="239.5" ></text>
</g>
<g >
<title>`isDereferenceableAndAlignedPointer(llvm::Value const*, unsigned (1 samples, 0.05%)</title><rect x="720.4" y="437" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="723.42" y="447.5" ></text>
</g>
<g >
<title>`llvm::Instruction::getMetadataImpl(unsigned int) const (1 samples, 0.05%)</title><rect x="643.3" y="357" width="0.7" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="646.33" y="367.5" ></text>
</g>
<g >
<title>`llvm::isDereferenceableAndAlignedPointer(llvm::Value const*, un (1 samples, 0.05%)</title><rect x="233.6" y="549" width="0.7" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="236.64" y="559.5" ></text>
</g>
<g >
<title>`llvm::SROA::runImpl(llvm::Function&amp;, llvm::DominatorTree&amp;, llvm (13 samples, 0.70%)</title><rect x="700.7" y="533" width="8.3" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="703.67" y="543.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (3 samples, 0.16%)</title><rect x="1105.3" y="437" width="1.9" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="1108.26" y="447.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="1105.9" y="389" width="0.6" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="1108.90" y="399.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="573.9" y="373" width="0.6" height="15.0" fill="rgb(185,185,53)" rx="2" ry="2" />
<text  x="576.88" y="383.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Type*, llvm::Point (1 samples, 0.05%)</title><rect x="57.8" y="501" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="60.79" y="511.5" ></text>
</g>
<g >
<title>`llvm::GVN::processInstruction(llvm::Instruction*) (98 samples, 5.29%)</title><rect x="163.6" y="581" width="62.4" height="15.0" fill="rgb(65,213,65)" rx="2" ry="2" />
<text  x="166.55" y="591.5" >`llvm:..</text>
</g>
<g >
<title>`small_malloc_should_clear (1 samples, 0.05%)</title><rect x="257.2" y="453" width="0.7" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="260.21" y="463.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1123.7" y="421" width="0.7" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="1126.74" y="431.5" ></text>
</g>
<g >
<title>`llvm::generic_gep_type_iterator&lt;llvm::Use const*&gt;::operator+ (1 samples, 0.05%)</title><rect x="176.3" y="469" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="179.30" y="479.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock const*, (1 samples, 0.05%)</title><rect x="745.3" y="469" width="0.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="748.27" y="479.5" ></text>
</g>
<g >
<title>`llvm::IRBuilderBase::SetInsertPoint(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="705.1" y="453" width="0.7" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="708.13" y="463.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;llvm::PoisoningVH&lt;llvm:: (2 samples, 0.11%)</title><rect x="421.0" y="501" width="1.2" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="423.96" y="511.5" ></text>
</g>
<g >
<title>`llvm::Value::stripPointerCasts() const (1 samples, 0.05%)</title><rect x="448.4" y="453" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="451.36" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="462.4" y="421" width="0.6" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="465.38" y="431.5" ></text>
</g>
<g >
<title>`llvm::MetadataTracking::track(void*, llvm::Metadata&amp;, llvm::Poi (1 samples, 0.05%)</title><rect x="772.0" y="485" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="775.03" y="495.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::u (1 samples, 0.05%)</title><rect x="97.3" y="485" width="0.6" height="15.0" fill="rgb(63,211,63)" rx="2" ry="2" />
<text  x="100.29" y="495.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (1 samples, 0.05%)</title><rect x="544.6" y="469" width="0.6" height="15.0" fill="rgb(88,234,88)" rx="2" ry="2" />
<text  x="547.57" y="479.5" ></text>
</g>
<g >
<title>`llvm::MemoryLocation::operator==(llvm::MemoryLocation const&amp;) c (1 samples, 0.05%)</title><rect x="622.3" y="245" width="0.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="625.30" y="255.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (11 samples, 0.59%)</title><rect x="533.1" y="453" width="7.0" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="536.10" y="463.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^33^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1029" width="1180.0" height="15.0" fill="rgb(91,202,202)" rx="2" ry="2" />
<text  x="13.00" y="1039.5" >`compile-file.lsp-compile-file52^33^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::SHA1::writebyte(unsigned char) (1 samples, 0.05%)</title><rect x="1185.5" y="709" width="0.7" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="1188.54" y="719.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (2 samples, 0.11%)</title><rect x="617.2" y="245" width="1.3" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="620.20" y="255.5" ></text>
</g>
<g >
<title>`llvm::OperandBundleUser&lt;llvm::CallInst, llvm::Use*&gt;::isFnAttrDi (1 samples, 0.05%)</title><rect x="316.5" y="517" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="319.47" y="527.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (1 samples, 0.05%)</title><rect x="543.9" y="469" width="0.7" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="546.93" y="479.5" ></text>
</g>
<g >
<title>`llvm::InstructionCombiningPass::runOnFunction(llvm::Function&amp;) (111 samples, 5.99%)</title><rect x="262.9" y="645" width="70.8" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="265.95" y="655.5" >`llvm::..</text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (4 samples, 0.22%)</title><rect x="65.4" y="565" width="2.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="68.43" y="575.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::ValueHand (1 samples, 0.05%)</title><rect x="726.2" y="501" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="729.16" y="511.5" ></text>
</g>
<g >
<title>`llvm::APInt::APInt(unsigned int, unsigned long long, bool) (1 samples, 0.05%)</title><rect x="453.5" y="437" width="0.6" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="456.46" y="447.5" ></text>
</g>
<g >
<title>`llvm::formLCSSA(llvm::Loop&amp;, llvm::DominatorTree&amp;, llvm::LoopIn (1 samples, 0.05%)</title><rect x="250.2" y="613" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="253.21" y="623.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (1 samples, 0.05%)</title><rect x="677.7" y="405" width="0.7" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="680.73" y="415.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction const*, uns (1 samples, 0.05%)</title><rect x="1183.0" y="677" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="1185.99" y="687.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (7 samples, 0.38%)</title><rect x="1147.9" y="485" width="4.5" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="1150.95" y="495.5" ></text>
</g>
<g >
<title>`llvm::scc_iterator&lt;llvm::Function const*, llvm::GraphTraits&lt;llv (1 samples, 0.05%)</title><rect x="745.3" y="501" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="748.27" y="511.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv_ov(llvm::APInt const&amp;, bool&amp;) const (1 samples, 0.05%)</title><rect x="684.1" y="389" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="687.10" y="399.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::alias(llvm::MemoryLocation const&amp;, llvm::M (3 samples, 0.16%)</title><rect x="633.1" y="341" width="1.9" height="15.0" fill="rgb(87,233,87)" rx="2" ry="2" />
<text  x="636.13" y="351.5" ></text>
</g>
<g >
<title>`top.lsp-top130^378^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1861" width="1180.0" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="13.00" y="1871.5" >`top.lsp-top130^378^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (4 samples, 0.22%)</title><rect x="172.5" y="453" width="2.5" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="175.47" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantExprKeyType::getHash() const (2 samples, 0.11%)</title><rect x="71.2" y="485" width="1.2" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="74.17" y="495.5" ></text>
</g>
<g >
<title>`tiny_free_no_lock (1 samples, 0.05%)</title><rect x="1177.3" y="597" width="0.6" height="15.0" fill="rgb(225,225,68)" rx="2" ry="2" />
<text  x="1180.26" y="607.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (5 samples, 0.27%)</title><rect x="624.2" y="293" width="3.2" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="627.21" y="303.5" ></text>
</g>
<g >
<title>`llvm::Argument::getParamAlignment() const (1 samples, 0.05%)</title><rect x="385.9" y="453" width="0.7" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="388.92" y="463.5" ></text>
</g>
<g >
<title>`llvm::AttributeList::hasAttrSomewhere(llvm::Attribute::AttrKind (1 samples, 0.05%)</title><rect x="123.4" y="485" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="126.41" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solve() (6 samples, 0.32%)</title><rect x="407.6" y="437" width="3.8" height="15.0" fill="rgb(70,219,70)" rx="2" ry="2" />
<text  x="410.58" y="447.5" ></text>
</g>
<g >
<title>`collectBitParts(llvm::Value*, bool, bool, std::__1::map&lt;llvm::V (1 samples, 0.05%)</title><rect x="323.5" y="549" width="0.6" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="326.48" y="559.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="681.6" y="389" width="0.6" height="15.0" fill="rgb(87,233,87)" rx="2" ry="2" />
<text  x="684.56" y="399.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (4 samples, 0.22%)</title><rect x="763.1" y="453" width="2.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="766.11" y="463.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::mergeAliasSetsForPointer(llvm::Value con (2 samples, 0.11%)</title><rect x="556.7" y="437" width="1.2" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="559.67" y="447.5" ></text>
</g>
<g >
<title>`getFoldedCast(llvm::Instruction::CastOps, llvm::Constant*, llvm (1 samples, 0.05%)</title><rect x="468.7" y="469" width="0.7" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="471.75" y="479.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::intersectAssumeOrGuar (1 samples, 0.05%)</title><rect x="13.2" y="581" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="16.19" y="591.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::CollectSCCMembership(llvm::CallGraph&amp;) (1 samples, 0.05%)</title><rect x="352.1" y="645" width="0.7" height="15.0" fill="rgb(59,209,59)" rx="2" ry="2" />
<text  x="355.15" y="655.5" ></text>
</g>
<g >
<title>`void std::__1::__sort&lt;std::__1::__less&lt;llvm::NonLocalDepEntry,  (4 samples, 0.22%)</title><rect x="608.3" y="389" width="2.5" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="611.28" y="399.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::getModRefBehavior(llvm::ImmutableCallSit (1 samples, 0.05%)</title><rect x="198.6" y="421" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="201.60" y="431.5" ></text>
</g>
<g >
<title>`ComputeNumSignBitsImpl(llvm::Value const*, unsigned int, (anony (1 samples, 0.05%)</title><rect x="280.2" y="549" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="283.15" y="559.5" ></text>
</g>
<g >
<title>`llvm::ReplaceableMetadataImpl::getOrCreate(llvm::Metadata&amp;) (1 samples, 0.05%)</title><rect x="772.0" y="469" width="0.7" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="775.03" y="479.5" ></text>
</g>
<g >
<title>`llvm::BranchProbabilityInfo::updatePostDominatedByColdCall(llvm (4 samples, 0.22%)</title><rect x="741.4" y="517" width="2.6" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="744.45" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="413.3" y="357" width="0.7" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="416.32" y="367.5" ></text>
</g>
<g >
<title>`llvm::TerminatorInst::getSuccessor(unsigned int) const (1 samples, 0.05%)</title><rect x="366.2" y="629" width="0.6" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="369.17" y="639.5" ></text>
</g>
<g >
<title>`llvm::Value::setName(llvm::Twine const&amp;) (1 samples, 0.05%)</title><rect x="530.6" y="469" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="533.55" y="479.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::pointsToConstantMemory(llvm::MemoryLocatio (2 samples, 0.11%)</title><rect x="138.1" y="549" width="1.2" height="15.0" fill="rgb(96,243,96)" rx="2" ry="2" />
<text  x="141.07" y="559.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="27.8" y="517" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="30.84" y="527.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::EarlyCSELegacyCommonPass&lt;true&gt;::runOnFun (20 samples, 1.08%)</title><rect x="389.1" y="549" width="12.7" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="392.10" y="559.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatt (1 samples, 0.05%)</title><rect x="17.6" y="501" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="20.65" y="511.5" ></text>
</g>
<g >
<title>`isObjectSmallerThan(llvm::Value const*, unsigned long long, llv (1 samples, 0.05%)</title><rect x="644.6" y="293" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="647.60" y="303.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="323.5" y="469" width="0.6" height="15.0" fill="rgb(199,199,59)" rx="2" ry="2" />
<text  x="326.48" y="479.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (6 samples, 0.32%)</title><rect x="546.5" y="501" width="3.8" height="15.0" fill="rgb(59,209,59)" rx="2" ry="2" />
<text  x="549.48" y="511.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::PruneEH::runOnSCC(llvm::CallGraphSCC&amp;) (1 samples, 0.05%)</title><rect x="369.4" y="565" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="372.35" y="575.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedInstructionBits(llvm::Instr (1 samples, 0.05%)</title><rect x="1091.9" y="485" width="0.6" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="1094.88" y="495.5" ></text>
</g>
<g >
<title>`llvm::GEPOperator::accumulateConstantOffset(llvm::DataLayout co (1 samples, 0.05%)</title><rect x="600.6" y="389" width="0.7" height="15.0" fill="rgb(52,201,52)" rx="2" ry="2" />
<text  x="603.64" y="399.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="309.5" y="501" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="312.46" y="511.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="385.3" y="453" width="0.6" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="388.28" y="463.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::getUnknown(llvm::Value*) (1 samples, 0.05%)</title><rect x="250.8" y="309" width="0.7" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="253.84" y="319.5" ></text>
</g>
<g >
<title>`llvm::Value::stripPointerCasts() const (1 samples, 0.05%)</title><rect x="644.6" y="245" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="647.60" y="255.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;std::__1::pair&lt;llvm::SCEVUnknown const*, llvm::L (1 samples, 0.05%)</title><rect x="343.9" y="597" width="0.6" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="346.87" y="607.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Type*, llvm::Point (1 samples, 0.05%)</title><rect x="1100.2" y="437" width="0.6" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="1103.16" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::FoldBitCast(llvm::Constant*, llvm::Type* (1 samples, 0.05%)</title><rect x="766.3" y="469" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="769.30" y="479.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getIndexedOffsetInType(llvm::Type*, llvm::Arr (1 samples, 0.05%)</title><rect x="513.3" y="405" width="0.7" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="516.35" y="415.5" ></text>
</g>
<g >
<title>`llvm::FoldBranchToCommonDest(llvm::BranchInst*, unsigned int) (2 samples, 0.11%)</title><rect x="715.3" y="469" width="1.3" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="718.32" y="479.5" ></text>
</g>
<g >
<title>`llvm::Loop::hasDedicatedExits() const (1 samples, 0.05%)</title><rect x="558.6" y="501" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="561.59" y="511.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="679.6" y="357" width="0.7" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="682.64" y="367.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (6 samples, 0.32%)</title><rect x="394.2" y="501" width="3.8" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="397.20" y="511.5" ></text>
</g>
<g >
<title>`llvm::simplifyCFG(llvm::BasicBlock*, llvm::TargetTransformInfo  (17 samples, 0.92%)</title><rect x="713.4" y="517" width="10.8" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="716.41" y="527.5" ></text>
</g>
<g >
<title>`llvm::Instruction::getAAMetadata(llvm::AAMDNodes&amp;, bool) const (1 samples, 0.05%)</title><rect x="658.0" y="325" width="0.6" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="660.98" y="335.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::DecomposeGEPExpression(llvm::Value const*, (1 samples, 0.05%)</title><rect x="633.1" y="293" width="0.7" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="636.13" y="303.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (1 samples, 0.05%)</title><rect x="221.5" y="501" width="0.7" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="224.53" y="511.5" ></text>
</g>
<g >
<title>`_platform_strlen (1 samples, 0.05%)</title><rect x="584.1" y="501" width="0.6" height="15.0" fill="rgb(219,219,66)" rx="2" ry="2" />
<text  x="587.07" y="511.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (2 samples, 0.11%)</title><rect x="222.8" y="501" width="1.3" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="225.81" y="511.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasPHI(llvm::PHINode const*, unsigned lo (1 samples, 0.05%)</title><rect x="596.2" y="341" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="599.18" y="351.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::getOrCreate(llvm:: (1 samples, 0.05%)</title><rect x="750.4" y="421" width="0.6" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="753.37" y="431.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::pointsToConstantMemory(llvm::MemoryLocatio (1 samples, 0.05%)</title><rect x="568.1" y="421" width="0.7" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="571.14" y="431.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="439.4" y="485" width="0.7" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="442.44" y="495.5" ></text>
</g>
<g >
<title>`llvm::SimplifySelectInst(llvm::Value*, llvm::Value*, llvm::Valu (1 samples, 0.05%)</title><rect x="119.0" y="581" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="121.95" y="591.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::getOrCreate(llvm:: (1 samples, 0.05%)</title><rect x="512.7" y="373" width="0.6" height="15.0" fill="rgb(107,253,107)" rx="2" ry="2" />
<text  x="515.71" y="383.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="86.5" y="549" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="89.46" y="559.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorBase::grow_pod(void*, unsigned long, unsigned  (1 samples, 0.05%)</title><rect x="507.0" y="421" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="509.98" y="431.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldLoadFromConstPtr(llvm::Constant*, llvm::Type* (1 samples, 0.05%)</title><rect x="75.0" y="597" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="77.99" y="607.5" ></text>
</g>
<g >
<title>`llvm::Value::stripPointerCastsAndBarriers() const (1 samples, 0.05%)</title><rect x="334.3" y="453" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="337.31" y="463.5" ></text>
</g>
<g >
<title>`llvm::GlobalValue::isDeclaration() const (1 samples, 0.05%)</title><rect x="319.7" y="453" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="322.65" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantRange::multiply(llvm::ConstantRange const&amp;) const (1 samples, 0.05%)</title><rect x="132.3" y="501" width="0.7" height="15.0" fill="rgb(75,222,75)" rx="2" ry="2" />
<text  x="135.33" y="511.5" ></text>
</g>
<g >
<title>`llvm::PHITransAddr::PHITranslateWithInsertion(llvm::BasicBlock* (1 samples, 0.05%)</title><rect x="602.5" y="437" width="0.7" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="605.55" y="447.5" ></text>
</g>
<g >
<title>`std::__1::vector&lt;llvm::Constant*, std::__1::allocator&lt;llvm::Con (1 samples, 0.05%)</title><rect x="217.7" y="357" width="0.6" height="15.0" fill="rgb(77,224,77)" rx="2" ry="2" />
<text  x="220.71" y="367.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="646.5" y="213" width="0.6" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="649.51" y="223.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, llvm::Mem (1 samples, 0.05%)</title><rect x="593.0" y="437" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="595.99" y="447.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeBase&lt;llvm::BasicBlock, false&gt;::dominates(llv (1 samples, 0.05%)</title><rect x="338.8" y="613" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="341.77" y="623.5" ></text>
</g>
<g >
<title>`std::__1::enable_if&lt;!(std::is_array&lt;llvm::LoopAccessInfo&gt;::valu (1 samples, 0.05%)</title><rect x="250.8" y="581" width="0.7" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="253.84" y="591.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::lookupOrAdd(llvm::Value*) (1 samples, 0.05%)</title><rect x="589.8" y="437" width="0.6" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="592.81" y="447.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="543.9" y="437" width="0.7" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="546.93" y="447.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (2 samples, 0.11%)</title><rect x="271.9" y="549" width="1.2" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="274.87" y="559.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::PointerIntPair&lt;llvm::Va (2 samples, 0.11%)</title><rect x="359.2" y="629" width="1.2" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="362.16" y="639.5" ></text>
</g>
<g >
<title>`llvm::ConstantRange::truncate(unsigned int) const (1 samples, 0.05%)</title><rect x="132.3" y="485" width="0.7" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="135.33" y="495.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldLoadFromConstPtr(llvm::Constant*, llvm::Type* (1 samples, 0.05%)</title><rect x="266.8" y="597" width="0.6" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="269.77" y="607.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::apint_match::match&lt;llvm::Value const&gt;( (1 samples, 0.05%)</title><rect x="507.6" y="373" width="0.7" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="510.61" y="383.5" ></text>
</g>
<g >
<title>`llvm::AAResultBase&lt;llvm::BasicAAResult&gt;::AAResultsProxy::getMod (1 samples, 0.05%)</title><rect x="1129.5" y="405" width="0.6" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="1132.47" y="415.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="647.1" y="213" width="0.7" height="15.0" fill="rgb(70,219,70)" rx="2" ry="2" />
<text  x="650.15" y="223.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="97.3" y="501" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="100.29" y="511.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="55.2" y="549" width="0.7" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="58.24" y="559.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm::SSAU (1 samples, 0.05%)</title><rect x="737.0" y="405" width="0.6" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="739.99" y="415.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="295.4" y="437" width="0.7" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="298.44" y="447.5" ></text>
</g>
<g >
<title>`llvm::ConstantRange::makeAllowedICmpRegion(llvm::CmpInst::Predi (1 samples, 0.05%)</title><rect x="510.8" y="437" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="513.80" y="447.5" ></text>
</g>
<g >
<title>`llvm::ConstantExprKeyType::getHash() const (1 samples, 0.05%)</title><rect x="758.7" y="373" width="0.6" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="761.65" y="383.5" ></text>
</g>
<g >
<title>`computeKnownBitsAddSub(bool, llvm::Value const*, llvm::Value co (1 samples, 0.05%)</title><rect x="120.2" y="517" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="123.23" y="527.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="723.6" y="389" width="0.6" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="726.61" y="399.5" ></text>
</g>
<g >
<title>`llvm::DemandedBits::determineLiveOperandBits(llvm::Instruction  (1 samples, 0.05%)</title><rect x="40.6" y="581" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="43.58" y="591.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getValueOnEdge(llvm:: (1 samples, 0.05%)</title><rect x="35.5" y="549" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="38.49" y="559.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (2 samples, 0.11%)</title><rect x="248.3" y="597" width="1.3" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="251.29" y="607.5" ></text>
</g>
<g >
<title>`llvm::PHITransAddr::PHITranslateValue(llvm::BasicBlock*, llvm:: (1 samples, 0.05%)</title><rect x="602.5" y="405" width="0.7" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="605.55" y="415.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::find_imp(void const*) const (1 samples, 0.05%)</title><rect x="378.3" y="405" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="381.27" y="415.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::BasicBlock*, llvm:: (1 samples, 0.05%)</title><rect x="661.8" y="405" width="0.6" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="664.80" y="415.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp_big(void const*) (1 samples, 0.05%)</title><rect x="249.6" y="565" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="252.57" y="575.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="261.7" y="597" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="264.67" y="607.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="649.7" y="229" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="652.70" y="239.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObjects(llvm::Value*, llvm::SmallVectorImpl&lt; (2 samples, 0.11%)</title><rect x="1105.3" y="421" width="1.2" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="1108.26" y="431.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::add(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="556.0" y="485" width="0.7" height="15.0" fill="rgb(69,218,69)" rx="2" ry="2" />
<text  x="559.04" y="495.5" ></text>
</g>
<g >
<title>`llvm::DenseMapIterator&lt;llvm::Value*, std::__1::unique_ptr&lt;(anon (1 samples, 0.05%)</title><rect x="378.9" y="437" width="0.6" height="15.0" fill="rgb(53,202,53)" rx="2" ry="2" />
<text  x="381.91" y="447.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="1098.9" y="485" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="1101.89" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoCache::isOverdefined(llvm:: (1 samples, 0.05%)</title><rect x="407.6" y="373" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="410.58" y="383.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="136.8" y="533" width="0.6" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="139.79" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (8 samples, 0.43%)</title><rect x="1107.2" y="389" width="5.1" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="1110.17" y="399.5" ></text>
</g>
<g >
<title>`llvm::JumpThreadingPass::ComputeValueKnownInPredecessors(llvm:: (10 samples, 0.54%)</title><rect x="405.0" y="485" width="6.4" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="408.03" y="495.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitBranchInst(llvm::BranchInst&amp;) (1 samples, 0.05%)</title><rect x="331.1" y="613" width="0.7" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="334.12" y="623.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeBase&lt;llvm::BasicBlock, false&gt;::dominates(llv (1 samples, 0.05%)</title><rect x="325.4" y="485" width="0.6" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="328.39" y="495.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="120.2" y="453" width="0.7" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="123.23" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldGetElementPtr(llvm::Type*, llvm::Constant*, b (1 samples, 0.05%)</title><rect x="461.1" y="405" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="464.10" y="415.5" ></text>
</g>
<g >
<title>`llvm::FPPassManager::runOnFunction(llvm::Function&amp;) (166 samples, 8.96%)</title><rect x="245.1" y="661" width="105.8" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="248.11" y="671.5" >`llvm::FPPas..</text>
</g>
<g >
<title>`llvm::simplifyLoop(llvm::Loop*, llvm::DominatorTree*, llvm::Loo (3 samples, 0.16%)</title><rect x="251.5" y="629" width="1.9" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="254.48" y="639.5" ></text>
</g>
<g >
<title>`core::VariadicMethoid&lt;0, void (llvmo::Module_O::*)()&gt;::method_e (6 samples, 0.32%)</title><rect x="1176.0" y="789" width="3.8" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="1178.98" y="799.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (9 samples, 0.49%)</title><rect x="45.7" y="629" width="5.7" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="48.68" y="639.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="159.7" y="629" width="0.7" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="162.73" y="639.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="299.9" y="453" width="0.6" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="302.90" y="463.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::Grow(unsigned int) (1 samples, 0.05%)</title><rect x="249.6" y="549" width="0.6" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="252.57" y="559.5" ></text>
</g>
<g >
<title>`free (1 samples, 0.05%)</title><rect x="576.4" y="485" width="0.7" height="15.0" fill="rgb(210,210,63)" rx="2" ry="2" />
<text  x="579.43" y="495.5" ></text>
</g>
<g >
<title>`tiny_free_no_lock (2 samples, 0.11%)</title><rect x="763.1" y="405" width="1.3" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="766.11" y="415.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1124.4" y="389" width="0.6" height="15.0" fill="rgb(89,235,89)" rx="2" ry="2" />
<text  x="1127.37" y="399.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeBase&lt;llvm::BasicBlock, false&gt;::dominates(llv (1 samples, 0.05%)</title><rect x="735.7" y="485" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="738.71" y="495.5" ></text>
</g>
<g >
<title>`llvm::formLCSSA(llvm::Loop&amp;, llvm::DominatorTree&amp;, llvm::LoopIn (1 samples, 0.05%)</title><rect x="737.6" y="469" width="0.7" height="15.0" fill="rgb(107,253,107)" rx="2" ry="2" />
<text  x="740.62" y="479.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (2 samples, 0.11%)</title><rect x="281.4" y="565" width="1.3" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="284.43" y="575.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;llvm::Value*, true&gt;::push_back(ll (1 samples, 0.05%)</title><rect x="680.3" y="405" width="0.6" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="683.28" y="415.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="758.7" y="437" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="761.65" y="447.5" ></text>
</g>
<g >
<title>`runImpl(llvm::Function&amp;, llvm::SimplifyQuery const&amp;, llvm::Opti (8 samples, 0.43%)</title><rect x="730.6" y="533" width="5.1" height="15.0" fill="rgb(71,220,71)" rx="2" ry="2" />
<text  x="733.62" y="543.5" ></text>
</g>
<g >
<title>`isUseTriviallyOptimizableToLiveOnEntry(llvm::AAResults&amp;, llvm:: (1 samples, 0.05%)</title><rect x="566.2" y="485" width="0.7" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="569.23" y="495.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeAllocSize(llvm::Type*) const (1 samples, 0.05%)</title><rect x="136.8" y="501" width="0.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="139.79" y="511.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="157.2" y="549" width="0.6" height="15.0" fill="rgb(213,213,64)" rx="2" ry="2" />
<text  x="160.18" y="559.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::ImmutableCallSite, llvm::M (3 samples, 0.16%)</title><rect x="569.4" y="389" width="1.9" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="572.42" y="399.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::getSCEV(llvm::Value*) (1 samples, 0.05%)</title><rect x="131.1" y="389" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="134.06" y="399.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceWrapperPass::releaseMemory() (1 samples, 0.05%)</title><rect x="157.8" y="613" width="0.7" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="160.82" y="623.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::isKnownNegative(llvm::SCEV const*) (1 samples, 0.05%)</title><rect x="132.3" y="549" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="135.33" y="559.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="442.6" y="325" width="0.7" height="15.0" fill="rgb(192,192,56)" rx="2" ry="2" />
<text  x="445.62" y="335.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::CorrelatedValuePropagation::runOnFunctio (17 samples, 0.92%)</title><rect x="12.5" y="645" width="10.9" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="15.55" y="655.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (3 samples, 0.16%)</title><rect x="488.5" y="453" width="1.9" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="491.50" y="463.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getValueOnEdge(llvm:: (9 samples, 0.49%)</title><rect x="415.2" y="469" width="5.8" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="418.23" y="479.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (1 samples, 0.05%)</title><rect x="1119.9" y="453" width="0.7" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="1122.91" y="463.5" ></text>
</g>
<g >
<title>`llvm::SimplifyGEPInst(llvm::Type*, llvm::ArrayRef&lt;llvm::Value*&gt; (1 samples, 0.05%)</title><rect x="494.9" y="485" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="497.87" y="495.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::BasicBlock*, llvm:: (7 samples, 0.38%)</title><rect x="665.6" y="421" width="4.5" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="668.63" y="431.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="397.4" y="453" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="400.39" y="463.5" ></text>
</g>
<g >
<title>`llvm::PointerType::get(llvm::Type*, unsigned int) (1 samples, 0.05%)</title><rect x="29.1" y="501" width="0.7" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="32.11" y="511.5" ></text>
</g>
<g >
<title>`llvm::po_iterator&lt;llvm::DomTreeNodeBase&lt;llvm::BasicBlock&gt; const (1 samples, 0.05%)</title><rect x="147.0" y="613" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="149.99" y="623.5" ></text>
</g>
<g >
<title>`std::__1::__function::__func&lt;combineInstructionsOverFunction(ll (1 samples, 0.05%)</title><rect x="524.8" y="437" width="0.7" height="15.0" fill="rgb(65,213,65)" rx="2" ry="2" />
<text  x="527.82" y="447.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="1174.7" y="501" width="0.6" height="15.0" fill="rgb(189,189,55)" rx="2" ry="2" />
<text  x="1177.71" y="511.5" ></text>
</g>
<g >
<title>`llvm::Instruction::isIdenticalToWhenDefined(llvm::Instruction c (1 samples, 0.05%)</title><rect x="349.6" y="549" width="0.6" height="15.0" fill="rgb(96,243,96)" rx="2" ry="2" />
<text  x="352.60" y="559.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SimplifyCFGOpt::SimplifyCondBranch(llvm: (2 samples, 0.11%)</title><rect x="1169.0" y="485" width="1.2" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="1171.97" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::find_imp(void const*) const (1 samples, 0.05%)</title><rect x="14.5" y="485" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="17.46" y="495.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (2 samples, 0.11%)</title><rect x="668.8" y="325" width="1.3" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="671.81" y="335.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="409.5" y="293" width="0.6" height="15.0" fill="rgb(182,182,52)" rx="2" ry="2" />
<text  x="412.49" y="303.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="309.5" y="533" width="0.6" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="312.46" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (2 samples, 0.11%)</title><rect x="92.2" y="437" width="1.3" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="95.19" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoCache::hasCachedValueInfo(l (1 samples, 0.05%)</title><rect x="415.9" y="437" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="418.86" y="447.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::computeForAddSub(bool, bool, llvm::KnownBits c (1 samples, 0.05%)</title><rect x="519.7" y="453" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="522.72" y="463.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::removeInstruction(llvm::Instruct (1 samples, 0.05%)</title><rect x="598.7" y="421" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="601.73" y="431.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, llvm (1 samples, 0.05%)</title><rect x="603.8" y="437" width="0.7" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="606.82" y="447.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorBase::grow_pod(void*, unsigned long, unsigned  (1 samples, 0.05%)</title><rect x="259.8" y="565" width="0.6" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="262.76" y="575.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="188.4" y="341" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="191.40" y="351.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="209.4" y="437" width="0.7" height="15.0" fill="rgb(188,188,54)" rx="2" ry="2" />
<text  x="212.43" y="447.5" ></text>
</g>
<g >
<title>`llvm::PopulateLoopsDFS&lt;llvm::BasicBlock, llvm::Loop&gt;::traverse( (4 samples, 0.22%)</title><rect x="563.0" y="517" width="2.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="566.05" y="527.5" ></text>
</g>
<g >
<title>`llvm::formLCSSAForInstructions(llvm::SmallVectorImpl&lt;llvm::Inst (1 samples, 0.05%)</title><rect x="250.2" y="597" width="0.6" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="253.21" y="607.5" ></text>
</g>
<g >
<title>`llvm::ValueSymbolTable::createValueName(llvm::StringRef, llvm:: (1 samples, 0.05%)</title><rect x="412.0" y="405" width="0.7" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="415.04" y="415.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (9 samples, 0.49%)</title><rect x="68.0" y="565" width="5.7" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="70.98" y="575.5" ></text>
</g>
<g >
<title>`llvm::isDereferenceableAndAlignedPointer(llvm::Value const*, un (1 samples, 0.05%)</title><rect x="715.3" y="453" width="0.7" height="15.0" fill="rgb(69,218,69)" rx="2" ry="2" />
<text  x="718.32" y="463.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (11 samples, 0.59%)</title><rect x="533.1" y="469" width="7.0" height="15.0" fill="rgb(94,241,94)" rx="2" ry="2" />
<text  x="536.10" y="479.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="217.7" y="309" width="0.6" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="220.71" y="319.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="271.9" y="453" width="0.6" height="15.0" fill="rgb(180,180,52)" rx="2" ry="2" />
<text  x="274.87" y="463.5" ></text>
</g>
<g >
<title>`llvm::Value::destroyValueName() (2 samples, 0.11%)</title><rect x="1176.6" y="629" width="1.3" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="1179.62" y="639.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv_ov(llvm::APInt const&amp;, bool&amp;) const (1 samples, 0.05%)</title><rect x="505.7" y="373" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="508.70" y="383.5" ></text>
</g>
<g >
<title>`SimplifyCastInst(unsigned int, llvm::Value*, llvm::Type*, llvm: (1 samples, 0.05%)</title><rect x="108.8" y="453" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="111.76" y="463.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getABITypeAlignment(llvm::Type*) const (1 samples, 0.05%)</title><rect x="468.1" y="437" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="471.11" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::StripPtrCastKeepAS(llvm::Constant*, llvm (1 samples, 0.05%)</title><rect x="448.4" y="469" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="451.36" y="479.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;llvm::Value*, llvm::Opt (1 samples, 0.05%)</title><rect x="1138.4" y="453" width="0.6" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="1141.39" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantRange::makeExactICmpRegion(llvm::CmpInst::Predica (1 samples, 0.05%)</title><rect x="101.1" y="549" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="104.11" y="559.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoCache::isOverdefined(llvm:: (3 samples, 0.16%)</title><rect x="380.2" y="405" width="1.9" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="383.18" y="415.5" ></text>
</g>
<g >
<title>`char* llvm::hashing::detail::hash_combine_recursive_helper::com (1 samples, 0.05%)</title><rect x="391.0" y="421" width="0.7" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="394.02" y="431.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (2 samples, 0.11%)</title><rect x="47.6" y="565" width="1.3" height="15.0" fill="rgb(225,225,68)" rx="2" ry="2" />
<text  x="50.59" y="575.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::Constant*, llvm::Co (1 samples, 0.05%)</title><rect x="274.4" y="565" width="0.7" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="277.42" y="575.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (2 samples, 0.11%)</title><rect x="31.0" y="565" width="1.3" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="34.03" y="575.5" ></text>
</g>
<g >
<title>`void llvm::DomTreeBuilder::Calculate&lt;llvm::DominatorTreeBase&lt;ll (1 samples, 0.05%)</title><rect x="240.0" y="645" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="243.01" y="655.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (20 samples, 1.08%)</title><rect x="441.3" y="517" width="12.8" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="444.35" y="527.5" ></text>
</g>
<g >
<title>`llvm::GlobalDCEPass::MarkLive(llvm::GlobalValue&amp;, llvm::SmallVe (1 samples, 0.05%)</title><rect x="241.3" y="645" width="0.6" height="15.0" fill="rgb(83,231,83)" rx="2" ry="2" />
<text  x="244.29" y="655.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="257.2" y="469" width="0.7" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="260.21" y="479.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoCache::isOverdefined(llvm:: (2 samples, 0.11%)</title><rect x="13.8" y="517" width="1.3" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="16.82" y="527.5" ></text>
</g>
<g >
<title>`llvm::MemoryLocation::getOrNone(llvm::Instruction const*) (1 samples, 0.05%)</title><rect x="670.7" y="437" width="0.7" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="673.72" y="447.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="90.9" y="501" width="0.7" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="93.92" y="511.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="647.1" y="245" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="650.15" y="255.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*) (2 samples, 0.11%)</title><rect x="345.1" y="645" width="1.3" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="348.14" y="655.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (7 samples, 0.38%)</title><rect x="616.6" y="261" width="4.4" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="619.57" y="271.5" ></text>
</g>
<g >
<title>`top.lsp-top130^522^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1717" width="1180.0" height="15.0" fill="rgb(65,179,179)" rx="2" ry="2" />
<text  x="13.00" y="1727.5" >`top.lsp-top130^522^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::InstCombiner::visitStoreInst(llvm::StoreInst&amp;) (9 samples, 0.49%)</title><rect x="1139.7" y="501" width="5.7" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="1142.67" y="511.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::zextOrTrunc(unsigned int) (1 samples, 0.05%)</title><rect x="120.2" y="405" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="123.23" y="415.5" ></text>
</g>
<g >
<title>`llvm::PHITransAddr::PHITranslateValue(llvm::BasicBlock*, llvm:: (1 samples, 0.05%)</title><rect x="662.4" y="421" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="665.44" y="431.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeBase&lt;llvm::BasicBlock, false&gt;::updateDFSNumb (1 samples, 0.05%)</title><rect x="562.4" y="501" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="565.41" y="511.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::Instruction*, unsigned int, llvm::DenseMap (1 samples, 0.05%)</title><rect x="753.6" y="501" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="756.55" y="511.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getSinglePredecessor() const (1 samples, 0.05%)</title><rect x="672.0" y="453" width="0.6" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="675.00" y="463.5" ></text>
</g>
<g >
<title>`free_small (1 samples, 0.05%)</title><rect x="1167.1" y="485" width="0.6" height="15.0" fill="rgb(183,183,53)" rx="2" ry="2" />
<text  x="1170.06" y="495.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="212.0" y="517" width="0.6" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="214.98" y="527.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (5 samples, 0.27%)</title><rect x="55.9" y="581" width="3.2" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="58.87" y="591.5" ></text>
</g>
<g >
<title>`llvm::MDNode::classof(llvm::Metadata const*) (1 samples, 0.05%)</title><rect x="76.9" y="549" width="0.6" height="15.0" fill="rgb(72,221,72)" rx="2" ry="2" />
<text  x="79.90" y="559.5" ></text>
</g>
<g >
<title>`foldOrCommuteConstant(llvm::Instruction::BinaryOps, llvm::Value (1 samples, 0.05%)</title><rect x="1091.2" y="469" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="1094.24" y="479.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (1 samples, 0.05%)</title><rect x="119.6" y="549" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="122.59" y="559.5" ></text>
</g>
<g >
<title>`llvm::Loop::isRecursivelyLCSSAForm(llvm::DominatorTree&amp;, llvm:: (2 samples, 0.11%)</title><rect x="141.9" y="629" width="1.3" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="144.89" y="639.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getValueOnEdge(llvm:: (6 samples, 0.32%)</title><rect x="18.9" y="581" width="3.8" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="21.92" y="591.5" ></text>
</g>
<g >
<title>`llvm::LPPassManager::runOnFunction(llvm::Function&amp;) (8 samples, 0.43%)</title><rect x="333.7" y="645" width="5.1" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="336.67" y="655.5" ></text>
</g>
<g >
<title>`llvm::DenseMapInfo&lt;std::__1::pair&lt;llvm::MemoryLocation, llvm::M (1 samples, 0.05%)</title><rect x="622.9" y="245" width="0.7" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="625.94" y="255.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (6 samples, 0.32%)</title><rect x="546.5" y="485" width="3.8" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="549.48" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;llvm::BasicBlock*, true&gt;::push_ba (1 samples, 0.05%)</title><rect x="746.5" y="501" width="0.7" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="749.54" y="511.5" ></text>
</g>
<g >
<title>`free_tiny (1 samples, 0.05%)</title><rect x="701.3" y="485" width="0.6" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="704.31" y="495.5" ></text>
</g>
<g >
<title>`tiny_free_no_lock (1 samples, 0.05%)</title><rect x="222.8" y="437" width="0.6" height="15.0" fill="rgb(177,177,50)" rx="2" ry="2" />
<text  x="225.81" y="447.5" ></text>
</g>
<g >
<title>`llvm::APInt::isMinSignedValue() const (1 samples, 0.05%)</title><rect x="449.0" y="453" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="452.00" y="463.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::BasicBlock*, llvm:: (1 samples, 0.05%)</title><rect x="350.2" y="565" width="0.7" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="353.24" y="575.5" ></text>
</g>
<g >
<title>`ComputeNumSignBitsImpl(llvm::Value const*, unsigned int, (anony (1 samples, 0.05%)</title><rect x="486.0" y="437" width="0.6" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="488.95" y="447.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&amp; (1 samples, 0.05%)</title><rect x="106.2" y="469" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="109.21" y="479.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::add(llvm::LoadInst*) (2 samples, 0.11%)</title><rect x="556.7" y="485" width="1.2" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="559.67" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (7 samples, 0.38%)</title><rect x="296.1" y="469" width="4.4" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="299.08" y="479.5" ></text>
</g>
<g >
<title>`getFoldedCast(llvm::Instruction::CastOps, llvm::Constant*, llvm (2 samples, 0.11%)</title><rect x="59.1" y="581" width="1.2" height="15.0" fill="rgb(106,252,106)" rx="2" ry="2" />
<text  x="62.06" y="591.5" ></text>
</g>
<g >
<title>`llvm::APInt::clearUnusedBits() (1 samples, 0.05%)</title><rect x="292.9" y="549" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="295.89" y="559.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::Call (1 samples, 0.05%)</title><rect x="368.1" y="533" width="0.6" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="371.08" y="543.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (1 samples, 0.05%)</title><rect x="628.7" y="277" width="0.6" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="631.67" y="287.5" ></text>
</g>
<g >
<title>`getFoldedCast(llvm::Instruction::CastOps, llvm::Constant*, llvm (2 samples, 0.11%)</title><rect x="766.9" y="469" width="1.3" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="769.93" y="479.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="867.6" y="389" width="0.6" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="870.60" y="399.5" ></text>
</g>
<g >
<title>`llvm::po_iterator&lt;llvm::BasicBlock*, llvm::SmallPtrSet&lt;llvm::Ba (1 samples, 0.05%)</title><rect x="1160.7" y="501" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="1163.69" y="511.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::assignExpNewValueNum(llvm::GVN::Expressi (7 samples, 0.38%)</title><rect x="164.2" y="549" width="4.5" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="167.19" y="559.5" ></text>
</g>
<g >
<title>`llvm::MetadataTracking::track(void*, llvm::Metadata&amp;, llvm::Poi (1 samples, 0.05%)</title><rect x="480.2" y="485" width="0.7" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="483.22" y="495.5" ></text>
</g>
<g >
<title>`small_malloc_should_clear (1 samples, 0.05%)</title><rect x="350.2" y="453" width="0.7" height="15.0" fill="rgb(184,184,53)" rx="2" ry="2" />
<text  x="353.24" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (1 samples, 0.05%)</title><rect x="217.7" y="437" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="220.71" y="447.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::BasicBlock*, llvm::DomTreeBuilder::SemiNCA (1 samples, 0.05%)</title><rect x="50.1" y="565" width="0.7" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="53.14" y="575.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std:: (1 samples, 0.05%)</title><rect x="676.5" y="405" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="679.46" y="415.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="296.7" y="453" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="299.72" y="463.5" ></text>
</g>
<g >
<title>`llvm::BlockFrequencyInfoWrapperPass::runOnFunction(llvm::Functi (1 samples, 0.05%)</title><rect x="740.8" y="549" width="0.6" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="743.81" y="559.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (5 samples, 0.27%)</title><rect x="546.5" y="469" width="3.2" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="549.48" y="479.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1124.4" y="325" width="0.6" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="1127.37" y="335.5" ></text>
</g>
<g >
<title>`llvm::ConstantRange::makeAllowedICmpRegion(llvm::CmpInst::Predi (1 samples, 0.05%)</title><rect x="234.9" y="565" width="0.7" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="237.91" y="575.5" ></text>
</g>
<g >
<title>`getFromRangeMetadata(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="414.6" y="485" width="0.6" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="417.59" y="495.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::run() (98 samples, 5.29%)</title><rect x="268.7" y="613" width="62.4" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="271.68" y="623.5" >`llvm:..</text>
</g>
<g >
<title>`DO-TIME^CORE^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="1509" width="1180.0" height="15.0" fill="rgb(67,181,181)" rx="2" ry="2" />
<text  x="13.00" y="1519.5" >`DO-TIME^CORE^FN^^</text>
</g>
<g >
<title>`computeKnownBitsAddSub(bool, llvm::Value const*, llvm::Value co (1 samples, 0.05%)</title><rect x="375.1" y="341" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="378.09" y="351.5" ></text>
</g>
<g >
<title>`llvm::iplist_impl&lt;llvm::simple_ilist&lt;llvm::Function&gt;, llvm::Sym (1 samples, 0.05%)</title><rect x="1179.2" y="741" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="1182.17" y="751.5" ></text>
</g>
<g >
<title>`llvm::GVN::runImpl(llvm::Function&amp;, llvm::AssumptionCache&amp;, llv (182 samples, 9.83%)</title><rect x="584.7" y="533" width="116.0" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="587.71" y="543.5" >`llvm::GVN::ru..</text>
</g>
<g >
<title>`(anonymous namespace)::CastGEPIndices(llvm::Type*, llvm::ArrayR (1 samples, 0.05%)</title><rect x="559.2" y="421" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="562.22" y="431.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObjects(llvm::Value*, llvm::SmallVectorImpl&lt; (14 samples, 0.76%)</title><rect x="498.7" y="453" width="8.9" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="501.69" y="463.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::apint_match::match&lt;llvm::Value&gt;(llvm:: (1 samples, 0.05%)</title><rect x="1123.1" y="469" width="0.6" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="1126.10" y="479.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="680.3" y="373" width="0.6" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="683.28" y="383.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (2 samples, 0.11%)</title><rect x="134.2" y="501" width="1.3" height="15.0" fill="rgb(84,232,84)" rx="2" ry="2" />
<text  x="137.24" y="511.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (3 samples, 0.16%)</title><rect x="65.4" y="533" width="1.9" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="68.43" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LoopSimplify::runOnFunction(llvm::Functi (2 samples, 0.11%)</title><rect x="426.7" y="549" width="1.3" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="429.70" y="559.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LCSSAWrapperPass::runOnFunction(llvm::Fu (1 samples, 0.05%)</title><rect x="250.2" y="645" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="253.21" y="655.5" ></text>
</g>
<g >
<title>`llvm::hoistRegion(llvm::DomTreeNodeBase&lt;llvm::BasicBlock&gt;*, llv (1 samples, 0.05%)</title><rect x="1159.4" y="501" width="0.7" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="1162.42" y="511.5" ></text>
</g>
<g >
<title>`llvm::FindAvailablePtrLoadStore(llvm::Value*, llvm::Type*, bool (5 samples, 0.27%)</title><rect x="526.7" y="469" width="3.2" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="529.73" y="479.5" ></text>
</g>
<g >
<title>`llvm::BranchInst::cloneImpl() const (1 samples, 0.05%)</title><rect x="716.6" y="453" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="719.60" y="463.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::eraseInstFromFunction(llvm::Instruction&amp;) (1 samples, 0.05%)</title><rect x="775.2" y="501" width="0.7" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="778.22" y="511.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (2 samples, 0.11%)</title><rect x="512.7" y="437" width="1.3" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="515.71" y="447.5" ></text>
</g>
<g >
<title>`void llvm::SmallVectorImpl&lt;llvm::WeakTrackingVH&gt;::emplace_back&lt; (1 samples, 0.05%)</title><rect x="1090.6" y="485" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="1093.60" y="495.5" ></text>
</g>
<g >
<title>`llvm::df_iterator&lt;llvm::BasicBlock*, llvm::df_iterator_default_ (1 samples, 0.05%)</title><rect x="735.1" y="517" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="738.08" y="527.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;std::__1::pair&lt;unsigned int, llvm::B (1 samples, 0.05%)</title><rect x="698.1" y="453" width="0.7" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="701.12" y="463.5" ></text>
</g>
<g >
<title>`llvm::CallGraph::addToCallGraph(llvm::Function*) (2 samples, 0.11%)</title><rect x="243.8" y="645" width="1.3" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="246.83" y="655.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitCallSite(llvm::CallSite) (7 samples, 0.38%)</title><rect x="1093.2" y="485" width="4.4" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="1096.15" y="495.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="744.6" y="421" width="0.7" height="15.0" fill="rgb(229,229,69)" rx="2" ry="2" />
<text  x="747.63" y="431.5" ></text>
</g>
<g >
<title>`char* llvm::hashing::detail::hash_combine_recursive_helper::com (1 samples, 0.05%)</title><rect x="59.7" y="485" width="0.6" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="62.70" y="495.5" ></text>
</g>
<g >
<title>`optimizeGlobalsInModule(llvm::Module&amp;, llvm::DataLayout const&amp;, (2 samples, 0.11%)</title><rect x="726.8" y="565" width="1.3" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="729.79" y="575.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::phiTranslate(llvm::BasicBlock const*, ll (5 samples, 0.27%)</title><rect x="695.6" y="485" width="3.2" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="698.57" y="495.5" ></text>
</g>
<g >
<title>`llvm::SplitCriticalEdge(llvm::TerminatorInst*, unsigned int, ll (1 samples, 0.05%)</title><rect x="176.9" y="517" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="179.93" y="527.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (27 samples, 1.46%)</title><rect x="614.7" y="357" width="17.2" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="617.65" y="367.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatt (1 samples, 0.05%)</title><rect x="367.4" y="581" width="0.7" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="370.44" y="591.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, ll (1 samples, 0.05%)</title><rect x="106.2" y="501" width="0.6" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="109.21" y="511.5" ></text>
</g>
<g >
<title>`llvm::SSAUpdaterImpl&lt;llvm::SSAUpdater&gt;::GetValue(llvm::BasicBlo (1 samples, 0.05%)</title><rect x="424.8" y="453" width="0.6" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="427.78" y="463.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="1168.3" y="501" width="0.7" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="1171.34" y="511.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitStoreInst(llvm::StoreInst&amp;) (1 samples, 0.05%)</title><rect x="119.6" y="597" width="0.6" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="122.59" y="607.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="224.1" y="485" width="0.6" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="227.08" y="495.5" ></text>
</g>
<g >
<title>`llvm::Instruction::mayWriteToMemory() const (1 samples, 0.05%)</title><rect x="400.6" y="533" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="403.57" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getValueInBlock(llvm: (6 samples, 0.32%)</title><rect x="13.2" y="597" width="3.8" height="15.0" fill="rgb(75,222,75)" rx="2" ry="2" />
<text  x="16.19" y="607.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, (anonymou (1 samples, 0.05%)</title><rect x="371.3" y="501" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="374.26" y="511.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="435.6" y="501" width="0.7" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="438.62" y="511.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, unsigned  (3 samples, 0.16%)</title><rect x="769.5" y="501" width="1.9" height="15.0" fill="rgb(53,202,53)" rx="2" ry="2" />
<text  x="772.48" y="511.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="264.9" y="549" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="267.86" y="559.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv_ov(llvm::APInt const&amp;, bool&amp;) const (1 samples, 0.05%)</title><rect x="747.8" y="469" width="0.7" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="750.82" y="479.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::GVN::Expression, unsigned int&gt; (1 samples, 0.05%)</title><rect x="167.4" y="517" width="0.6" height="15.0" fill="rgb(100,245,100)" rx="2" ry="2" />
<text  x="170.38" y="527.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitAnd(llvm::BinaryOperator&amp;) (2 samples, 0.11%)</title><rect x="484.0" y="501" width="1.3" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="487.04" y="511.5" ></text>
</g>
<g >
<title>`computeUnsignedMinMaxValuesFromKnownBits(llvm::KnownBits const&amp; (1 samples, 0.05%)</title><rect x="517.2" y="469" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="520.17" y="479.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (2 samples, 0.11%)</title><rect x="374.4" y="453" width="1.3" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="377.45" y="463.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::isKnownPredicateViaConstantRanges(llvm:: (1 samples, 0.05%)</title><rect x="132.3" y="565" width="0.7" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="135.33" y="575.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::phiTranslateImpl(llvm::BasicBlock const* (2 samples, 0.11%)</title><rect x="227.3" y="565" width="1.2" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="230.27" y="575.5" ></text>
</g>
<g >
<title>`llvm::LibCallSimplifier::optimizeCall(llvm::CallInst*) (1 samples, 0.05%)</title><rect x="1093.8" y="453" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="1096.79" y="463.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitStoreInst(llvm::StoreInst&amp;) (1 samples, 0.05%)</title><rect x="543.9" y="501" width="0.7" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="546.93" y="511.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="122.8" y="501" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="125.78" y="511.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="498.1" y="389" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="501.06" y="399.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="685.4" y="261" width="0.6" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="688.38" y="271.5" ></text>
</g>
<g >
<title>`llvm::Twine::toStringRef(llvm::SmallVectorImpl&lt;char&gt;&amp;) const (1 samples, 0.05%)</title><rect x="705.8" y="437" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="708.77" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getBlockValue(llvm::V (1 samples, 0.05%)</title><rect x="20.8" y="517" width="0.7" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="23.83" y="527.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SCCPSolver::getValueState(llvm::Value*) (2 samples, 0.11%)</title><rect x="710.2" y="501" width="1.3" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="713.23" y="511.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::createSCEV(llvm::Value*) (1 samples, 0.05%)</title><rect x="131.1" y="437" width="0.6" height="15.0" fill="rgb(71,220,71)" rx="2" ry="2" />
<text  x="134.06" y="447.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitLoadInst(llvm::LoadInst&amp;) (24 samples, 1.30%)</title><rect x="524.8" y="501" width="15.3" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="527.82" y="511.5" ></text>
</g>
<g >
<title>`llvm::getObjectSize(llvm::Value const*, unsigned long long&amp;, ll (1 samples, 0.05%)</title><rect x="644.6" y="277" width="0.6" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="647.60" y="287.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="375.1" y="325" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="378.09" y="335.5" ></text>
</g>
<g >
<title>`llvm::APInt::compare(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="187.1" y="357" width="0.7" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="190.13" y="367.5" ></text>
</g>
<g >
<title>`llvm::Value::getPointerAlignment(llvm::DataLayout const&amp;) const (1 samples, 0.05%)</title><rect x="113.2" y="501" width="0.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="116.22" y="511.5" ></text>
</g>
<g >
<title>`llvm::simplifyLoop(llvm::Loop*, llvm::DominatorTree*, llvm::Loo (1 samples, 0.05%)</title><rect x="427.3" y="533" width="0.7" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="430.33" y="543.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::u (1 samples, 0.05%)</title><rect x="410.1" y="341" width="0.7" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="413.13" y="351.5" ></text>
</g>
<g >
<title>`combineInstructionsOverFunction(llvm::Function&amp;, llvm::InstComb (646 samples, 34.88%)</title><rect x="747.2" y="533" width="411.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="750.18" y="543.5" >`combineInstructionsOverFunction(llvm::Function&amp;, llvm::..</text>
</g>
<g >
<title>`(anonymous namespace)::SimplifyCFGOpt::run(llvm::BasicBlock*) (3 samples, 0.16%)</title><rect x="349.0" y="597" width="1.9" height="15.0" fill="rgb(88,234,88)" rx="2" ry="2" />
<text  x="351.96" y="607.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="768.2" y="453" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="771.21" y="463.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="196.7" y="389" width="0.6" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="199.68" y="399.5" ></text>
</g>
<g >
<title>`llvm::po_iterator&lt;llvm::DomTreeNodeBase&lt;llvm::BasicBlock&gt; const (1 samples, 0.05%)</title><rect x="1161.3" y="517" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="1164.33" y="527.5" ></text>
</g>
<g >
<title>`llvm::CallGraph::CallGraph(llvm::Module&amp;) (2 samples, 0.11%)</title><rect x="243.8" y="661" width="1.3" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="246.83" y="671.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldICmpWithZero(llvm::ICmpInst&amp;) (1 samples, 0.05%)</title><rect x="776.5" y="501" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="779.49" y="511.5" ></text>
</g>
<g >
<title>`sanitizeFunctionName(llvm::StringRef) (1 samples, 0.05%)</title><rect x="288.4" y="501" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="291.43" y="511.5" ></text>
</g>
<g >
<title>`llvm::AttributeList::hasAttribute(unsigned int, llvm::Attribute (1 samples, 0.05%)</title><rect x="743.4" y="485" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="746.36" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="700.0" y="469" width="0.7" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="703.03" y="479.5" ></text>
</g>
<g >
<title>`llvm::Module::dropAllReferences() (5 samples, 0.27%)</title><rect x="1176.0" y="741" width="3.2" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="1178.98" y="751.5" ></text>
</g>
<g >
<title>`bool llvm::CallInst::hasFnAttrImpl&lt;llvm::Attribute::AttrKind&gt;(l (1 samples, 0.05%)</title><rect x="617.8" y="117" width="0.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="620.84" y="127.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="507.6" y="421" width="0.7" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="510.61" y="431.5" ></text>
</g>
<g >
<title>`llvm::AAResultsWrapperPass::runOnFunction(llvm::Function&amp;) (2 samples, 0.11%)</title><rect x="43.1" y="645" width="1.3" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="46.13" y="655.5" ></text>
</g>
<g >
<title>`_platform_memmove$VARIANT$Nehalem (1 samples, 0.05%)</title><rect x="183.3" y="421" width="0.6" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="186.30" y="431.5" ></text>
</g>
<g >
<title>`llvm::LoopInfoWrapperPass::runOnFunction(llvm::Function&amp;) (5 samples, 0.27%)</title><rect x="338.8" y="645" width="3.2" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="341.77" y="655.5" ></text>
</g>
<g >
<title>`llvm::GVN::AnalyzeLoadAvailability(llvm::LoadInst*, llvm::Small (1 samples, 0.05%)</title><rect x="176.3" y="549" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="179.30" y="559.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SCCPSolver::getValueState(llvm::Value*) (1 samples, 0.05%)</title><rect x="364.3" y="629" width="0.6" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="367.25" y="639.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::addUnknown(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="557.9" y="485" width="0.7" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="560.95" y="495.5" ></text>
</g>
<g >
<title>`llvm::IRBuilder&lt;llvm::ConstantFolder, llvm::IRBuilderDefaultIns (1 samples, 0.05%)</title><rect x="236.8" y="565" width="0.7" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="239.83" y="575.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, llvm (1 samples, 0.05%)</title><rect x="593.0" y="421" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="595.99" y="431.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (1 samples, 0.05%)</title><rect x="280.8" y="549" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="283.79" y="559.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (3 samples, 0.16%)</title><rect x="691.7" y="437" width="2.0" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="694.75" y="447.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (4 samples, 0.22%)</title><rect x="1141.6" y="437" width="2.5" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="1144.58" y="447.5" ></text>
</g>
<g >
<title>`std::__1::vector&lt;llvm::Constant*, std::__1::allocator&lt;llvm::Con (1 samples, 0.05%)</title><rect x="396.7" y="421" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="399.75" y="431.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::findAnalysisPass(void const*, bool) (1 samples, 0.05%)</title><rect x="43.1" y="613" width="0.7" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="46.13" y="623.5" ></text>
</g>
<g >
<title>`stripAndComputeConstantOffsets(llvm::DataLayout const&amp;, llvm::V (1 samples, 0.05%)</title><rect x="27.8" y="565" width="0.7" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="30.84" y="575.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="90.9" y="437" width="0.7" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="93.92" y="447.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatticeElement, llvm::D (1 samples, 0.05%)</title><rect x="17.6" y="469" width="0.7" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="20.65" y="479.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAWrapperPass::runOnModule(llvm::Module&amp;) (2 samples, 0.11%)</title><rect x="1174.7" y="581" width="1.3" height="15.0" fill="rgb(70,219,70)" rx="2" ry="2" />
<text  x="1177.71" y="591.5" ></text>
</g>
<g >
<title>`void llvm::SymbolTableListTraits&lt;llvm::Instruction&gt;::setSymTabO (2 samples, 0.11%)</title><rect x="1177.9" y="677" width="1.3" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="1180.89" y="687.5" ></text>
</g>
<g >
<title>`void std::__1::vector&lt;llvm::BasicBlock*, std::__1::allocator&lt;ll (1 samples, 0.05%)</title><rect x="440.1" y="501" width="0.6" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="443.08" y="511.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="744.6" y="469" width="0.7" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="747.63" y="479.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (3 samples, 0.16%)</title><rect x="45.7" y="597" width="1.9" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="48.68" y="607.5" ></text>
</g>
<g >
<title>`llvm::GVN::AnalyzeLoadAvailability(llvm::LoadInst*, llvm::MemDe (3 samples, 0.16%)</title><rect x="599.4" y="437" width="1.9" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="602.36" y="447.5" ></text>
</g>
<g >
<title>`unsigned int llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorT (1 samples, 0.05%)</title><rect x="746.5" y="517" width="0.7" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="749.54" y="527.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv_ov(llvm::APInt const&amp;, bool&amp;) const (1 samples, 0.05%)</title><rect x="1107.8" y="357" width="0.6" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="1110.81" y="367.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;std::__1::pair&lt;llvm::BasicBlock*, (1 samples, 0.05%)</title><rect x="39.3" y="501" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="42.31" y="511.5" ></text>
</g>
<g >
<title>`llvm::GVN::iterateOnFunction(llvm::Function&amp;) (103 samples, 5.56%)</title><rect x="161.0" y="613" width="65.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="164.00" y="623.5" >`llvm::..</text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::FindBucketFor(void const*) const (1 samples, 0.05%)</title><rect x="241.3" y="565" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="244.29" y="575.5" ></text>
</g>
<g >
<title>`szone_free_definite_size (1 samples, 0.05%)</title><rect x="22.7" y="597" width="0.7" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="25.74" y="607.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm:: (3 samples, 0.16%)</title><rect x="198.0" y="453" width="1.9" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="200.96" y="463.5" ></text>
</g>
<g >
<title>`llvm::ValueLatticeElement::markNotConstant(llvm::Constant*) (1 samples, 0.05%)</title><rect x="419.7" y="357" width="0.6" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="422.69" y="367.5" ></text>
</g>
<g >
<title>`computeKnownBitsAddSub(bool, llvm::Value const*, llvm::Value co (1 samples, 0.05%)</title><rect x="221.5" y="453" width="0.7" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="224.53" y="463.5" ></text>
</g>
<g >
<title>`bool llvm::CallInst::hasFnAttrImpl&lt;llvm::Attribute::AttrKind&gt;(l (1 samples, 0.05%)</title><rect x="557.9" y="469" width="0.7" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="560.95" y="479.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Type*, llvm::PointerTyp (1 samples, 0.05%)</title><rect x="298.0" y="405" width="0.6" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="300.99" y="415.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldICmpInstWithConstant(llvm::ICmpInst&amp;) (1 samples, 0.05%)</title><rect x="1120.6" y="485" width="0.6" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="1123.55" y="495.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="467.5" y="357" width="0.6" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="470.47" y="367.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="442.6" y="437" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="445.62" y="447.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;(anonymous namespace)::M (1 samples, 0.05%)</title><rect x="148.3" y="581" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="151.26" y="591.5" ></text>
</g>
<g >
<title>`llvm::APInt::APInt(unsigned int, unsigned long long, bool) (1 samples, 0.05%)</title><rect x="55.9" y="517" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="58.87" y="527.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (2 samples, 0.11%)</title><rect x="522.3" y="293" width="1.2" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="525.27" y="303.5" ></text>
</g>
<g >
<title>`DYLD-STUB$$_platform_memmove (1 samples, 0.05%)</title><rect x="140.6" y="501" width="0.7" height="15.0" fill="rgb(179,179,51)" rx="2" ry="2" />
<text  x="143.62" y="511.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::add(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="133.0" y="581" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="135.97" y="591.5" ></text>
</g>
<g >
<title>`llvm::Value::stripPointerCastsAndBarriers() const (1 samples, 0.05%)</title><rect x="626.8" y="277" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="629.76" y="287.5" ></text>
</g>
<g >
<title>`llvm::StringMapImpl::LookupBucketFor(llvm::StringRef) (1 samples, 0.05%)</title><rect x="703.2" y="389" width="0.7" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="706.22" y="399.5" ></text>
</g>
<g >
<title>`llvm::MetadataTracking::retrack(void*, llvm::Metadata&amp;, void*) (1 samples, 0.05%)</title><rect x="327.3" y="581" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="330.30" y="591.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (1 samples, 0.05%)</title><rect x="679.6" y="373" width="0.7" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="682.64" y="383.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (6 samples, 0.32%)</title><rect x="122.1" y="565" width="3.9" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="125.14" y="575.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (5 samples, 0.27%)</title><rect x="686.7" y="421" width="3.1" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="689.65" y="431.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, (anonymous (2 samples, 0.11%)</title><rect x="710.2" y="485" width="1.3" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="713.23" y="495.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::GVN::Expression, unsigned int, llvm::Dense (1 samples, 0.05%)</title><rect x="167.4" y="501" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="170.38" y="511.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::PostOrderFunctionAttrsLegacyPass::runOnS (1 samples, 0.05%)</title><rect x="368.7" y="565" width="0.7" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="371.71" y="575.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="309.5" y="485" width="0.6" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="312.46" y="495.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (12 samples, 0.65%)</title><rect x="615.9" y="293" width="7.7" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="618.93" y="303.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (2 samples, 0.11%)</title><rect x="247.0" y="597" width="1.3" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="250.02" y="607.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeWrapperPass::releaseMemory() (4 samples, 0.22%)</title><rect x="1163.9" y="517" width="2.5" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="1166.88" y="527.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::FoldShiftByConstant(llvm::Value*, llvm::Con (1 samples, 0.05%)</title><rect x="325.4" y="565" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="328.39" y="575.5" ></text>
</g>
<g >
<title>`combineInstructionsOverFunction(llvm::Function&amp;, llvm::InstComb (180 samples, 9.72%)</title><rect x="440.7" y="533" width="114.7" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="443.71" y="543.5" >`combineInstru..</text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="646.5" y="229" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="649.51" y="239.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::CastGEPIndices(llvm::Type*, llvm::ArrayR (2 samples, 0.11%)</title><rect x="447.1" y="469" width="1.3" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="450.08" y="479.5" ></text>
</g>
<g >
<title>`void llvm::BitstreamWriter::EmitRecord&lt;llvm::SmallVectorImpl&lt;un (2 samples, 0.11%)</title><rect x="1184.3" y="693" width="1.2" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="1187.27" y="703.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::IndVarSimplify::run(llvm::Loop*) (4 samples, 0.22%)</title><rect x="130.4" y="613" width="2.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="133.42" y="623.5" ></text>
</g>
<g >
<title>`llvm::hoistRegion(llvm::DomTreeNodeBase&lt;llvm::BasicBlock&gt;*, llv (2 samples, 0.11%)</title><rect x="559.2" y="501" width="1.3" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="562.22" y="511.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, ll (1 samples, 0.05%)</title><rect x="777.8" y="469" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="780.76" y="479.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="219.0" y="437" width="0.6" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="221.98" y="447.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::FindBucketFor(void const*) const (1 samples, 0.05%)</title><rect x="738.3" y="469" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="741.26" y="479.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::PointerIntPair&lt;llvm::Va (2 samples, 0.11%)</title><rect x="359.2" y="613" width="1.2" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="362.16" y="623.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="633.8" y="261" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="636.77" y="271.5" ></text>
</g>
<g >
<title>`llvm::LoopBase&lt;llvm::BasicBlock, llvm::Loop&gt;::getExitBlocks(llv (2 samples, 0.11%)</title><rect x="425.4" y="437" width="1.3" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="428.42" y="447.5" ></text>
</g>
<g >
<title>`llvm::SimplifyCall(llvm::ImmutableCallSite, llvm::SimplifyQuery (2 samples, 0.11%)</title><rect x="617.2" y="181" width="1.3" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="620.20" y="191.5" ></text>
</g>
<g >
<title>`llvm::LegacyInlinerBase::inlineCalls(llvm::CallGraphSCC&amp;) (1 samples, 0.05%)</title><rect x="726.2" y="565" width="0.6" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="729.16" y="575.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::Grow(unsigned int) (1 samples, 0.05%)</title><rect x="386.6" y="453" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="389.56" y="463.5" ></text>
</g>
<g >
<title>`llvm::haveNoCommonBitsSet(llvm::Value const*, llvm::Value const (1 samples, 0.05%)</title><rect x="282.7" y="581" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="285.70" y="591.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (2 samples, 0.11%)</title><rect x="392.9" y="501" width="1.3" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="395.93" y="511.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SimplifyCFGOpt::run(llvm::BasicBlock*) (17 samples, 0.92%)</title><rect x="713.4" y="501" width="10.8" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="716.41" y="511.5" ></text>
</g>
<g >
<title>`llvm::APInt::clearUnusedBits() (1 samples, 0.05%)</title><rect x="1116.1" y="421" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="1119.09" y="431.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="655.4" y="309" width="0.7" height="15.0" fill="rgb(64,212,64)" rx="2" ry="2" />
<text  x="658.43" y="319.5" ></text>
</g>
<g >
<title>`llvm::AttributeList::hasAttribute(unsigned int, llvm::Attribute (1 samples, 0.05%)</title><rect x="620.4" y="213" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="623.39" y="223.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="55.2" y="581" width="0.7" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="58.24" y="591.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SimplifyCFGOpt::SimplifyCondBranch(llvm: (1 samples, 0.05%)</title><rect x="349.0" y="581" width="0.6" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="351.96" y="591.5" ></text>
</g>
<g >
<title>`llvm::hash_value(llvm::GVN::Expression const&amp;) (3 samples, 0.16%)</title><rect x="165.5" y="501" width="1.9" height="15.0" fill="rgb(70,219,70)" rx="2" ry="2" />
<text  x="168.46" y="511.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::u (1 samples, 0.05%)</title><rect x="27.8" y="501" width="0.7" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="30.84" y="511.5" ></text>
</g>
<g >
<title>`std::__1::enable_if&lt;(__is_forward_iterator&lt;llvm::PredIterator&lt;l (1 samples, 0.05%)</title><rect x="147.6" y="613" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="150.62" y="623.5" ></text>
</g>
<g >
<title>`large_malloc (1 samples, 0.05%)</title><rect x="975.3" y="389" width="0.6" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="978.28" y="399.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorImpl&lt;unsigned int&gt;::operator=(llvm::SmallVecto (1 samples, 0.05%)</title><rect x="168.0" y="533" width="0.7" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="171.01" y="543.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;std::__1::pair&lt;llvm::Valu (1 samples, 0.05%)</title><rect x="406.9" y="453" width="0.7" height="15.0" fill="rgb(89,235,89)" rx="2" ry="2" />
<text  x="409.94" y="463.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolutionWrapperPass* llvm::Pass::getAnalysisIfAvai (1 samples, 0.05%)</title><rect x="426.7" y="533" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="429.70" y="543.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (2 samples, 0.11%)</title><rect x="1149.2" y="437" width="1.3" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="1152.22" y="447.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="652.2" y="181" width="0.7" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="655.25" y="191.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (4 samples, 0.22%)</title><rect x="263.6" y="581" width="2.5" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="266.59" y="591.5" ></text>
</g>
<g >
<title>`core::SingleDispatchCxxEffectiveMethodFunction_O::entry_point(c (6 samples, 0.32%)</title><rect x="1176.0" y="821" width="3.8" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="1178.98" y="831.5" ></text>
</g>
<g >
<title>`llvm::ValueHandleBase::~ValueHandleBase() (2 samples, 0.11%)</title><rect x="924.9" y="469" width="1.3" height="15.0" fill="rgb(69,218,69)" rx="2" ry="2" />
<text  x="927.95" y="479.5" ></text>
</g>
<g >
<title>`llvm::Type::getPrimitiveSizeInBits() const (1 samples, 0.05%)</title><rect x="126.6" y="581" width="0.6" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="129.60" y="591.5" ></text>
</g>
<g >
<title>`COMPILE-FILE-SERIAL^COMPILER^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="1429" width="1180.0" height="15.0" fill="rgb(54,169,169)" rx="2" ry="2" />
<text  x="13.00" y="1439.5" >`COMPILE-FILE-SERIAL^COMPILER^FN^^</text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="748.5" y="469" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="751.46" y="479.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="273.8" y="501" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="276.78" y="511.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="83.9" y="485" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="86.91" y="495.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::MatchBSwap(llvm::BinaryOperator&amp;) (1 samples, 0.05%)</title><rect x="323.5" y="581" width="0.6" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="326.48" y="591.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp_big(void const*) (1 samples, 0.05%)</title><rect x="247.0" y="517" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="250.02" y="527.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (2 samples, 0.11%)</title><rect x="745.9" y="533" width="1.3" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="748.91" y="543.5" ></text>
</g>
<g >
<title>`llvm::removeUnreachableBlocks(llvm::Function&amp;, llvm::LazyValueI (2 samples, 0.11%)</title><rect x="238.1" y="629" width="1.3" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="241.10" y="639.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (1 samples, 0.05%)</title><rect x="217.7" y="501" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="220.71" y="511.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;std::__1::pair&lt;unsigned int, llvm::BasicBlock co (1 samples, 0.05%)</title><rect x="697.5" y="405" width="0.6" height="15.0" fill="rgb(65,213,65)" rx="2" ry="2" />
<text  x="700.48" y="415.5" ></text>
</g>
<g >
<title>`DYLD-STUB$$operator delete(void*) (1 samples, 0.05%)</title><rect x="30.4" y="629" width="0.6" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="33.39" y="639.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock const*, llvm (1 samples, 0.05%)</title><rect x="255.3" y="581" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="258.30" y="591.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;llvm::DomTreeNodeBase&lt;llvm::Basic (1 samples, 0.05%)</title><rect x="140.6" y="565" width="0.7" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="143.62" y="575.5" ></text>
</g>
<g >
<title>`computeKnownBitsAddSub(bool, llvm::Value const*, llvm::Value co (2 samples, 0.11%)</title><rect x="522.3" y="389" width="1.2" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="525.27" y="399.5" ></text>
</g>
<g >
<title>`llvm::CallInst::getReturnedArgOperand() const (1 samples, 0.05%)</title><rect x="1150.5" y="437" width="0.6" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="1153.50" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (5 samples, 0.27%)</title><rect x="263.6" y="597" width="3.2" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="266.59" y="607.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatticeElement, llvm::D (2 samples, 0.11%)</title><rect x="15.7" y="517" width="1.3" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="18.73" y="527.5" ></text>
</g>
<g >
<title>`llvm::getConstantStringInfo(llvm::Value const*, llvm::StringRef (1 samples, 0.05%)</title><rect x="768.8" y="469" width="0.7" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="771.84" y="479.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::MaxMin_match&lt;llvm::ICmpInst, llvm::Pat (1 samples, 0.05%)</title><rect x="511.4" y="485" width="0.7" height="15.0" fill="rgb(106,252,106)" rx="2" ry="2" />
<text  x="514.44" y="495.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::StructType*, llvm::Stru (1 samples, 0.05%)</title><rect x="1098.9" y="469" width="0.6" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="1101.89" y="479.5" ></text>
</g>
<g >
<title>`SimplifyBSwap(llvm::BinaryOperator&amp;, llvm::IRBuilder&lt;llvm::Targ (1 samples, 0.05%)</title><rect x="113.9" y="581" width="0.6" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="116.86" y="591.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (1 samples, 0.05%)</title><rect x="540.1" y="485" width="0.6" height="15.0" fill="rgb(69,218,69)" rx="2" ry="2" />
<text  x="543.11" y="495.5" ></text>
</g>
<g >
<title>`core::core__catch_function(gctools::smart_ptr&lt;core::T_O&gt;, gctoo (1,852 samples, 100.00%)</title><rect x="10.0" y="2021" width="1180.0" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="13.00" y="2031.5" >`core::core__catch_function(gctools::smart_ptr&lt;core::T_O&gt;, gctoo</text>
</g>
<g >
<title>`getValueFromCondition(llvm::Value*, llvm::Value*, bool, llvm::D (1 samples, 0.05%)</title><rect x="406.3" y="341" width="0.6" height="15.0" fill="rgb(51,200,51)" rx="2" ry="2" />
<text  x="409.31" y="351.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="684.1" y="373" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="687.10" y="383.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (3 samples, 0.16%)</title><rect x="122.1" y="533" width="1.9" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="125.14" y="543.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::brc_match&lt;llvm::PatternMatch::not_matc (2 samples, 0.11%)</title><rect x="64.2" y="597" width="1.2" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="67.16" y="607.5" ></text>
</g>
<g >
<title>`llvm::CallSiteBase&lt;llvm::Function, llvm::BasicBlock, llvm::Valu (1 samples, 0.05%)</title><rect x="617.2" y="165" width="0.6" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="620.20" y="175.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getAlignment(llvm::Type*, bool) const (1 samples, 0.05%)</title><rect x="493.0" y="485" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="495.96" y="495.5" ></text>
</g>
<g >
<title>`instructionClobbersQuery(llvm::MemoryDef*, llvm::MemoryUseOrDef (1 samples, 0.05%)</title><rect x="148.9" y="581" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="151.90" y="591.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;llvm::BasicBlock*, true&gt;::push_ba (1 samples, 0.05%)</title><rect x="259.8" y="581" width="0.6" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="262.76" y="591.5" ></text>
</g>
<g >
<title>`willNotOverflow(llvm::IntrinsicInst*, llvm::LazyValueInfo*)::$_ (3 samples, 0.16%)</title><rect x="387.2" y="517" width="1.9" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="390.19" y="527.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;llvm::Instruction*, true&gt;::push_b (6 samples, 0.32%)</title><rect x="865.1" y="469" width="3.8" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="868.05" y="479.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::removeDeadPasses(llvm::Pass*, llvm::String (7 samples, 0.38%)</title><rect x="1163.2" y="549" width="4.5" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="1166.24" y="559.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="498.1" y="325" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="501.06" y="335.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (4 samples, 0.22%)</title><rect x="1109.1" y="341" width="2.5" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="1112.08" y="351.5" ></text>
</g>
<g >
<title>`llvm::TrackingMDRef::operator=(llvm::TrackingMDRef&amp;&amp;) (1 samples, 0.05%)</title><rect x="327.3" y="597" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="330.30" y="607.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1116.7" y="405" width="0.7" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="1119.73" y="415.5" ></text>
</g>
<g >
<title>`llvm::JumpThreadingPass::ComputeValueKnownInPredecessors(llvm:: (1 samples, 0.05%)</title><rect x="406.3" y="453" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="409.31" y="463.5" ></text>
</g>
<g >
<title>`std::__1::enable_if&lt;is_hashable_data&lt;llvm::Metadata* const&gt;::va (1 samples, 0.05%)</title><rect x="34.8" y="357" width="0.7" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="37.85" y="367.5" ></text>
</g>
<g >
<title>`small_malloc_from_free_list (1 samples, 0.05%)</title><rect x="612.7" y="293" width="0.7" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="615.74" y="303.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObjects(llvm::Value*, llvm::SmallVectorImpl&lt; (1 samples, 0.05%)</title><rect x="405.0" y="437" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="408.03" y="447.5" ></text>
</g>
<g >
<title>`llvm::APInt::operator-=(llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="296.1" y="453" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="299.08" y="463.5" ></text>
</g>
<g >
<title>`small_malloc_should_clear (1 samples, 0.05%)</title><rect x="638.2" y="293" width="0.7" height="15.0" fill="rgb(191,191,55)" rx="2" ry="2" />
<text  x="641.23" y="303.5" ></text>
</g>
<g >
<title>`llvm::PrettyStackTraceEntry::PrettyStackTraceEntry() (1 samples, 0.05%)</title><rect x="583.4" y="549" width="0.7" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="586.43" y="559.5" ></text>
</g>
<g >
<title>`ThreadCmpOverSelect(llvm::CmpInst::Predicate, llvm::Value*, llv (1 samples, 0.05%)</title><rect x="217.7" y="533" width="0.6" height="15.0" fill="rgb(95,242,95)" rx="2" ry="2" />
<text  x="220.71" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Va (1 samples, 0.05%)</title><rect x="17.6" y="549" width="0.7" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="20.65" y="559.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;std::__1::pair&lt;llvm::Bas (2 samples, 0.11%)</title><rect x="364.9" y="597" width="1.3" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="367.89" y="607.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (15 samples, 0.81%)</title><rect x="644.6" y="309" width="9.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="647.60" y="319.5" ></text>
</g>
<g >
<title>`void std::__1::__sort&lt;std::__1::__less&lt;llvm::NonLocalDepEntry,  (7 samples, 0.38%)</title><rect x="606.4" y="405" width="4.4" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="609.37" y="415.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeAllocSize(llvm::Type*) const (1 samples, 0.05%)</title><rect x="751.0" y="437" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="754.00" y="447.5" ></text>
</g>
<g >
<title>`llvm::IsConstantOffsetFromGlobal(llvm::Constant*, llvm::GlobalV (1 samples, 0.05%)</title><rect x="248.3" y="549" width="0.6" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="251.29" y="559.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::alias(llvm::MemoryLocation const&amp;, llvm::M (16 samples, 0.86%)</title><rect x="644.6" y="325" width="10.2" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="647.60" y="335.5" ></text>
</g>
<g >
<title>`computeKnownBitsAddSub(bool, llvm::Value const*, llvm::Value co (1 samples, 0.05%)</title><rect x="124.0" y="533" width="0.7" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="127.05" y="543.5" ></text>
</g>
<g >
<title>`llvm::DemandedBits::performAnalysis() (1 samples, 0.05%)</title><rect x="429.2" y="517" width="0.7" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="432.24" y="527.5" ></text>
</g>
<g >
<title>`llvm::APInt::compare(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="720.4" y="421" width="0.7" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="723.42" y="431.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (4 samples, 0.22%)</title><rect x="65.4" y="549" width="2.6" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="68.43" y="559.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldLoadFromConstPtr(llvm::Constant*, llvm::Type* (1 samples, 0.05%)</title><rect x="224.7" y="517" width="0.7" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="227.72" y="527.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="470.0" y="469" width="0.7" height="15.0" fill="rgb(59,209,59)" rx="2" ry="2" />
<text  x="473.02" y="479.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="413.3" y="389" width="0.7" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="416.32" y="399.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, ll (1 samples, 0.05%)</title><rect x="1091.9" y="421" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="1094.88" y="431.5" ></text>
</g>
<g >
<title>`small_free_list_add_ptr (1 samples, 0.05%)</title><rect x="698.1" y="437" width="0.7" height="15.0" fill="rgb(200,200,59)" rx="2" ry="2" />
<text  x="701.12" y="447.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="221.5" y="485" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="224.53" y="495.5" ></text>
</g>
<g >
<title>`llvm::formLCSSARecursively(llvm::Loop&amp;, llvm::DominatorTree&amp;, l (3 samples, 0.16%)</title><rect x="424.8" y="533" width="1.9" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="427.78" y="543.5" ></text>
</g>
<g >
<title>`tiny_free_no_lock (1 samples, 0.05%)</title><rect x="1181.1" y="661" width="0.6" height="15.0" fill="rgb(184,184,53)" rx="2" ry="2" />
<text  x="1184.08" y="671.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solveBlockValueImpl(l (6 samples, 0.32%)</title><rect x="407.6" y="421" width="3.8" height="15.0" fill="rgb(70,219,70)" rx="2" ry="2" />
<text  x="410.58" y="431.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1113.5" y="421" width="0.7" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="1116.54" y="431.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (4 samples, 0.22%)</title><rect x="192.9" y="389" width="2.5" height="15.0" fill="rgb(106,252,106)" rx="2" ry="2" />
<text  x="195.86" y="399.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="545.2" y="501" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="548.21" y="511.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::BasicBlock*&gt;::insert(llvm::BasicBlo (1 samples, 0.05%)</title><rect x="700.0" y="485" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="703.03" y="495.5" ></text>
</g>
<g >
<title>`llvm::df_iterator&lt;llvm::BasicBlock*, llvm::df_iterator_default_ (1 samples, 0.05%)</title><rect x="386.6" y="517" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="389.56" y="527.5" ></text>
</g>
<g >
<title>`llvm::CallSiteBase&lt;llvm::Function const, llvm::BasicBlock const (1 samples, 0.05%)</title><rect x="656.1" y="293" width="0.6" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="659.07" y="303.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm:: (1 samples, 0.05%)</title><rect x="148.9" y="549" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="151.90" y="559.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="1126.3" y="469" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="1129.29" y="479.5" ></text>
</g>
<g >
<title>`SimplifyWithOpReplaced(llvm::Value*, llvm::Value*, llvm::Value* (1 samples, 0.05%)</title><rect x="542.7" y="469" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="545.66" y="479.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (8 samples, 0.43%)</title><rect x="303.7" y="549" width="5.1" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="306.73" y="559.5" ></text>
</g>
<g >
<title>`core::startup_functions_invoke() (1,852 samples, 100.00%)</title><rect x="10.0" y="2165" width="1180.0" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="13.00" y="2175.5" >`core::startup_functions_invoke()</text>
</g>
<g >
<title>`llvm::CallInst::onlyReadsMemory() const (1 samples, 0.05%)</title><rect x="591.1" y="421" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="594.08" y="431.5" ></text>
</g>
<g >
<title>`llvm::JumpThreadingPass::ComputeValueKnownInPredecessors(llvm:: (3 samples, 0.16%)</title><rect x="34.2" y="581" width="1.9" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="37.21" y="591.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (5 samples, 0.27%)</title><rect x="110.7" y="549" width="3.2" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="113.67" y="559.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock const*, unsi (1 samples, 0.05%)</title><rect x="694.9" y="485" width="0.7" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="697.94" y="495.5" ></text>
</g>
<g >
<title>`void llvm::AAResults::addAAResult&lt;llvm::TypeBasedAAResult&gt;(llvm (1 samples, 0.05%)</title><rect x="43.8" y="629" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="46.77" y="639.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (3 samples, 0.16%)</title><rect x="686.7" y="389" width="1.9" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="689.65" y="399.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (7 samples, 0.38%)</title><rect x="45.7" y="613" width="4.4" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="48.68" y="623.5" ></text>
</g>
<g >
<title>`llvm::Value::getName() const (1 samples, 0.05%)</title><rect x="1094.4" y="421" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="1097.43" y="431.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (1 samples, 0.05%)</title><rect x="90.9" y="533" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="93.92" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (2 samples, 0.11%)</title><rect x="218.3" y="453" width="1.3" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="221.35" y="463.5" ></text>
</g>
<g >
<title>`top.lsp-top130^522^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1701" width="1180.0" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="13.00" y="1711.5" >`top.lsp-top130^522^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::APInt::sdiv_ov(llvm::APInt const&amp;, bool&amp;) const (1 samples, 0.05%)</title><rect x="647.1" y="69" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="650.15" y="79.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::Value*, llvm::ValueHandleBase* (2 samples, 0.11%)</title><rect x="1071.5" y="437" width="1.3" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="1074.49" y="447.5" ></text>
</g>
<g >
<title>`llvm::MaskedValueIsZero(llvm::Value const*, llvm::APInt const&amp;, (1 samples, 0.05%)</title><rect x="120.2" y="565" width="0.7" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="123.23" y="575.5" ></text>
</g>
<g >
<title>`llvm::Value::getValueName() const (1 samples, 0.05%)</title><rect x="1179.2" y="709" width="0.6" height="15.0" fill="rgb(65,213,65)" rx="2" ry="2" />
<text  x="1182.17" y="719.5" ></text>
</g>
<g >
<title>`llvm::PredicatedScalarEvolution::getBackedgeTakenCount() (1 samples, 0.05%)</title><rect x="250.8" y="533" width="0.7" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="253.84" y="543.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="439.4" y="501" width="0.7" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="442.44" y="511.5" ></text>
</g>
<g >
<title>`core::SingleDispatchCxxEffectiveMethodFunction_O::entry_point(c (562 samples, 30.35%)</title><rect x="10.0" y="741" width="358.1" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="13.00" y="751.5" >`core::SingleDispatchCxxEffectiveMethodFunction_..</text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;llvm::Function const*,  (1 samples, 0.05%)</title><rect x="352.8" y="517" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="355.79" y="527.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LoopUnswitch::runOnLoop(llvm::Loop*, llv (1 samples, 0.05%)</title><rect x="141.3" y="629" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="144.25" y="639.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitOr(llvm::BinaryOperator&amp;) (2 samples, 0.11%)</title><rect x="322.8" y="597" width="1.3" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="325.84" y="607.5" ></text>
</g>
<g >
<title>`getMaskedICmpType(llvm::Value*, llvm::Value*, llvm::Value*, llv (1 samples, 0.05%)</title><rect x="285.2" y="549" width="0.7" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="288.25" y="559.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="204.3" y="373" width="0.7" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="207.33" y="383.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (18 samples, 0.97%)</title><rect x="461.1" y="485" width="11.5" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="464.10" y="495.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::getOrCreate(llvm:: (1 samples, 0.05%)</title><rect x="273.8" y="549" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="276.78" y="559.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::DecomposeGEPExpression(llvm::Value const*, (1 samples, 0.05%)</title><rect x="647.1" y="149" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="650.15" y="159.5" ></text>
</g>
<g >
<title>`SimplifyOrInst(llvm::Value*, llvm::Value*, llvm::SimplifyQuery  (1 samples, 0.05%)</title><rect x="322.8" y="581" width="0.7" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="325.84" y="591.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::PoisoningVH&lt;llvm:: (1 samples, 0.05%)</title><rect x="373.8" y="437" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="376.81" y="447.5" ></text>
</g>
<g >
<title>`free_tiny (1 samples, 0.05%)</title><rect x="222.8" y="453" width="0.6" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="225.81" y="463.5" ></text>
</g>
<g >
<title>`llvm::DenseMapInfo&lt;std::__1::pair&lt;llvm::MemoryLocation, llvm::M (1 samples, 0.05%)</title><rect x="196.0" y="389" width="0.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="199.05" y="399.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasPHI(llvm::PHINode const*, unsigned lo (1 samples, 0.05%)</title><rect x="647.1" y="261" width="0.7" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="650.15" y="271.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Va (1 samples, 0.05%)</title><rect x="375.7" y="485" width="0.7" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="378.72" y="495.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (7 samples, 0.38%)</title><rect x="317.7" y="549" width="4.5" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="320.74" y="559.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasSelect(llvm::SelectInst const*, unsig (1 samples, 0.05%)</title><rect x="647.8" y="261" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="650.79" y="271.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::FindBucketFor(void const*) const (1 samples, 0.05%)</title><rect x="36.1" y="549" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="39.12" y="559.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SCCPSolver::visitCastInst(llvm::CastInst (1 samples, 0.05%)</title><rect x="364.3" y="645" width="0.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="367.25" y="655.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::PostOrderFunctionAttrsLegacyPass::runOnS (1 samples, 0.05%)</title><rect x="10.0" y="661" width="0.6" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasSelect(llvm::SelectInst const*, unsig (1 samples, 0.05%)</title><rect x="194.8" y="373" width="0.6" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="197.77" y="383.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldTerminator(llvm::BasicBlock*, bool, llvm::Tar (1 samples, 0.05%)</title><rect x="238.7" y="613" width="0.7" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="241.74" y="623.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::getModRefBehavior(llvm::ImmutableCallSit (1 samples, 0.05%)</title><rect x="571.3" y="453" width="0.7" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="574.33" y="463.5" ></text>
</g>
<g >
<title>`llvm::APInt::isMinSignedValue() const (1 samples, 0.05%)</title><rect x="777.1" y="485" width="0.7" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="780.13" y="495.5" ></text>
</g>
<g >
<title>`DominatesMergePoint(llvm::Value*, llvm::BasicBlock*, llvm::Smal (2 samples, 0.11%)</title><rect x="719.1" y="469" width="1.3" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="722.15" y="479.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonEqual(llvm::Value const*, llvm::Value const*, l (3 samples, 0.16%)</title><rect x="1114.8" y="469" width="1.9" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="1117.82" y="479.5" ></text>
</g>
<g >
<title>`llvm::SROA::rewritePartition(llvm::AllocaInst&amp;, llvm::sroa::All (6 samples, 0.32%)</title><rect x="704.5" y="485" width="3.8" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="707.49" y="495.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm::Mem (1 samples, 0.05%)</title><rect x="196.0" y="421" width="0.7" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="199.05" y="431.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, ll (2 samples, 0.11%)</title><rect x="518.4" y="437" width="1.3" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="521.44" y="447.5" ></text>
</g>
<g >
<title>`llvm::Type::isSizedDerivedType(llvm::SmallPtrSetImpl&lt;llvm::Type (1 samples, 0.05%)</title><rect x="1137.1" y="405" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="1140.12" y="415.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="217.7" y="469" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="220.71" y="479.5" ></text>
</g>
<g >
<title>`llvm::AnalysisManager&lt;llvm::Function&gt;::AnalysisManager(bool) (1 samples, 0.05%)</title><rect x="245.7" y="613" width="0.7" height="15.0" fill="rgb(70,219,70)" rx="2" ry="2" />
<text  x="248.75" y="623.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="361.7" y="661" width="0.6" height="15.0" fill="rgb(106,252,106)" rx="2" ry="2" />
<text  x="364.71" y="671.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm:: (1 samples, 0.05%)</title><rect x="152.1" y="581" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="155.08" y="591.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LegacyLICMPass::runOnLoop(llvm::Loop*, l (2 samples, 0.11%)</title><rect x="1158.8" y="533" width="1.3" height="15.0" fill="rgb(72,221,72)" rx="2" ry="2" />
<text  x="1161.78" y="543.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="72.4" y="533" width="0.7" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="75.44" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::FoldReinterpretLoadFromConstPtr(llvm::Co (1 samples, 0.05%)</title><rect x="300.5" y="485" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="303.54" y="495.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::findAnalysisPass(void const*, bool) (1 samples, 0.05%)</title><rect x="738.9" y="517" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="741.90" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::MapInfo::getHashVa (1 samples, 0.05%)</title><rect x="59.7" y="549" width="0.6" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="62.70" y="559.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="508.3" y="421" width="0.6" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="511.25" y="431.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getPointerTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="489.1" y="437" width="0.7" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="492.14" y="447.5" ></text>
</g>
<g >
<title>`free (2 samples, 0.11%)</title><rect x="155.9" y="581" width="1.3" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="158.91" y="591.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeWrapperPass::runOnFunction(llvm::Function&amp;) (9 samples, 0.49%)</title><rect x="45.7" y="645" width="5.7" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="48.68" y="655.5" ></text>
</g>
<g >
<title>`llvm::AssumptionCache::assumptionsFor(llvm::Value const*) (2 samples, 0.11%)</title><rect x="1142.2" y="373" width="1.3" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="1145.21" y="383.5" ></text>
</g>
<g >
<title>`llvm::po_iterator&lt;llvm::BasicBlock*, llvm::SmallPtrSet&lt;llvm::Ba (1 samples, 0.05%)</title><rect x="340.0" y="597" width="0.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="343.04" y="607.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::IntegerType*, unsigned long long,  (1 samples, 0.05%)</title><rect x="410.1" y="389" width="0.7" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="413.13" y="399.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (2 samples, 0.11%)</title><rect x="333.7" y="469" width="1.2" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="336.67" y="479.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::find_imp(void const*) const (1 samples, 0.05%)</title><rect x="387.2" y="373" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="390.19" y="383.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::alias(llvm::MemoryLocation const&amp;, llvm::M (6 samples, 0.32%)</title><rect x="593.6" y="373" width="3.9" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="596.63" y="383.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatt (2 samples, 0.11%)</title><rect x="15.7" y="501" width="1.3" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="18.73" y="511.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::getSCEVAtScope(llvm::SCEV const*, llvm:: (1 samples, 0.05%)</title><rect x="250.8" y="389" width="0.7" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="253.84" y="399.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, unsi (1 samples, 0.05%)</title><rect x="459.8" y="501" width="0.7" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="462.83" y="511.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::u (1 samples, 0.05%)</title><rect x="462.4" y="389" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="465.38" y="399.5" ></text>
</g>
<g >
<title>`llvm::isPotentiallyReachableFromMany(llvm::SmallVectorImpl&lt;llvm (3 samples, 0.16%)</title><rect x="773.3" y="453" width="1.9" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="776.30" y="463.5" ></text>
</g>
<g >
<title>`llvm::Value::destroyValueName() (1 samples, 0.05%)</title><rect x="422.2" y="469" width="0.7" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="425.24" y="479.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObjects(llvm::Value*, llvm::SmallVectorImpl&lt; (1 samples, 0.05%)</title><rect x="90.9" y="517" width="0.7" height="15.0" fill="rgb(51,200,51)" rx="2" ry="2" />
<text  x="93.92" y="527.5" ></text>
</g>
<g >
<title>`matchAccessTags(llvm::MDNode const*, llvm::MDNode const*, llvm: (1 samples, 0.05%)</title><rect x="202.4" y="357" width="0.7" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="205.42" y="367.5" ></text>
</g>
<g >
<title>`set_tiny_meta_header_in_use (1 samples, 0.05%)</title><rect x="323.5" y="453" width="0.6" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="326.48" y="463.5" ></text>
</g>
<g >
<title>`llvm::AAResults::Model&lt;llvm::TypeBasedAAResult&gt;::pointsToConsta (1 samples, 0.05%)</title><rect x="566.2" y="469" width="0.7" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="569.23" y="479.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="372.5" y="533" width="0.7" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="375.54" y="543.5" ></text>
</g>
<g >
<title>`llvm::APInt::udiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="264.9" y="533" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="267.86" y="543.5" ></text>
</g>
<g >
<title>`stripAndComputeConstantOffsets(llvm::DataLayout const&amp;, llvm::V (1 samples, 0.05%)</title><rect x="1106.5" y="421" width="0.7" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="1109.53" y="431.5" ></text>
</g>
<g >
<title>`combineInstructionsOverFunction(llvm::Function&amp;, llvm::InstComb (110 samples, 5.94%)</title><rect x="262.9" y="629" width="70.1" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="265.95" y="639.5" >`combin..</text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;llvm::Value*, llvm::Opt (1 samples, 0.05%)</title><rect x="114.5" y="549" width="0.6" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="117.49" y="559.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock const*, unsi (1 samples, 0.05%)</title><rect x="745.3" y="485" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="748.27" y="495.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getNonLocalPointerDependency(llv (106 samples, 5.72%)</title><rect x="603.8" y="453" width="67.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="606.82" y="463.5" >`llvm::..</text>
</g>
<g >
<title>`llvm::hash_value(llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="27.8" y="485" width="0.7" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="30.84" y="495.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::findAnalysisPass(void const*, bool) (1 samples, 0.05%)</title><rect x="430.5" y="533" width="0.7" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="433.52" y="543.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldICmpAndConstConst(llvm::ICmpInst&amp;, llvm (1 samples, 0.05%)</title><rect x="515.3" y="453" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="518.26" y="463.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1124.4" y="277" width="0.6" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="1127.37" y="287.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value*&gt;::find(llvm::Value const*) c (1 samples, 0.05%)</title><rect x="378.3" y="421" width="0.6" height="15.0" fill="rgb(65,213,65)" rx="2" ry="2" />
<text  x="381.27" y="431.5" ></text>
</g>
<g >
<title>`llvm::GVN::splitCriticalEdges(llvm::BasicBlock*, llvm::BasicBlo (1 samples, 0.05%)</title><rect x="601.9" y="437" width="0.6" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="604.91" y="447.5" ></text>
</g>
<g >
<title>`void std::__1::__sort&lt;std::__1::__less&lt;llvm::NonLocalDepEntry,  (2 samples, 0.11%)</title><rect x="609.6" y="373" width="1.2" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="612.56" y="383.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="640.1" y="357" width="0.7" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="643.14" y="367.5" ></text>
</g>
<g >
<title>`llvm::TargetTransformInfo::getUserCost(llvm::User const*) const (1 samples, 0.05%)</title><rect x="141.3" y="597" width="0.6" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="144.25" y="607.5" ></text>
</g>
<g >
<title>`llvm::po_iterator&lt;llvm::BasicBlock const*, llvm::SmallPtrSet&lt;ll (2 samples, 0.11%)</title><rect x="744.0" y="517" width="1.3" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="747.00" y="527.5" ></text>
</g>
<g >
<title>`llvm::BranchProbabilityInfoWrapperPass::runOnFunction(llvm::Fun (2 samples, 0.11%)</title><rect x="256.6" y="645" width="1.3" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="259.58" y="655.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getTerminator() const (1 samples, 0.05%)</title><rect x="145.7" y="581" width="0.6" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="148.71" y="591.5" ></text>
</g>
<g >
<title>`llvm::getOrEnforceKnownAlignment(llvm::Value*, unsigned int, ll (1 samples, 0.05%)</title><rect x="119.6" y="581" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="122.59" y="591.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="507.6" y="389" width="0.7" height="15.0" fill="rgb(65,213,65)" rx="2" ry="2" />
<text  x="510.61" y="399.5" ></text>
</g>
<g >
<title>`char* llvm::hashing::detail::hash_combine_recursive_helper::com (1 samples, 0.05%)</title><rect x="71.8" y="437" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="74.80" y="447.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::StructType*, llvm::Stru (1 samples, 0.05%)</title><rect x="85.2" y="549" width="0.6" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="88.18" y="559.5" ></text>
</g>
<g >
<title>`llvm::APInt::APInt(unsigned int, unsigned long long, bool) (1 samples, 0.05%)</title><rect x="1106.5" y="405" width="0.7" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="1109.53" y="415.5" ></text>
</g>
<g >
<title>`llvm::ValueHandleBase::AddToExistingUseList(llvm::ValueHandleBa (1 samples, 0.05%)</title><rect x="131.7" y="469" width="0.6" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="134.70" y="479.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::MapInfo::getHashVa (1 samples, 0.05%)</title><rect x="748.5" y="421" width="0.6" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="751.46" y="431.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitAnd(llvm::BinaryOperator&amp;) (3 samples, 0.16%)</title><rect x="284.0" y="597" width="1.9" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="286.97" y="607.5" ></text>
</g>
<g >
<title>`llvm::ValueHandleBase::AddToExistingUseList(llvm::ValueHandleBa (1 samples, 0.05%)</title><rect x="1175.3" y="469" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="1178.35" y="479.5" ></text>
</g>
<g >
<title>`llvm::TerminatorInst::getSuccessor(unsigned int) const (1 samples, 0.05%)</title><rect x="402.5" y="485" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="405.48" y="495.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="55.9" y="549" width="0.6" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="58.87" y="559.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="1105.9" y="405" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="1108.90" y="415.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::Valu (1 samples, 0.05%)</title><rect x="729.3" y="485" width="0.7" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="732.34" y="495.5" ></text>
</g>
<g >
<title>`llvm::getObjectSize(llvm::Value const*, unsigned long long&amp;, ll (1 samples, 0.05%)</title><rect x="615.9" y="261" width="0.7" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="618.93" y="271.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="95.4" y="453" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="98.38" y="463.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getSimplePointerDependencyFrom(l (7 samples, 0.38%)</title><rect x="593.6" y="421" width="4.5" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="596.63" y="431.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitAllocSite(llvm::Instruction&amp;) (1 samples, 0.05%)</title><rect x="283.3" y="581" width="0.7" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="286.34" y="591.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::BasicBlock*, llvm::DomTreeBuilder::SemiNCA (1 samples, 0.05%)</title><rect x="438.8" y="469" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="441.80" y="479.5" ></text>
</g>
<g >
<title>`llvm::AnalysisResolver::addAnalysisImplsPair(void const*, llvm: (1 samples, 0.05%)</title><rect x="740.2" y="549" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="743.17" y="559.5" ></text>
</g>
<g >
<title>`isBlockInLCSSAForm(llvm::Loop const&amp;, llvm::BasicBlock const&amp;,  (3 samples, 0.16%)</title><rect x="336.9" y="613" width="1.9" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="339.86" y="623.5" ></text>
</g>
<g >
<title>`simplifyFunctionCFG(llvm::Function&amp;, llvm::TargetTransformInfo  (9 samples, 0.49%)</title><rect x="1169.0" y="549" width="5.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="1171.97" y="559.5" ></text>
</g>
<g >
<title>`llvm::canConstantFoldCallTo(llvm::ImmutableCallSite, llvm::Func (1 samples, 0.05%)</title><rect x="655.4" y="261" width="0.7" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="658.43" y="271.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitLoadInst(llvm::LoadInst&amp;) (11 samples, 0.59%)</title><rect x="315.8" y="597" width="7.0" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="318.83" y="607.5" ></text>
</g>
<g >
<title>`llvm::ConstantRange::ConstantRange(unsigned int, bool) (1 samples, 0.05%)</title><rect x="510.2" y="453" width="0.6" height="15.0" fill="rgb(101,246,101)" rx="2" ry="2" />
<text  x="513.16" y="463.5" ></text>
</g>
<g >
<title>`llvm::Value::doRAUW(llvm::Value*, bool) (1 samples, 0.05%)</title><rect x="401.2" y="533" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="404.21" y="543.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromShiftOperator(llvm::Operator const*, llvm:: (1 samples, 0.05%)</title><rect x="225.4" y="485" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="228.36" y="495.5" ></text>
</g>
<g >
<title>`CanPHITrans(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="605.1" y="421" width="0.6" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="608.10" y="431.5" ></text>
</g>
<g >
<title>`llvm::haveNoCommonBitsSet(llvm::Value const*, llvm::Value const (2 samples, 0.11%)</title><rect x="482.8" y="485" width="1.2" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="485.76" y="495.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (1 samples, 0.05%)</title><rect x="310.1" y="565" width="0.6" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="313.10" y="575.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&amp; (1 samples, 0.05%)</title><rect x="533.7" y="421" width="0.7" height="15.0" fill="rgb(94,241,94)" rx="2" ry="2" />
<text  x="536.74" y="431.5" ></text>
</g>
<g >
<title>`llvm::iplist_impl&lt;llvm::simple_ilist&lt;llvm::BasicBlock&gt;, llvm::S (1 samples, 0.05%)</title><rect x="422.2" y="501" width="0.7" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="425.24" y="511.5" ></text>
</g>
<g >
<title>`llvm::removeUnreachableBlocks(llvm::Function&amp;, llvm::LazyValueI (3 samples, 0.16%)</title><rect x="1172.8" y="533" width="1.9" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="1175.80" y="543.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, unsigned long long, bool) (1 samples, 0.05%)</title><rect x="212.0" y="549" width="0.6" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="214.98" y="559.5" ></text>
</g>
<g >
<title>`llvm::Constant::isAllOnesValue() const (1 samples, 0.05%)</title><rect x="266.1" y="581" width="0.7" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="269.13" y="591.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (6 samples, 0.32%)</title><rect x="93.5" y="533" width="3.8" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="96.47" y="543.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getDependency(llvm::Instruction* (8 samples, 0.43%)</title><rect x="593.0" y="453" width="5.1" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="595.99" y="463.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Va (2 samples, 0.11%)</title><rect x="387.2" y="437" width="1.3" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="390.19" y="447.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1122.5" y="373" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="1125.46" y="383.5" ></text>
</g>
<g >
<title>`free_tiny (1 samples, 0.05%)</title><rect x="466.8" y="421" width="0.7" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="469.84" y="431.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getAlignment(llvm::Type*, bool) const (1 samples, 0.05%)</title><rect x="526.1" y="485" width="0.6" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="529.09" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solveBlockValueImpl(l (1 samples, 0.05%)</title><rect x="35.5" y="517" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="38.49" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (6 samples, 0.32%)</title><rect x="464.3" y="453" width="3.8" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="467.29" y="463.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::MatchBSwap(llvm::BinaryOperator&amp;) (1 samples, 0.05%)</title><rect x="114.5" y="581" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="117.49" y="591.5" ></text>
</g>
<g >
<title>`llvm::LoopInfoBase&lt;llvm::BasicBlock, llvm::Loop&gt;::releaseMemory (1 samples, 0.05%)</title><rect x="157.2" y="613" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="160.18" y="623.5" ></text>
</g>
<g >
<title>`llvm::ValueHandleBase::AddToExistingUseList(llvm::ValueHandleBa (1 samples, 0.05%)</title><rect x="937.1" y="437" width="0.6" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="940.05" y="447.5" ></text>
</g>
<g >
<title>`llvm::ValueHandleBase::RemoveFromUseList() (2 samples, 0.11%)</title><rect x="937.7" y="437" width="1.3" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="940.69" y="447.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitCallInst(llvm::CallInst&amp;) (8 samples, 0.43%)</title><rect x="1093.2" y="501" width="5.1" height="15.0" fill="rgb(84,232,84)" rx="2" ry="2" />
<text  x="1096.15" y="511.5" ></text>
</g>
<g >
<title>`llvm::mapped_iterator&lt;std::__1::__wrap_iter&lt;std::__1::pair&lt;llvm (1 samples, 0.05%)</title><rect x="1175.3" y="501" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="1178.35" y="511.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm:: (1 samples, 0.05%)</title><rect x="527.4" y="453" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="530.37" y="463.5" ></text>
</g>
<g >
<title>`llvm::APInt::operator-=(llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="102.4" y="517" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="105.39" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (9 samples, 0.49%)</title><rect x="270.6" y="597" width="5.7" height="15.0" fill="rgb(53,202,53)" rx="2" ry="2" />
<text  x="273.59" y="607.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (1 samples, 0.05%)</title><rect x="217.7" y="517" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="220.71" y="527.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (4 samples, 0.22%)</title><rect x="758.0" y="469" width="2.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="761.01" y="479.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::DecomposeGEPExpression(llvm::Value const*, (1 samples, 0.05%)</title><rect x="650.3" y="245" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="653.33" y="255.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitTrunc(llvm::TruncInst&amp;) (1 samples, 0.05%)</title><rect x="120.2" y="597" width="0.7" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="123.23" y="607.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getSinglePredecessor() const (1 samples, 0.05%)</title><rect x="33.6" y="581" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="36.57" y="591.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::Grow(unsigned int) (1 samples, 0.05%)</title><rect x="565.0" y="437" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="567.96" y="447.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (6 samples, 0.32%)</title><rect x="1147.9" y="469" width="3.9" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="1150.95" y="479.5" ></text>
</g>
<g >
<title>`llvm::CallSiteBase&lt;llvm::Function, llvm::BasicBlock, llvm::Valu (1 samples, 0.05%)</title><rect x="373.2" y="517" width="0.6" height="15.0" fill="rgb(69,218,69)" rx="2" ry="2" />
<text  x="376.17" y="527.5" ></text>
</g>
<g >
<title>`llvm::SSAUpdater::GetValueInMiddleOfBlock(llvm::BasicBlock*) (1 samples, 0.05%)</title><rect x="601.3" y="421" width="0.6" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="604.27" y="431.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getPointerABIAlignment(unsigned int) const (1 samples, 0.05%)</title><rect x="188.4" y="309" width="0.6" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="191.40" y="319.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (1 samples, 0.05%)</title><rect x="626.1" y="245" width="0.7" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="629.12" y="255.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::DivRemPairsLegacyPass::runOnFunction(llv (1 samples, 0.05%)</title><rect x="730.0" y="549" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="732.98" y="559.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;(anonymous namespace)::S (1 samples, 0.05%)</title><rect x="25.9" y="581" width="0.7" height="15.0" fill="rgb(53,202,53)" rx="2" ry="2" />
<text  x="28.93" y="591.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::InstSimplifier::runOnFunction(llvm::Func (6 samples, 0.32%)</title><rect x="246.4" y="645" width="3.8" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="249.38" y="655.5" ></text>
</g>
<g >
<title>`llvm::SimplifyCall(llvm::ImmutableCallSite, llvm::SimplifyQuery (1 samples, 0.05%)</title><rect x="655.4" y="293" width="0.7" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="658.43" y="303.5" ></text>
</g>
<g >
<title>`llvm::SymbolTableListTraits&lt;llvm::Function&gt;::removeNodeFromList (1 samples, 0.05%)</title><rect x="1179.2" y="725" width="0.6" height="15.0" fill="rgb(84,232,84)" rx="2" ry="2" />
<text  x="1182.17" y="735.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (2 samples, 0.11%)</title><rect x="461.1" y="437" width="1.3" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="464.10" y="447.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="247.7" y="485" width="0.6" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="250.66" y="495.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="209.4" y="421" width="0.7" height="15.0" fill="rgb(219,219,66)" rx="2" ry="2" />
<text  x="212.43" y="431.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (1 samples, 0.05%)</title><rect x="309.5" y="549" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="312.46" y="559.5" ></text>
</g>
<g >
<title>`llvm::ObjectSizeOffsetVisitor::compute(llvm::Value*) (2 samples, 0.11%)</title><rect x="627.4" y="245" width="1.3" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="630.40" y="255.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::intersectAssumeOrGuar (1 samples, 0.05%)</title><rect x="15.1" y="533" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="18.10" y="543.5" ></text>
</g>
<g >
<title>`llvm::isNoAliasFn(llvm::Value const*, llvm::TargetLibraryInfo c (1 samples, 0.05%)</title><rect x="658.6" y="341" width="0.7" height="15.0" fill="rgb(53,202,53)" rx="2" ry="2" />
<text  x="661.62" y="351.5" ></text>
</g>
<g >
<title>`SimplifyWithOpReplaced(llvm::Value*, llvm::Value*, llvm::Value* (1 samples, 0.05%)</title><rect x="118.3" y="581" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="121.32" y="591.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="640.1" y="309" width="0.7" height="15.0" fill="rgb(176,176,50)" rx="2" ry="2" />
<text  x="643.14" y="319.5" ></text>
</g>
<g >
<title>`llvm::ConstantRange::inverse() const (1 samples, 0.05%)</title><rect x="717.2" y="421" width="0.7" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="720.24" y="431.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::u (1 samples, 0.05%)</title><rect x="1114.2" y="389" width="0.6" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="1117.18" y="399.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::getSCEV(llvm::Value*) (1 samples, 0.05%)</title><rect x="131.1" y="517" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="134.06" y="527.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="582.2" y="469" width="0.6" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="585.16" y="479.5" ></text>
</g>
<g >
<title>`core::SingleDispatchGenericFunctionClosure_O::entry_point(core: (562 samples, 30.35%)</title><rect x="10.0" y="757" width="358.1" height="15.0" fill="rgb(108,254,108)" rx="2" ry="2" />
<text  x="13.00" y="767.5" >`core::SingleDispatchGenericFunctionClosure_O::e..</text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std::__1:: (1 samples, 0.05%)</title><rect x="674.5" y="421" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="677.55" y="431.5" ></text>
</g>
<g >
<title>`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="49.5" y="485" width="0.6" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="52.50" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSet&lt;llvm::BasicBlock*, 16u&gt;::SmallPtrSet&lt;llvm::Te (1 samples, 0.05%)</title><rect x="1169.6" y="437" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="1172.61" y="447.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getAlignment(llvm::Type*, bool) const (1 samples, 0.05%)</title><rect x="1126.3" y="485" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="1129.29" y="495.5" ></text>
</g>
<g >
<title>`llvm::PMTopLevelManager::findAnalysisPass(void const*) (1 samples, 0.05%)</title><rect x="430.5" y="517" width="0.7" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="433.52" y="527.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitCallInst(llvm::CallInst&amp;) (9 samples, 0.49%)</title><rect x="486.0" y="501" width="5.7" height="15.0" fill="rgb(77,224,77)" rx="2" ry="2" />
<text  x="488.95" y="511.5" ></text>
</g>
<g >
<title>`llvm::Type::isSizedDerivedType(llvm::SmallPtrSetImpl&lt;llvm::Type (1 samples, 0.05%)</title><rect x="1101.4" y="485" width="0.7" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="1104.44" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm::MemoryLocation, llvm:: (1 samples, 0.05%)</title><rect x="194.1" y="309" width="0.7" height="15.0" fill="rgb(82,230,82)" rx="2" ry="2" />
<text  x="197.14" y="319.5" ></text>
</g>
<g >
<title>`malloc_zone_realloc (2 samples, 0.11%)</title><rect x="867.0" y="421" width="1.2" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="869.97" y="431.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (2 samples, 0.11%)</title><rect x="614.7" y="277" width="1.2" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="617.65" y="287.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (7 samples, 0.38%)</title><rect x="296.1" y="485" width="4.4" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="299.08" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::CGPassManager::RefreshCallGraph(llvm::Ca (1 samples, 0.05%)</title><rect x="368.1" y="565" width="0.6" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="371.08" y="575.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^33^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="981" width="1180.0" height="15.0" fill="rgb(79,192,192)" rx="2" ry="2" />
<text  x="13.00" y="991.5" >`compile-file.lsp-compile-file52^33^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^181^TOP-COMPILE-FILE (1,830 samples, 98.81%)</title><rect x="10.0" y="805" width="1166.0" height="15.0" fill="rgb(80,193,193)" rx="2" ry="2" />
<text  x="13.00" y="815.5" >`compile-file.lsp-compile-file52^181^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`_platform_memmove$VARIANT$Nehalem (1 samples, 0.05%)</title><rect x="436.9" y="485" width="0.6" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="439.89" y="495.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::getOrCreate(llvm:: (3 samples, 0.16%)</title><rect x="686.7" y="373" width="1.9" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="689.65" y="383.5" ></text>
</g>
<g >
<title>`llvm::MemorySSA::CachingWalker::getClobberingMemoryAccess(llvm: (4 samples, 0.22%)</title><rect x="568.8" y="453" width="2.5" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="571.78" y="463.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (2 samples, 0.11%)</title><rect x="582.2" y="533" width="1.2" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="585.16" y="543.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefBehavior(llvm::ImmutableCallSite) (1 samples, 0.05%)</title><rect x="169.9" y="533" width="0.7" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="172.92" y="543.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitLoadInst(llvm::LoadInst&amp;) (21 samples, 1.13%)</title><rect x="1125.0" y="501" width="13.4" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="1128.01" y="511.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::KnownBits(unsigned int) (1 samples, 0.05%)</title><rect x="538.2" y="373" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="541.20" y="383.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::getModRefInfo(llvm::ImmutableCallSite, l (1 samples, 0.05%)</title><rect x="1131.4" y="405" width="0.6" height="15.0" fill="rgb(77,224,77)" rx="2" ry="2" />
<text  x="1134.38" y="415.5" ></text>
</g>
<g >
<title>`simplifyICmpWithConstant(llvm::CmpInst::Predicate, llvm::Value* (2 samples, 0.11%)</title><rect x="510.2" y="469" width="1.2" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="513.16" y="479.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;llvm::Function const*,  (1 samples, 0.05%)</title><rect x="352.8" y="613" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="355.79" y="623.5" ></text>
</g>
<g >
<title>`std::__1::enable_if&lt;__is_forward_iterator&lt;llvm::PredIterator&lt;ll (1 samples, 0.05%)</title><rect x="147.6" y="597" width="0.7" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="150.62" y="607.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;llvm::PoisoningVH&lt;l (1 samples, 0.05%)</title><rect x="415.9" y="421" width="0.6" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="418.86" y="431.5" ></text>
</g>
<g >
<title>`llvm::SimplifySelectInst(llvm::Value*, llvm::Value*, llvm::Valu (1 samples, 0.05%)</title><rect x="615.3" y="261" width="0.6" height="15.0" fill="rgb(106,252,106)" rx="2" ry="2" />
<text  x="618.29" y="271.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (2 samples, 0.11%)</title><rect x="1115.5" y="453" width="1.2" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="1118.45" y="463.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::removeDeadPasses(llvm::Pass*, llvm::String (9 samples, 0.49%)</title><rect x="575.2" y="549" width="5.7" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="578.15" y="559.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Pass*, llvm::Analy (1 samples, 0.05%)</title><rect x="345.8" y="613" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="348.78" y="623.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="17.6" y="421" width="0.7" height="15.0" fill="rgb(183,183,53)" rx="2" ry="2" />
<text  x="20.65" y="431.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="716.6" y="421" width="0.6" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="719.60" y="431.5" ></text>
</g>
<g >
<title>`llvm::sroa::SROALegacyPass::runOnFunction(llvm::Function&amp;) (13 samples, 0.70%)</title><rect x="700.7" y="549" width="8.3" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="703.67" y="559.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1349" width="1180.0" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="13.00" y="1359.5" >`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`findRefEdges(llvm::ModuleSummaryIndex&amp;, llvm::User const*, llvm (3 samples, 0.16%)</title><rect x="1187.5" y="741" width="1.9" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="1190.45" y="751.5" ></text>
</g>
<g >
<title>`_platform_memmove$VARIANT$Nehalem (1 samples, 0.05%)</title><rect x="167.4" y="453" width="0.6" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="170.38" y="463.5" ></text>
</g>
<g >
<title>`malloc (2 samples, 0.11%)</title><rect x="1074.7" y="469" width="1.3" height="15.0" fill="rgb(181,181,52)" rx="2" ry="2" />
<text  x="1077.68" y="479.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (1 samples, 0.05%)</title><rect x="99.2" y="549" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="102.20" y="559.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1397" width="1180.0" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="13.00" y="1407.5" >`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`top.lsp-top130^378^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1845" width="1180.0" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="13.00" y="1855.5" >`top.lsp-top130^378^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (15 samples, 0.81%)</title><rect x="442.6" y="501" width="9.6" height="15.0" fill="rgb(69,218,69)" rx="2" ry="2" />
<text  x="445.62" y="511.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="765.7" y="453" width="0.6" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="768.66" y="463.5" ></text>
</g>
<g >
<title>`runCVP(llvm::Module&amp;) (14 samples, 0.76%)</title><rect x="353.4" y="677" width="8.9" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="356.42" y="687.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (3 samples, 0.16%)</title><rect x="624.2" y="261" width="1.9" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="627.21" y="271.5" ></text>
</g>
<g >
<title>`llvm::hashing::detail::hash_combine_recursive_helper::combine(u (1 samples, 0.05%)</title><rect x="265.5" y="453" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="268.50" y="463.5" ></text>
</g>
<g >
<title>`llvm::SSAUpdater::RewriteUse(llvm::Use&amp;) (1 samples, 0.05%)</title><rect x="737.0" y="485" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="739.99" y="495.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (1 samples, 0.05%)</title><rect x="221.5" y="517" width="0.7" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="224.53" y="527.5" ></text>
</g>
<g >
<title>`isDereferenceableAndAlignedPointer(llvm::Value const*, unsigned (1 samples, 0.05%)</title><rect x="720.4" y="453" width="0.7" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="723.42" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="508.3" y="437" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="511.25" y="447.5" ></text>
</g>
<g >
<title>`char* llvm::hashing::detail::hash_combine_recursive_helper::com (2 samples, 0.11%)</title><rect x="502.5" y="261" width="1.3" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="505.52" y="271.5" ></text>
</g>
<g >
<title>`isDereferenceableAndAlignedPointer(llvm::Value const*, unsigned (1 samples, 0.05%)</title><rect x="233.6" y="517" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="236.64" y="527.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::getSCEV(llvm::Value*) (1 samples, 0.05%)</title><rect x="131.7" y="549" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="134.70" y="559.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::GVN::Expression, unsigned int, llvm::Dense (1 samples, 0.05%)</title><rect x="589.2" y="405" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="592.17" y="415.5" ></text>
</g>
<g >
<title>`llvm::Module::getNamedValue(llvm::StringRef) const (1 samples, 0.05%)</title><rect x="38.7" y="469" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="41.67" y="479.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="647.8" y="101" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="650.79" y="111.5" ></text>
</g>
<g >
<title>`ThreadCmpOverSelect(llvm::CmpInst::Predicate, llvm::Value*, llv (3 samples, 0.16%)</title><rect x="1105.3" y="469" width="1.9" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="1108.26" y="479.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;(anonymous namespace)::Simple (1 samples, 0.05%)</title><rect x="25.9" y="597" width="0.7" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="28.93" y="607.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::DecomposeGEPExpression(llvm::Value const*, (1 samples, 0.05%)</title><rect x="645.9" y="277" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="648.87" y="287.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasSelect(llvm::SelectInst const*, unsig (1 samples, 0.05%)</title><rect x="647.1" y="197" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="650.15" y="207.5" ></text>
</g>
<g >
<title>`llvm::AssumptionCache::assumptionsFor(llvm::Value const*) (1 samples, 0.05%)</title><rect x="106.2" y="453" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="109.21" y="463.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="241.3" y="613" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="244.29" y="623.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::PoisoningVH&lt;llvm::Basic (1 samples, 0.05%)</title><rect x="377.6" y="421" width="0.7" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="380.63" y="431.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::StringMapIterator&lt;llvm::Value*&gt;, bool&gt; llv (1 samples, 0.05%)</title><rect x="703.2" y="405" width="0.7" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="706.22" y="415.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;llvm::Function const*,  (1 samples, 0.05%)</title><rect x="352.8" y="533" width="0.6" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="355.79" y="543.5" ></text>
</g>
<g >
<title>`llvm::IRBuilderBase::SetInsertPoint(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="76.9" y="597" width="0.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="79.90" y="607.5" ></text>
</g>
<g >
<title>`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="132.3" y="373" width="0.7" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="135.33" y="383.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::addPointer(llvm::Value*, unsigned long l (2 samples, 0.11%)</title><rect x="556.7" y="469" width="1.2" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="559.67" y="479.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::tryOptimizeCall(llvm::CallInst*) (2 samples, 0.11%)</title><rect x="487.2" y="469" width="1.3" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="490.22" y="479.5" ></text>
</g>
<g >
<title>`top.lsp-top130^522^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1781" width="1180.0" height="15.0" fill="rgb(82,194,194)" rx="2" ry="2" />
<text  x="13.00" y="1791.5" >`top.lsp-top130^522^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::DataLayout::getPointerSize(unsigned int) const (1 samples, 0.05%)</title><rect x="761.8" y="421" width="0.7" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="764.84" y="431.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::FindBucketFor(void const*) const (1 samples, 0.05%)</title><rect x="426.1" y="389" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="429.06" y="399.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::Value*, llvm::ValueLatticeElem (2 samples, 0.11%)</title><rect x="408.9" y="341" width="1.2" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="411.86" y="351.5" ></text>
</g>
<g >
<title>`llvm::IRBuilder&lt;llvm::TargetFolder, llvm::IRBuilderCallbackInse (1 samples, 0.05%)</title><rect x="1125.6" y="469" width="0.7" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="1128.65" y="479.5" ></text>
</g>
<g >
<title>`llvm::IsConstantOffsetFromGlobal(llvm::Constant*, llvm::GlobalV (3 samples, 0.16%)</title><rect x="452.2" y="469" width="1.9" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="455.18" y="479.5" ></text>
</g>
<g >
<title>`llvm::APInt::udiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="463.0" y="421" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="466.01" y="431.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="767.6" y="389" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="770.57" y="399.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::clear() (1 samples, 0.05%)</title><rect x="136.2" y="581" width="0.6" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="139.16" y="591.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, llvm::Sma (1 samples, 0.05%)</title><rect x="642.7" y="341" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="645.69" y="351.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1115.5" y="421" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="1118.45" y="431.5" ></text>
</g>
<g >
<title>`llvm::removeUnreachableBlocks(llvm::Function&amp;, llvm::LazyValueI (3 samples, 0.16%)</title><rect x="724.2" y="533" width="2.0" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="727.24" y="543.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;llvm::PoisoningVH&lt;l (1 samples, 0.05%)</title><rect x="38.0" y="517" width="0.7" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="41.03" y="527.5" ></text>
</g>
<g >
<title>`llvm::LazyValueInfo::getConstantOnEdge(llvm::Value*, llvm::Basi (1 samples, 0.05%)</title><rect x="35.5" y="565" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="38.49" y="575.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (1 samples, 0.05%)</title><rect x="99.2" y="565" width="0.6" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="102.20" y="575.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="295.4" y="453" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="298.44" y="463.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value const*, llvm (1 samples, 0.05%)</title><rect x="347.7" y="613" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="350.69" y="623.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="323.5" y="501" width="0.6" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="326.48" y="511.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getSinglePredecessor() const (1 samples, 0.05%)</title><rect x="25.3" y="613" width="0.6" height="15.0" fill="rgb(69,218,69)" rx="2" ry="2" />
<text  x="28.29" y="623.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::CastGEPIndices(llvm::Type*, llvm::ArrayR (1 samples, 0.05%)</title><rect x="751.6" y="469" width="0.7" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="754.64" y="479.5" ></text>
</g>
<g >
<title>`calloc (1 samples, 0.05%)</title><rect x="347.1" y="581" width="0.6" height="15.0" fill="rgb(192,192,56)" rx="2" ry="2" />
<text  x="350.05" y="591.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, ll (1 samples, 0.05%)</title><rect x="284.6" y="517" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="287.61" y="527.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (1 samples, 0.05%)</title><rect x="498.1" y="437" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="501.06" y="447.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::MapInfo::getHashVa (1 samples, 0.05%)</title><rect x="512.7" y="357" width="0.6" height="15.0" fill="rgb(107,253,107)" rx="2" ry="2" />
<text  x="515.71" y="367.5" ></text>
</g>
<g >
<title>`llvm::df_iterator&lt;llvm::BasicBlock*, llvm::df_iterator_default_ (1 samples, 0.05%)</title><rect x="249.6" y="613" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="252.57" y="623.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::assignExpNewValueNum(llvm::GVN::Expressi (3 samples, 0.16%)</title><rect x="587.9" y="453" width="1.9" height="15.0" fill="rgb(63,211,63)" rx="2" ry="2" />
<text  x="590.89" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="265.5" y="565" width="0.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="268.50" y="575.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (1 samples, 0.05%)</title><rect x="618.5" y="245" width="0.6" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="621.48" y="255.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ClobberWalker::walkToPhiOrClobber((anony (3 samples, 0.16%)</title><rect x="569.4" y="437" width="1.9" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="572.42" y="447.5" ></text>
</g>
<g >
<title>`free (1 samples, 0.05%)</title><rect x="428.0" y="517" width="0.6" height="15.0" fill="rgb(184,184,53)" rx="2" ry="2" />
<text  x="430.97" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (4 samples, 0.22%)</title><rect x="763.1" y="437" width="2.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="766.11" y="447.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (2 samples, 0.11%)</title><rect x="749.7" y="453" width="1.3" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="752.73" y="463.5" ></text>
</g>
<g >
<title>`llvm::ValueEnumerator::ValueEnumerator(llvm::Module const&amp;, boo (2 samples, 0.11%)</title><rect x="1186.2" y="709" width="1.3" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="1189.18" y="719.5" ></text>
</g>
<g >
<title>`llvm::GVN::AnalyzeLoadAvailability(llvm::LoadInst*, llvm::Small (3 samples, 0.16%)</title><rect x="599.4" y="453" width="1.9" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="602.36" y="463.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (1 samples, 0.05%)</title><rect x="317.1" y="565" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="320.11" y="575.5" ></text>
</g>
<g >
<title>`llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm::MemoryLocation, llvm:: (1 samples, 0.05%)</title><rect x="652.2" y="229" width="0.7" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="655.25" y="239.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="750.4" y="437" width="0.6" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="753.37" y="447.5" ></text>
</g>
<g >
<title>`char* llvm::hashing::detail::hash_combine_recursive_helper::com (1 samples, 0.05%)</title><rect x="71.2" y="453" width="0.6" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="74.17" y="463.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="638.2" y="309" width="0.7" height="15.0" fill="rgb(214,214,64)" rx="2" ry="2" />
<text  x="641.23" y="319.5" ></text>
</g>
<g >
<title>`llvm::formLCSSAForInstructions(llvm::SmallVectorImpl&lt;llvm::Inst (1 samples, 0.05%)</title><rect x="424.8" y="501" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="427.78" y="511.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (3 samples, 0.16%)</title><rect x="395.5" y="453" width="1.9" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="398.48" y="463.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (3 samples, 0.16%)</title><rect x="684.1" y="405" width="1.9" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="687.10" y="415.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (9 samples, 0.49%)</title><rect x="296.1" y="517" width="5.7" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="299.08" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::IntegerType*, unsigned long long,  (1 samples, 0.05%)</title><rect x="731.3" y="421" width="0.6" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="734.25" y="431.5" ></text>
</g>
<g >
<title>`llvm::LazyValueInfo::getPredicateAt(unsigned int, llvm::Value*, (11 samples, 0.59%)</title><rect x="414.0" y="501" width="7.0" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="416.95" y="511.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::IntegerType*, unsigned long long,  (1 samples, 0.05%)</title><rect x="704.5" y="453" width="0.6" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="707.49" y="463.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (24 samples, 1.30%)</title><rect x="678.4" y="469" width="15.3" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="681.37" y="479.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getSinglePredecessor() const (1 samples, 0.05%)</title><rect x="234.3" y="565" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="237.28" y="575.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (4 samples, 0.22%)</title><rect x="318.4" y="501" width="2.5" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="321.38" y="511.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (5 samples, 0.27%)</title><rect x="122.1" y="549" width="3.2" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="125.14" y="559.5" ></text>
</g>
<g >
<title>`iterativelySimplifyCFG(llvm::Function&amp;, llvm::TargetTransformIn (20 samples, 1.08%)</title><rect x="711.5" y="533" width="12.7" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="714.50" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::GlobalOptLegacyPass::runOnModule(llvm::M (3 samples, 0.16%)</title><rect x="241.9" y="677" width="1.9" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="244.92" y="687.5" ></text>
</g>
<g >
<title>`llvm::Type::getPrimitiveSizeInBits() const (1 samples, 0.05%)</title><rect x="398.0" y="485" width="0.7" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="401.02" y="495.5" ></text>
</g>
<g >
<title>`isBlockInLCSSAForm(llvm::Loop const&amp;, llvm::BasicBlock const&amp;,  (2 samples, 0.11%)</title><rect x="141.9" y="613" width="1.3" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="144.89" y="623.5" ></text>
</g>
<g >
<title>`llvm::getConstantStringInfo(llvm::Value const*, llvm::StringRef (1 samples, 0.05%)</title><rect x="275.7" y="565" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="278.69" y="575.5" ></text>
</g>
<g >
<title>`llvm::InstVisitor&lt;llvm::InstCombiner, llvm::Instruction*&gt;::visi (1 samples, 0.05%)</title><rect x="1155.6" y="517" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="1158.59" y="527.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="472.6" y="485" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="475.57" y="495.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;std::__1::pair&lt;unsigned i (1 samples, 0.05%)</title><rect x="228.5" y="565" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="231.54" y="575.5" ></text>
</g>
<g >
<title>`llvm::getConstantDataArrayInfo(llvm::Value const*, llvm::Consta (1 samples, 0.05%)</title><rect x="275.7" y="549" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="278.69" y="559.5" ></text>
</g>
<g >
<title>`llvm::StringMapImpl::RemoveKey(llvm::StringRef) (2 samples, 0.11%)</title><rect x="1177.9" y="661" width="1.3" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="1180.89" y="671.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::add(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="1158.8" y="485" width="0.6" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="1161.78" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::find_imp(void const*) const (1 samples, 0.05%)</title><rect x="1131.4" y="373" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="1134.38" y="383.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&amp; (1 samples, 0.05%)</title><rect x="303.7" y="501" width="0.7" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="306.73" y="511.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (9 samples, 0.49%)</title><rect x="760.6" y="469" width="5.7" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="763.56" y="479.5" ></text>
</g>
<g >
<title>`malloc_zone_realloc (1 samples, 0.05%)</title><rect x="140.6" y="517" width="0.7" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="143.62" y="527.5" ></text>
</g>
<g >
<title>`llvm::decomposeBitTestICmp(llvm::Value*, llvm::Value*, llvm::Cm (1 samples, 0.05%)</title><rect x="219.6" y="453" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="222.62" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (2 samples, 0.11%)</title><rect x="559.2" y="485" width="1.3" height="15.0" fill="rgb(51,200,51)" rx="2" ry="2" />
<text  x="562.22" y="495.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::brc_match&lt;llvm::PatternMatch::OneUse_m (1 samples, 0.05%)</title><rect x="756.1" y="501" width="0.6" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="759.10" y="511.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (7 samples, 0.38%)</title><rect x="679.0" y="453" width="4.5" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="682.01" y="463.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getTerminator() const (1 samples, 0.05%)</title><rect x="340.0" y="581" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="343.04" y="591.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp_big(void const*) (1 samples, 0.05%)</title><rect x="152.7" y="533" width="0.7" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="155.72" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LoopSimplify::runOnFunction(llvm::Functi (3 samples, 0.16%)</title><rect x="251.5" y="645" width="1.9" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="254.48" y="655.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, llvm::Sma (1 samples, 0.05%)</title><rect x="642.7" y="389" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="645.69" y="399.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, unsi (1 samples, 0.05%)</title><rect x="1140.3" y="453" width="0.6" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="1143.30" y="463.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObjects(llvm::Value*, llvm::SmallVectorImpl&lt; (3 samples, 0.16%)</title><rect x="218.3" y="517" width="2.0" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="221.35" y="527.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="280.8" y="501" width="0.6" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="283.79" y="511.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::getOrCreate(llvm:: (1 samples, 0.05%)</title><rect x="34.8" y="405" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="37.85" y="415.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="716.6" y="373" width="0.6" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="719.60" y="383.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorBase::grow_pod(void*, unsigned long, unsigned  (3 samples, 0.16%)</title><rect x="1074.7" y="485" width="1.9" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="1077.68" y="495.5" ></text>
</g>
<g >
<title>`llvm::TryToSimplifyUncondBranchFromEmptyBlock(llvm::BasicBlock* (1 samples, 0.05%)</title><rect x="723.6" y="485" width="0.6" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="726.61" y="495.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (7 samples, 0.38%)</title><rect x="501.2" y="341" width="4.5" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="504.24" y="351.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::find_imp(void const*) const (1 samples, 0.05%)</title><rect x="251.5" y="581" width="0.6" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="254.48" y="591.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp_big(void const*) (1 samples, 0.05%)</title><rect x="565.0" y="453" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="567.96" y="463.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldICmpInstWithConstant(llvm::ICmpInst&amp;) (1 samples, 0.05%)</title><rect x="515.3" y="485" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="518.26" y="495.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1124.4" y="261" width="0.6" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="1127.37" y="271.5" ></text>
</g>
<g >
<title>`llvm::LoopBase&lt;llvm::BasicBlock, llvm::Loop&gt;::addBlockEntry(llv (2 samples, 0.11%)</title><rect x="143.8" y="581" width="1.3" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="146.80" y="591.5" ></text>
</g>
<g >
<title>`llvm::LazyValueInfo::getPredicateAt(unsigned int, llvm::Value*, (6 samples, 0.32%)</title><rect x="36.8" y="597" width="3.8" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="39.76" y="607.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getIndexedOffsetInType(llvm::Type*, llvm::Arr (1 samples, 0.05%)</title><rect x="450.9" y="469" width="0.6" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="453.91" y="479.5" ></text>
</g>
<g >
<title>`llvm::getConstantDataArrayInfo(llvm::Value const*, llvm::Consta (1 samples, 0.05%)</title><rect x="224.7" y="485" width="0.7" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="227.72" y="495.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (2 samples, 0.11%)</title><rect x="536.9" y="325" width="1.3" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="539.92" y="335.5" ></text>
</g>
<g >
<title>`ThreadCmpOverPHI(llvm::CmpInst::Predicate, llvm::Value*, llvm:: (2 samples, 0.11%)</title><rect x="90.9" y="565" width="1.3" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="93.92" y="575.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (1 samples, 0.05%)</title><rect x="29.8" y="581" width="0.6" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="32.75" y="591.5" ></text>
</g>
<g >
<title>`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="260.4" y="485" width="0.6" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="263.40" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::BasicBlock const*&gt;::find(llvm::Basi (1 samples, 0.05%)</title><rect x="561.8" y="437" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="564.77" y="447.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldICmpWithConstant(llvm::ICmpInst&amp;) (2 samples, 0.11%)</title><rect x="520.4" y="485" width="1.2" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="523.36" y="495.5" ></text>
</g>
<g >
<title>`llvm::sinkRegion(llvm::DomTreeNodeBase&lt;llvm::BasicBlock&gt;*, llvm (1 samples, 0.05%)</title><rect x="560.5" y="501" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="563.50" y="511.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="612.7" y="309" width="0.7" height="15.0" fill="rgb(225,225,68)" rx="2" ry="2" />
<text  x="615.74" y="319.5" ></text>
</g>
<g >
<title>`llvm::getObjectSize(llvm::Value const*, unsigned long long&amp;, ll (1 samples, 0.05%)</title><rect x="191.0" y="357" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="193.95" y="367.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::ImmutableCallSite, llvm::M (5 samples, 0.27%)</title><rect x="1128.8" y="421" width="3.2" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="1131.83" y="431.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::OptimizeOverflowCheck(llvm::OverflowCheckFl (1 samples, 0.05%)</title><rect x="486.0" y="485" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="488.95" y="495.5" ></text>
</g>
<g >
<title>`llvm::IRBuilderBase::SetInsertPoint(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="725.5" y="485" width="0.7" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="728.52" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (7 samples, 0.38%)</title><rect x="749.1" y="501" width="4.5" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="752.09" y="511.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;std::__1::pair&lt;unsigned int,  (1 samples, 0.05%)</title><rect x="697.5" y="389" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="700.48" y="399.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (3 samples, 0.16%)</title><rect x="94.7" y="485" width="2.0" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="97.74" y="495.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="543.9" y="421" width="0.7" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="546.93" y="431.5" ></text>
</g>
<g >
<title>`small_malloc_should_clear (2 samples, 0.11%)</title><rect x="1074.7" y="421" width="1.3" height="15.0" fill="rgb(214,214,64)" rx="2" ry="2" />
<text  x="1077.68" y="431.5" ></text>
</g>
<g >
<title>`llvm::isPotentiallyReachableFromMany(llvm::SmallVectorImpl&lt;llvm (1 samples, 0.05%)</title><rect x="325.4" y="501" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="328.39" y="511.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (9 samples, 0.49%)</title><rect x="500.0" y="373" width="5.7" height="15.0" fill="rgb(96,243,96)" rx="2" ry="2" />
<text  x="502.97" y="383.5" ></text>
</g>
<g >
<title>`llvm::PMTopLevelManager::findAnalysisPassInfo(void const*) cons (1 samples, 0.05%)</title><rect x="342.0" y="629" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="344.95" y="639.5" ></text>
</g>
<g >
<title>`runIPSCCP(llvm::Module&amp;, llvm::DataLayout const&amp;, llvm::TargetL (9 samples, 0.49%)</title><rect x="362.3" y="677" width="5.8" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="365.34" y="687.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="468.1" y="453" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="471.11" y="463.5" ></text>
</g>
<g >
<title>`llvm::JumpThreadingPass::ThreadEdge(llvm::BasicBlock*, llvm::Sm (4 samples, 0.22%)</title><rect x="411.4" y="485" width="2.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="414.40" y="495.5" ></text>
</g>
<g >
<title>`llvm::StringMapImpl::FindKey(llvm::StringRef) const (2 samples, 0.11%)</title><rect x="1177.9" y="645" width="1.3" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="1180.89" y="655.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(llvm (6 samples, 0.32%)</title><rect x="201.8" y="517" width="3.8" height="15.0" fill="rgb(58,208,58)" rx="2" ry="2" />
<text  x="204.78" y="527.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::Value*, llvm::ValueLatticeElem (1 samples, 0.05%)</title><rect x="406.3" y="309" width="0.6" height="15.0" fill="rgb(84,232,84)" rx="2" ry="2" />
<text  x="409.31" y="319.5" ></text>
</g>
<g >
<title>`llvm::ReplaceableMetadataImpl::getIfExists(llvm::Metadata&amp;) (1 samples, 0.05%)</title><rect x="238.7" y="565" width="0.7" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="241.74" y="575.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyMultipleUseDemandedBits(llvm::Instr (1 samples, 0.05%)</title><rect x="106.2" y="517" width="0.6" height="15.0" fill="rgb(106,252,106)" rx="2" ry="2" />
<text  x="109.21" y="527.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="657.3" y="277" width="0.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="660.34" y="287.5" ></text>
</g>
<g >
<title>`llvm::Type::isSizedDerivedType(llvm::SmallPtrSetImpl&lt;llvm::Type (1 samples, 0.05%)</title><rect x="623.6" y="293" width="0.6" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="626.57" y="303.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (6 samples, 0.32%)</title><rect x="1134.6" y="453" width="3.8" height="15.0" fill="rgb(88,234,88)" rx="2" ry="2" />
<text  x="1137.57" y="463.5" ></text>
</g>
<g >
<title>`llvm::isFreeCall(llvm::Value const*, llvm::TargetLibraryInfo co (1 samples, 0.05%)</title><rect x="291.0" y="581" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="293.98" y="591.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="595.5" y="293" width="0.7" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="598.54" y="303.5" ></text>
</g>
<g >
<title>`llvm::BitstreamWriter::EmitVBR(unsigned int, unsigned int) (1 samples, 0.05%)</title><rect x="1184.9" y="677" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="1187.90" y="687.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1115.5" y="389" width="0.6" height="15.0" fill="rgb(94,241,94)" rx="2" ry="2" />
<text  x="1118.45" y="399.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="298.6" y="437" width="0.7" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="301.63" y="447.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (4 samples, 0.22%)</title><rect x="172.5" y="485" width="2.5" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="175.47" y="495.5" ></text>
</g>
<g >
<title>`llvm::matchSelectPattern(llvm::Value*, llvm::Value*&amp;, llvm::Val (1 samples, 0.05%)</title><rect x="1123.1" y="485" width="0.6" height="15.0" fill="rgb(75,222,75)" rx="2" ry="2" />
<text  x="1126.10" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorBase::grow_pod(void*, unsigned long, unsigned  (3 samples, 0.16%)</title><rect x="867.0" y="453" width="1.9" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="869.97" y="463.5" ></text>
</g>
<g >
<title>`llvm::getOrEnforceKnownAlignment(llvm::Value*, unsigned int, ll (9 samples, 0.49%)</title><rect x="317.1" y="581" width="5.7" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="320.11" y="591.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::getPredicatedBackedgeTakenInfo(llvm::Loo (1 samples, 0.05%)</title><rect x="250.8" y="517" width="0.7" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="253.84" y="527.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, unsigned i (1 samples, 0.05%)</title><rect x="585.3" y="469" width="0.7" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="588.35" y="479.5" ></text>
</g>
<g >
<title>`llvm::CallInst::paramHasAttr(unsigned int, llvm::Attribute::Att (1 samples, 0.05%)</title><rect x="287.8" y="565" width="0.6" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="290.80" y="575.5" ></text>
</g>
<g >
<title>`llvm::LazyValueInfo::getPredicateOnEdge(unsigned int, llvm::Val (12 samples, 0.65%)</title><rect x="377.0" y="501" width="7.6" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="380.00" y="511.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::GVN::Expression, unsign (1 samples, 0.05%)</title><rect x="227.3" y="549" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="230.27" y="559.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="90.9" y="405" width="0.7" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="93.92" y="415.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::alias(llvm::MemoryLocation const&amp;, llvm: (1 samples, 0.05%)</title><rect x="203.7" y="341" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="206.69" y="351.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;unsigned int, llvm::GVN: (1 samples, 0.05%)</title><rect x="170.6" y="533" width="0.6" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="173.56" y="543.5" ></text>
</g>
<g >
<title>`llvm::InstVisitor&lt;llvm::InstCombiner, llvm::Instruction*&gt;::visi (2 samples, 0.11%)</title><rect x="552.9" y="517" width="1.2" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="555.85" y="527.5" ></text>
</g>
<g >
<title>`std::__1::vector&lt;llvm::Constant*, std::__1::allocator&lt;llvm::Con (1 samples, 0.05%)</title><rect x="467.5" y="421" width="0.6" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="470.47" y="431.5" ></text>
</g>
<g >
<title>`llvm::Value::stripPointerCasts() const (1 samples, 0.05%)</title><rect x="189.0" y="357" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="192.04" y="367.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LoopInvariantCodeMotion::runOnLoop(llvm: (5 samples, 0.27%)</title><rect x="333.7" y="613" width="3.2" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="336.67" y="623.5" ></text>
</g>
<g >
<title>`OUTPUT-MODULE^COMPILER^FN^^ (22 samples, 1.19%)</title><rect x="1176.0" y="885" width="14.0" height="15.0" fill="rgb(83,196,196)" rx="2" ry="2" />
<text  x="1178.98" y="895.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::AggressiveDeadCodeElimination::performDe (4 samples, 0.22%)</title><rect x="370.0" y="533" width="2.5" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="372.99" y="543.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::SCEV const*, llvm::SmallVector&lt;std::__1::p (1 samples, 0.05%)</title><rect x="160.4" y="629" width="0.6" height="15.0" fill="rgb(87,233,87)" rx="2" ry="2" />
<text  x="163.37" y="639.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;std::__1::pair&lt;llvm::Val (1 samples, 0.05%)</title><rect x="406.9" y="437" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="409.94" y="447.5" ></text>
</g>
<g >
<title>`llvm::APInt::operator (1 samples, 0.05%)</title><rect x="719.1" y="389" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="722.15" y="399.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::PoisoningVH&lt;llvm:: (1 samples, 0.05%)</title><rect x="416.5" y="405" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="419.50" y="415.5" ></text>
</g>
<g >
<title>all (1,852 samples, 100%)</title><rect x="10.0" y="2293" width="1180.0" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="13.00" y="2303.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (1 samples, 0.05%)</title><rect x="509.5" y="453" width="0.7" height="15.0" fill="rgb(95,242,95)" rx="2" ry="2" />
<text  x="512.52" y="463.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1091.9" y="389" width="0.6" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="1094.88" y="399.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="626.1" y="261" width="0.7" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="629.12" y="271.5" ></text>
</g>
<g >
<title>`llvm::GVN::runImpl(llvm::Function&amp;, llvm::AssumptionCache&amp;, llv (108 samples, 5.83%)</title><rect x="161.0" y="629" width="68.8" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="164.00" y="639.5" >`llvm::..</text>
</g>
<g >
<title>`llvm::PHITransAddr::PHITranslateSubExpr(llvm::Value*, llvm::Bas (1 samples, 0.05%)</title><rect x="662.4" y="405" width="0.7" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="665.44" y="415.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::analyzeModule(llvm::Module&amp;, llvm::Targe (2 samples, 0.11%)</title><rect x="351.5" y="661" width="1.3" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="354.51" y="671.5" ></text>
</g>
<g >
<title>`tiny_size (1 samples, 0.05%)</title><rect x="935.8" y="421" width="0.6" height="15.0" fill="rgb(210,210,62)" rx="2" ry="2" />
<text  x="938.78" y="431.5" ></text>
</g>
<g >
<title>`llvm::User::dropAllReferences() (1 samples, 0.05%)</title><rect x="1176.0" y="677" width="0.6" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="1178.98" y="687.5" ></text>
</g>
<g >
<title>`llvm::SSAUpdaterTraits&lt;llvm::SSAUpdater&gt;::FindPredecessorBlocks (1 samples, 0.05%)</title><rect x="424.8" y="421" width="0.6" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="427.78" y="431.5" ></text>
</g>
<g >
<title>`SimplifyWithOpReplaced(llvm::Value*, llvm::Value*, llvm::Value* (1 samples, 0.05%)</title><rect x="1139.0" y="485" width="0.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="1142.03" y="495.5" ></text>
</g>
<g >
<title>`llvm::ReversePostOrderTraversal&lt;llvm::Function*, llvm::GraphTra (1 samples, 0.05%)</title><rect x="226.0" y="581" width="0.6" height="15.0" fill="rgb(70,219,70)" rx="2" ry="2" />
<text  x="228.99" y="591.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, unsi (1 samples, 0.05%)</title><rect x="61.6" y="581" width="0.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="64.61" y="591.5" ></text>
</g>
<g >
<title>`llvm::APInt::clearUnusedBits() (1 samples, 0.05%)</title><rect x="234.9" y="517" width="0.7" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="237.91" y="527.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedUseBits(llvm::Value*, llvm: (1 samples, 0.05%)</title><rect x="104.3" y="517" width="0.6" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="107.30" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantExprKeyType::getHash() const (1 samples, 0.05%)</title><rect x="297.4" y="405" width="0.6" height="15.0" fill="rgb(76,223,76)" rx="2" ry="2" />
<text  x="300.35" y="415.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="679.6" y="389" width="0.7" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="682.64" y="399.5" ></text>
</g>
<g >
<title>`llvm::CallInst::onlyReadsMemory() const (1 samples, 0.05%)</title><rect x="198.0" y="421" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="200.96" y="431.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="410.8" y="405" width="0.6" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="413.77" y="415.5" ></text>
</g>
<g >
<title>`llvm::Value* SimplifyCall&lt;llvm::Use*&gt;(llvm::ImmutableCallSite,  (1 samples, 0.05%)</title><rect x="657.3" y="245" width="0.7" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="660.34" y="255.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::phiTranslateImpl(llvm::BasicBlock const* (3 samples, 0.16%)</title><rect x="696.2" y="469" width="1.9" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="699.21" y="479.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="29.1" y="533" width="0.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="32.11" y="543.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyAssociativeOrCommutative(llvm::Bina (1 samples, 0.05%)</title><rect x="277.0" y="597" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="279.97" y="607.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm::Mem (2 samples, 0.11%)</title><rect x="629.9" y="325" width="1.3" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="632.95" y="335.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, llvm::Sma (2 samples, 0.11%)</title><rect x="612.1" y="405" width="1.3" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="615.11" y="415.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm:: (3 samples, 0.16%)</title><rect x="107.5" y="549" width="1.9" height="15.0" fill="rgb(76,223,76)" rx="2" ry="2" />
<text  x="110.48" y="559.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="217.7" y="293" width="0.6" height="15.0" fill="rgb(180,180,52)" rx="2" ry="2" />
<text  x="220.71" y="303.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="28.5" y="501" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="31.48" y="511.5" ></text>
</g>
<g >
<title>`llvm::ObjectSizeOffsetVisitor::compute(llvm::Value*) (1 samples, 0.05%)</title><rect x="615.9" y="245" width="0.7" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="618.93" y="255.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::MatchBSwap(llvm::BinaryOperator&amp;) (1 samples, 0.05%)</title><rect x="1138.4" y="485" width="0.6" height="15.0" fill="rgb(64,212,64)" rx="2" ry="2" />
<text  x="1141.39" y="495.5" ></text>
</g>
<g >
<title>`free_small (1 samples, 0.05%)</title><rect x="24.0" y="613" width="0.7" height="15.0" fill="rgb(203,203,60)" rx="2" ry="2" />
<text  x="27.02" y="623.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm (1 samples, 0.05%)</title><rect x="193.5" y="325" width="0.6" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="196.50" y="335.5" ></text>
</g>
<g >
<title>`CALL-WITH-COMPILATION-RESULTS^COMPILER^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="949" width="1180.0" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="13.00" y="959.5" >`CALL-WITH-COMPILATION-RESULTS^COMPILER^FN^^</text>
</g>
<g >
<title>`free_tiny (1 samples, 0.05%)</title><rect x="114.5" y="517" width="0.6" height="15.0" fill="rgb(184,184,53)" rx="2" ry="2" />
<text  x="117.49" y="527.5" ></text>
</g>
<g >
<title>`top.lsp-top130^378^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1877" width="1180.0" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="13.00" y="1887.5" >`top.lsp-top130^378^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm:: (3 samples, 0.16%)</title><rect x="569.4" y="405" width="1.9" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="572.42" y="415.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::pointsToConstantMemory(llvm::MemoryLocatio (1 samples, 0.05%)</title><rect x="597.5" y="357" width="0.6" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="600.45" y="367.5" ></text>
</g>
<g >
<title>`getValueFromCondition(llvm::Value*, llvm::Value*, bool) (1 samples, 0.05%)</title><rect x="406.3" y="357" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="409.31" y="367.5" ></text>
</g>
<g >
<title>`small_malloc_from_free_list (2 samples, 0.11%)</title><rect x="1074.7" y="405" width="1.3" height="15.0" fill="rgb(191,191,55)" rx="2" ry="2" />
<text  x="1077.68" y="415.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1091.9" y="341" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="1094.88" y="351.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="260.4" y="517" width="0.6" height="15.0" fill="rgb(224,224,68)" rx="2" ry="2" />
<text  x="263.40" y="527.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="108.8" y="485" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="111.76" y="495.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::ValueHand (24 samples, 1.30%)</title><rect x="849.8" y="421" width="15.3" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="852.76" y="431.5" ></text>
</g>
<g >
<title>`llvm::simplifyLoop(llvm::Loop*, llvm::DominatorTree*, llvm::Loo (1 samples, 0.05%)</title><rect x="738.3" y="533" width="0.6" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="741.26" y="543.5" ></text>
</g>
<g >
<title>`llvm::ScopedHashTable&lt;(anonymous namespace)::SimpleValue, llvm: (3 samples, 0.16%)</title><rect x="389.7" y="517" width="2.0" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="392.74" y="527.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (8 samples, 0.43%)</title><rect x="317.7" y="565" width="5.1" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="320.74" y="575.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (3 samples, 0.16%)</title><rect x="70.5" y="549" width="1.9" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="73.53" y="559.5" ></text>
</g>
<g >
<title>`llvm::StringMapImpl::FindKey(llvm::StringRef) const (1 samples, 0.05%)</title><rect x="399.9" y="485" width="0.7" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="402.94" y="495.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (11 samples, 0.59%)</title><rect x="391.7" y="517" width="7.0" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="394.65" y="527.5" ></text>
</g>
<g >
<title>`SafeToMergeTerminators(llvm::TerminatorInst*, llvm::TerminatorI (1 samples, 0.05%)</title><rect x="1169.6" y="453" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="1172.61" y="463.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::PointerIntPair&lt;llvm (1 samples, 0.05%)</title><rect x="211.3" y="533" width="0.7" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="214.34" y="543.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldICmpWithConstant(llvm::ICmpInst&amp;) (1 samples, 0.05%)</title><rect x="775.9" y="501" width="0.6" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="778.85" y="511.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::phiTranslate(llvm::BasicBlock const*, ll (3 samples, 0.16%)</title><rect x="227.3" y="581" width="1.9" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="230.27" y="591.5" ></text>
</g>
<g >
<title>`llvm::ConstantRange::ConstantRange(llvm::APInt) (1 samples, 0.05%)</title><rect x="220.9" y="517" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="223.90" y="527.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::Valu (18 samples, 0.97%)</title><rect x="853.6" y="405" width="11.5" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="856.59" y="415.5" ></text>
</g>
<g >
<title>`llvm::BranchProbabilityInfo::calcLoopBranchHeuristics(llvm::Bas (1 samples, 0.05%)</title><rect x="256.6" y="613" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="259.58" y="623.5" ></text>
</g>
<g >
<title>`tiny_free_list_remove_ptr (1 samples, 0.05%)</title><rect x="1177.3" y="581" width="0.6" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="1180.26" y="591.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="467.5" y="341" width="0.6" height="15.0" fill="rgb(189,189,55)" rx="2" ry="2" />
<text  x="470.47" y="351.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::lookupOrAdd(llvm::Value*) (8 samples, 0.43%)</title><rect x="586.6" y="469" width="5.1" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="589.62" y="479.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (1 samples, 0.05%)</title><rect x="247.7" y="549" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="250.66" y="559.5" ></text>
</g>
<g >
<title>`llvm::GetElementPtrConstantExpr::getSourceElementType() const (1 samples, 0.05%)</title><rect x="471.3" y="469" width="0.6" height="15.0" fill="rgb(58,208,58)" rx="2" ry="2" />
<text  x="474.30" y="479.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (2 samples, 0.11%)</title><rect x="173.7" y="421" width="1.3" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="176.75" y="431.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="247.7" y="469" width="0.6" height="15.0" fill="rgb(89,235,89)" rx="2" ry="2" />
<text  x="250.66" y="479.5" ></text>
</g>
<g >
<title>`llvm::Value::stripPointerCastsAndBarriers() const (1 samples, 0.05%)</title><rect x="652.9" y="293" width="0.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="655.88" y="303.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::getOrCreate(llvm:: (1 samples, 0.05%)</title><rect x="748.5" y="437" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="751.46" y="447.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::createSCEV(llvm::Value*) (1 samples, 0.05%)</title><rect x="131.1" y="373" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="134.06" y="383.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="512.7" y="389" width="0.6" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="515.71" y="399.5" ></text>
</g>
<g >
<title>`llvm::GEPOperator::hasAllZeroIndices() const (1 samples, 0.05%)</title><rect x="109.4" y="533" width="0.6" height="15.0" fill="rgb(58,208,58)" rx="2" ry="2" />
<text  x="112.40" y="543.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm (1 samples, 0.05%)</title><rect x="196.0" y="405" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="199.05" y="415.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1141" width="1180.0" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="13.00" y="1151.5" >`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::BlockFrequencyInfoImpl&lt;llvm::BasicBlock&gt;::calculate(llvm: (1 samples, 0.05%)</title><rect x="740.8" y="517" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="743.81" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="27.8" y="533" width="0.7" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="30.84" y="543.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (2 samples, 0.11%)</title><rect x="122.8" y="517" width="1.2" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="125.78" y="527.5" ></text>
</g>
<g >
<title>`void std::__1::vector&lt;llvm::DomTreeNodeBase&lt;llvm::BasicBlock&gt;*, (1 samples, 0.05%)</title><rect x="260.4" y="597" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="263.40" y="607.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getSimplePointerDependencyFrom(l (5 samples, 0.27%)</title><rect x="202.4" y="469" width="3.2" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="205.42" y="479.5" ></text>
</g>
<g >
<title>`llvm::TargetLibraryInfoImpl::getLibFunc(llvm::StringRef, llvm:: (1 samples, 0.05%)</title><rect x="288.4" y="517" width="0.7" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="291.43" y="527.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, std::__1:: (1 samples, 0.05%)</title><rect x="378.9" y="421" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="381.91" y="431.5" ></text>
</g>
<g >
<title>`small_free_list_add_ptr (1 samples, 0.05%)</title><rect x="257.2" y="437" width="0.7" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="260.21" y="447.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="394.2" y="437" width="0.6" height="15.0" fill="rgb(76,223,76)" rx="2" ry="2" />
<text  x="397.20" y="447.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasPHI(llvm::PHINode const*, unsigned lo (1 samples, 0.05%)</title><rect x="633.8" y="277" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="636.77" y="287.5" ></text>
</g>
<g >
<title>`top.lsp-top130^522^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1605" width="1180.0" height="15.0" fill="rgb(70,184,184)" rx="2" ry="2" />
<text  x="13.00" y="1615.5" >`top.lsp-top130^522^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::PHITransAddr::InsertPHITranslatedSubExpr(llvm::Value*, ll (1 samples, 0.05%)</title><rect x="602.5" y="421" width="0.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="605.55" y="431.5" ></text>
</g>
<g >
<title>`llvm::PMTopLevelManager::collectLastUses(llvm::SmallVectorImpl&lt; (1 samples, 0.05%)</title><rect x="159.1" y="629" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="162.09" y="639.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="410.1" y="357" width="0.7" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="413.13" y="367.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::CGPassManager::runOnModule(llvm::Module&amp; (363 samples, 19.60%)</title><rect x="10.0" y="677" width="231.3" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="13.00" y="687.5" >`(anonymous namespace)::CGPass..</text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Type*, llvm::Point (1 samples, 0.05%)</title><rect x="1110.4" y="293" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="1113.36" y="303.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, unsigned int, l (1 samples, 0.05%)</title><rect x="163.6" y="549" width="0.6" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="166.55" y="559.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="308.8" y="533" width="0.7" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="311.82" y="543.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="519.1" y="421" width="0.6" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="522.08" y="431.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedBits(llvm::Instruction*, un (1 samples, 0.05%)</title><rect x="1091.9" y="453" width="0.6" height="15.0" fill="rgb(100,245,100)" rx="2" ry="2" />
<text  x="1094.88" y="463.5" ></text>
</g>
<g >
<title>`llvm::ValueHandleBase::~ValueHandleBase() (3 samples, 0.16%)</title><rect x="1072.8" y="453" width="1.9" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="1075.76" y="463.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value const*&gt;::insert(llvm::Value c (1 samples, 0.05%)</title><rect x="149.5" y="501" width="0.7" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="152.54" y="511.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedUseBits(llvm::Value*, llvm: (1 samples, 0.05%)</title><rect x="284.0" y="533" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="286.97" y="543.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="1111.0" y="277" width="0.6" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="1113.99" y="287.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldTerminator(llvm::BasicBlock*, bool, llvm::Tar (2 samples, 0.11%)</title><rect x="721.1" y="485" width="1.2" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="724.06" y="495.5" ></text>
</g>
<g >
<title>`llvm::MemorySSA::CachingWalker::getClobberingMemoryAccess(llvm: (2 samples, 0.11%)</title><rect x="150.2" y="549" width="1.2" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="153.17" y="559.5" ></text>
</g>
<g >
<title>`llvm::collectChildrenInLoop(llvm::DomTreeNodeBase&lt;llvm::BasicBl (1 samples, 0.05%)</title><rect x="140.6" y="581" width="0.7" height="15.0" fill="rgb(89,235,89)" rx="2" ry="2" />
<text  x="143.62" y="591.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="284.6" y="501" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="287.61" y="511.5" ></text>
</g>
<g >
<title>`llvm::ScopedNoAliasAAResult::alias(llvm::MemoryLocation const&amp;, (1 samples, 0.05%)</title><rect x="624.8" y="229" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="627.85" y="239.5" ></text>
</g>
<g >
<title>`main (1,852 samples, 100.00%)</title><rect x="10.0" y="2245" width="1180.0" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="13.00" y="2255.5" >`main</text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="1135.8" y="373" width="0.7" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="1138.84" y="383.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="626.1" y="213" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="629.12" y="223.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="17.6" y="437" width="0.7" height="15.0" fill="rgb(203,203,60)" rx="2" ry="2" />
<text  x="20.65" y="447.5" ></text>
</g>
<g >
<title>`std::__1::__split_buffer&lt;llvm::Constant*, std::__1::allocator&lt;l (1 samples, 0.05%)</title><rect x="217.7" y="341" width="0.6" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="220.71" y="351.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Va (2 samples, 0.11%)</title><rect x="38.7" y="517" width="1.2" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="41.67" y="527.5" ></text>
</g>
<g >
<title>`void std::__1::vector&lt;std::__1::pair&lt;llvm::BasicBlock const*, l (1 samples, 0.05%)</title><rect x="744.6" y="501" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="747.63" y="511.5" ></text>
</g>
<g >
<title>`llvm::Value* SimplifyCall&lt;llvm::Use*&gt;(llvm::ImmutableCallSite,  (1 samples, 0.05%)</title><rect x="655.4" y="277" width="0.7" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="658.43" y="287.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (1 samples, 0.05%)</title><rect x="147.6" y="581" width="0.7" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="150.62" y="591.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Va (1 samples, 0.05%)</title><rect x="406.3" y="373" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="409.31" y="383.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasPHI(llvm::PHINode const*, unsigned lo (4 samples, 0.22%)</title><rect x="192.9" y="405" width="2.5" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="195.86" y="415.5" ></text>
</g>
<g >
<title>`llvm::ValueHandleBase::AddToUseList() (1 samples, 0.05%)</title><rect x="726.2" y="517" width="0.6" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="729.16" y="527.5" ></text>
</g>
<g >
<title>`llvm::ValueHandleBase::RemoveFromUseList() (79 samples, 4.27%)</title><rect x="814.7" y="437" width="50.4" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="817.72" y="447.5" >`llvm..</text>
</g>
<g >
<title>`isObjectSmallerThan(llvm::Value const*, unsigned long long, llv (1 samples, 0.05%)</title><rect x="651.0" y="197" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="653.97" y="207.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitLShr(llvm::BinaryOperator&amp;) (2 samples, 0.11%)</title><rect x="1123.7" y="501" width="1.3" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="1126.74" y="511.5" ></text>
</g>
<g >
<title>`small_malloc_should_clear (1 samples, 0.05%)</title><rect x="409.5" y="245" width="0.6" height="15.0" fill="rgb(179,179,51)" rx="2" ry="2" />
<text  x="412.49" y="255.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value const*, llvm (1 samples, 0.05%)</title><rect x="603.2" y="405" width="0.6" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="606.19" y="415.5" ></text>
</g>
<g >
<title>`llvm::CallSiteBase&lt;llvm::Function, llvm::BasicBlock, llvm::Valu (1 samples, 0.05%)</title><rect x="42.5" y="613" width="0.6" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="45.49" y="623.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (2 samples, 0.11%)</title><rect x="648.4" y="261" width="1.3" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="651.42" y="271.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::BasicBlock const*, llvm::Loop*, llvm::Dens (1 samples, 0.05%)</title><rect x="157.2" y="597" width="0.6" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="160.18" y="607.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (2 samples, 0.11%)</title><rect x="1142.2" y="405" width="1.3" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="1145.21" y="415.5" ></text>
</g>
<g >
<title>`llvm::SimplifySelectInst(llvm::Value*, llvm::Value*, llvm::Valu (1 samples, 0.05%)</title><rect x="1112.3" y="405" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="1115.27" y="415.5" ></text>
</g>
<g >
<title>`llvm::CallGraphWrapperPass::runOnModule(llvm::Module&amp;) (2 samples, 0.11%)</title><rect x="243.8" y="677" width="1.3" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="246.83" y="687.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (1 samples, 0.05%)</title><rect x="327.9" y="581" width="0.7" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="330.94" y="591.5" ></text>
</g>
<g >
<title>`llvm::APInt::zextOrTrunc(unsigned int) const (1 samples, 0.05%)</title><rect x="306.9" y="437" width="0.6" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="309.91" y="447.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::getBackedgeTakenInfo(llvm::Loop const*) (1 samples, 0.05%)</title><rect x="555.4" y="485" width="0.6" height="15.0" fill="rgb(106,252,106)" rx="2" ry="2" />
<text  x="558.40" y="495.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::getOrCreate(llvm:: (2 samples, 0.11%)</title><rect x="71.2" y="517" width="1.2" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="74.17" y="527.5" ></text>
</g>
<g >
<title>`llvm::salvageDebugInfo(llvm::Instruction&amp;) (1 samples, 0.05%)</title><rect x="1133.9" y="469" width="0.7" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="1136.93" y="479.5" ></text>
</g>
<g >
<title>`malloc (2 samples, 0.11%)</title><rect x="668.8" y="357" width="1.3" height="15.0" fill="rgb(229,229,69)" rx="2" ry="2" />
<text  x="671.81" y="367.5" ></text>
</g>
<g >
<title>`getValueFromCondition(llvm::Value*, llvm::Value*, bool, llvm::D (1 samples, 0.05%)</title><rect x="382.1" y="405" width="0.6" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="385.10" y="415.5" ></text>
</g>
<g >
<title>`llvm::PHINode::PHINode(llvm::Type*, unsigned int, llvm::Twine c (1 samples, 0.05%)</title><rect x="703.2" y="469" width="0.7" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="706.22" y="479.5" ></text>
</g>
<g >
<title>`llvm::Value::setNameImpl(llvm::Twine const&amp;) (1 samples, 0.05%)</title><rect x="530.6" y="453" width="0.6" height="15.0" fill="rgb(84,232,84)" rx="2" ry="2" />
<text  x="533.55" y="463.5" ></text>
</g>
<g >
<title>`llvm::DenseMapInfo&lt;std::__1::pair&lt;llvm::Value*, llvm::BasicBloc (1 samples, 0.05%)</title><rect x="406.9" y="421" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="409.94" y="431.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::dumpUsedSet(llvm::Pass const*) const (1 samples, 0.05%)</title><rect x="350.9" y="661" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="353.87" y="671.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LoopLoadElimination::runOnFunction(llvm: (1 samples, 0.05%)</title><rect x="250.8" y="645" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="253.84" y="655.5" ></text>
</g>
<g >
<title>`llvm::hashing::detail::hash_short(char const*, unsigned long, u (1 samples, 0.05%)</title><rect x="97.3" y="453" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="100.29" y="463.5" ></text>
</g>
<g >
<title>`llvm::getConstantStringInfo(llvm::Value const*, llvm::StringRef (1 samples, 0.05%)</title><rect x="74.4" y="565" width="0.6" height="15.0" fill="rgb(52,201,52)" rx="2" ry="2" />
<text  x="77.35" y="575.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (2 samples, 0.11%)</title><rect x="48.9" y="565" width="1.2" height="15.0" fill="rgb(217,217,65)" rx="2" ry="2" />
<text  x="51.87" y="575.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (7 samples, 0.38%)</title><rect x="535.0" y="405" width="4.5" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="538.01" y="415.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;std::__1::pair&lt;llvm::Memo (1 samples, 0.05%)</title><rect x="652.2" y="261" width="0.7" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="655.25" y="271.5" ></text>
</g>
<g >
<title>`llvm::LoopAccessLegacyAnalysis::getInfo(llvm::Loop*) (1 samples, 0.05%)</title><rect x="250.8" y="597" width="0.7" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="253.84" y="607.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (1 samples, 0.05%)</title><rect x="672.0" y="437" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="675.00" y="447.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorImpl&lt;clang::SourceLocation&gt;::operator=(llvm::S (1 samples, 0.05%)</title><rect x="167.4" y="469" width="0.6" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="170.38" y="479.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_range_impl&lt; (1 samples, 0.05%)</title><rect x="390.4" y="485" width="0.6" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="393.38" y="495.5" ></text>
</g>
<g >
<title>`llvm::Value* SimplifyCall&lt;llvm::Use*&gt;(llvm::ImmutableCallSite,  (1 samples, 0.05%)</title><rect x="290.3" y="565" width="0.7" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="293.35" y="575.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;std::__1::pair&lt;llvm::BasicBlock*, llvm::BasicBlo (1 samples, 0.05%)</title><rect x="709.0" y="453" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="711.95" y="463.5" ></text>
</g>
<g >
<title>`void std::__1::vector&lt;std::__1::pair&lt;llvm::BasicBlock*, llvm::O (1 samples, 0.05%)</title><rect x="735.1" y="501" width="0.6" height="15.0" fill="rgb(101,246,101)" rx="2" ry="2" />
<text  x="738.08" y="511.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::BasicBlock*, llvm::Value*, llvm::DenseMapI (1 samples, 0.05%)</title><rect x="422.9" y="469" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="425.87" y="479.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, unsigned int, (anonymous n (1 samples, 0.05%)</title><rect x="326.0" y="549" width="0.7" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="329.03" y="559.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::lookupOrAddCall(llvm::CallInst*) (2 samples, 0.11%)</title><rect x="169.3" y="549" width="1.3" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="172.29" y="559.5" ></text>
</g>
<g >
<title>`llvm::simplifyCFG(llvm::BasicBlock*, llvm::TargetTransformInfo  (1 samples, 0.05%)</title><rect x="717.2" y="469" width="0.7" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="720.24" y="479.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="374.4" y="405" width="0.7" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="377.45" y="415.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getTerminator() const (1 samples, 0.05%)</title><rect x="22.1" y="533" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="25.11" y="543.5" ></text>
</g>
<g >
<title>`llvm::GEPOperator::accumulateConstantOffset(llvm::DataLayout co (1 samples, 0.05%)</title><rect x="473.8" y="437" width="0.7" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="476.84" y="447.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (2 samples, 0.11%)</title><rect x="868.9" y="469" width="1.3" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="871.88" y="479.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::MapInfo::getHashVa (1 samples, 0.05%)</title><rect x="57.1" y="517" width="0.7" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="60.15" y="527.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;unsigned long long, llv (1 samples, 0.05%)</title><rect x="1189.4" y="725" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="1192.36" y="735.5" ></text>
</g>
<g >
<title>`llvm::Type::getPrimitiveSizeInBits() const (1 samples, 0.05%)</title><rect x="141.3" y="581" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="144.25" y="591.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldICmpEquality(llvm::ICmpInst&amp;) (1 samples, 0.05%)</title><rect x="514.6" y="485" width="0.7" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="517.62" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SimplifyCFGOpt::run(llvm::BasicBlock*) (7 samples, 0.38%)</title><rect x="233.0" y="597" width="4.5" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="236.00" y="607.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="638.2" y="341" width="0.7" height="15.0" fill="rgb(202,202,59)" rx="2" ry="2" />
<text  x="641.23" y="351.5" ></text>
</g>
<g >
<title>`default_zone_malloc (1 samples, 0.05%)</title><rect x="422.9" y="405" width="0.6" height="15.0" fill="rgb(176,176,50)" rx="2" ry="2" />
<text  x="425.87" y="415.5" ></text>
</g>
<g >
<title>`tiny_free_no_lock (1 samples, 0.05%)</title><rect x="422.2" y="437" width="0.7" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="425.24" y="447.5" ></text>
</g>
<g >
<title>`SimplifyAddInst(llvm::Value*, llvm::Value*, bool, bool, llvm::S (1 samples, 0.05%)</title><rect x="78.2" y="581" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="81.17" y="591.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (3 samples, 0.16%)</title><rect x="191.0" y="389" width="1.9" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="193.95" y="399.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatticeElement, llvm::D (1 samples, 0.05%)</title><rect x="406.3" y="293" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="409.31" y="303.5" ></text>
</g>
<g >
<title>`FUNWIND-PROTECT^CORE^FN^^ (1,268 samples, 68.47%)</title><rect x="368.1" y="693" width="807.9" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="371.08" y="703.5" >`FUNWIND-PROTECT^CORE^FN^^</text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value const*&gt;::insert(llvm::Value c (1 samples, 0.05%)</title><rect x="529.3" y="437" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="532.28" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getValueInBlock(llvm: (3 samples, 0.16%)</title><rect x="373.8" y="501" width="1.9" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="376.81" y="511.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="507.0" y="373" width="0.6" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="509.98" y="383.5" ></text>
</g>
<g >
<title>`CanPHITrans(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="180.8" y="517" width="0.6" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="183.76" y="527.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (2 samples, 0.11%)</title><rect x="270.6" y="565" width="1.3" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="273.59" y="575.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::getModRefBehavior(llvm::ImmutableCallSite) (1 samples, 0.05%)</title><rect x="656.1" y="309" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="659.07" y="319.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="394.2" y="469" width="0.6" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="397.20" y="479.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::commonShiftTransforms(llvm::BinaryOperator&amp; (1 samples, 0.05%)</title><rect x="325.4" y="581" width="0.6" height="15.0" fill="rgb(77,224,77)" rx="2" ry="2" />
<text  x="328.39" y="591.5" ></text>
</g>
<g >
<title>`llvm::Constant::getNullValue(llvm::Type*) (1 samples, 0.05%)</title><rect x="451.5" y="453" width="0.7" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="454.54" y="463.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;unsigned int, llvm::GVN::Lead (2 samples, 0.11%)</title><rect x="170.6" y="549" width="1.2" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="173.56" y="559.5" ></text>
</g>
<g >
<title>`llvm::MemorySSA::createMemoryPhi(llvm::BasicBlock*) (1 samples, 0.05%)</title><rect x="572.6" y="485" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="575.60" y="495.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;unsigned long long, llv (1 samples, 0.05%)</title><rect x="1189.4" y="693" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="1192.36" y="703.5" ></text>
</g>
<g >
<title>`stripAndComputeConstantOffsets(llvm::DataLayout const&amp;, llvm::V (1 samples, 0.05%)</title><rect x="508.3" y="453" width="0.6" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="511.25" y="463.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="217.7" y="405" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="220.71" y="415.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getSinglePredecessor() const (1 samples, 0.05%)</title><rect x="404.4" y="501" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="407.40" y="511.5" ></text>
</g>
<g >
<title>`llvm::BlockFrequencyInfo::calculate(llvm::Function const&amp;, llvm (1 samples, 0.05%)</title><rect x="740.8" y="533" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="743.81" y="543.5" ></text>
</g>
<g >
<title>`llvm::sroa::AllocaSlices::SliceBuilder::SliceBuilder(llvm::Data (1 samples, 0.05%)</title><rect x="708.3" y="485" width="0.7" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="711.32" y="495.5" ></text>
</g>
<g >
<title>`llvm::BlockFrequencyInfoImpl&lt;llvm::BasicBlock&gt;::calculate(llvm: (3 samples, 0.16%)</title><rect x="254.0" y="613" width="1.9" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="257.03" y="623.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (2 samples, 0.11%)</title><rect x="405.0" y="453" width="1.3" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="408.03" y="463.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, unsigned  (5 samples, 0.27%)</title><rect x="477.0" y="501" width="3.2" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="480.03" y="511.5" ></text>
</g>
<g >
<title>`llvm::Value::getPointerAlignment(llvm::DataLayout const&amp;) const (1 samples, 0.05%)</title><rect x="1137.8" y="437" width="0.6" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="1140.75" y="447.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (6 samples, 0.32%)</title><rect x="1141.6" y="469" width="3.8" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="1144.58" y="479.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::FoldReinterpretLoadFromConstPtr(llvm::Co (3 samples, 0.16%)</title><rect x="452.2" y="485" width="1.9" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="455.18" y="495.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, unsigned long long, bool) (1 samples, 0.05%)</title><rect x="767.6" y="437" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="770.57" y="447.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (24 samples, 1.30%)</title><rect x="496.1" y="485" width="15.3" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="499.14" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::GlobalOptLegacyPass::runOnModule(llvm::M (2 samples, 0.11%)</title><rect x="726.8" y="581" width="1.3" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="729.79" y="591.5" ></text>
</g>
<g >
<title>`getFoldedCast(llvm::Instruction::CastOps, llvm::Constant*, llvm (1 samples, 0.05%)</title><rect x="752.9" y="485" width="0.7" height="15.0" fill="rgb(71,220,71)" rx="2" ry="2" />
<text  x="755.92" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::GlobalValue const*&gt;::find(llvm::Glo (1 samples, 0.05%)</title><rect x="199.2" y="405" width="0.7" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="202.23" y="415.5" ></text>
</g>
<g >
<title>`llvm::ConstantRange::ConstantRange(llvm::APInt, llvm::APInt) (1 samples, 0.05%)</title><rect x="419.7" y="341" width="0.6" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="422.69" y="351.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (2 samples, 0.11%)</title><rect x="508.9" y="469" width="1.3" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="511.89" y="479.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::BasicBlock const*, llvm::Loop* (1 samples, 0.05%)</title><rect x="339.4" y="581" width="0.6" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="342.41" y="591.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldICmpBinOp(llvm::ICmpInst&amp;) (1 samples, 0.05%)</title><rect x="313.3" y="581" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="316.28" y="591.5" ></text>
</g>
<g >
<title>`llvm::Instruction::getModule() const (1 samples, 0.05%)</title><rect x="137.4" y="581" width="0.7" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="140.43" y="591.5" ></text>
</g>
<g >
<title>`getValueFromCondition(llvm::Value*, llvm::Value*, bool) (2 samples, 0.11%)</title><rect x="15.7" y="533" width="1.3" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="18.73" y="543.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="723.6" y="421" width="0.6" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="726.61" y="431.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="405.0" y="405" width="0.7" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="408.03" y="415.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::ImmutableCallSite, llvm::M (3 samples, 0.16%)</title><rect x="656.1" y="325" width="1.9" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="659.07" y="335.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (3 samples, 0.16%)</title><rect x="749.7" y="469" width="1.9" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="752.73" y="479.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::BinaryOp_match&lt;llvm::PatternMatch::bin (1 samples, 0.05%)</title><rect x="393.6" y="469" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="396.56" y="479.5" ></text>
</g>
<g >
<title>`llvm::OperandBundleUser&lt;llvm::CallInst, llvm::Use*&gt;::getNumOper (1 samples, 0.05%)</title><rect x="656.1" y="277" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="659.07" y="287.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="59.7" y="501" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="62.70" y="511.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::ImmutableCallSite, llvm::M (1 samples, 0.05%)</title><rect x="527.4" y="421" width="0.6" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="530.37" y="431.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitBitCast(llvm::BitCastInst&amp;) (1 samples, 0.05%)</title><rect x="485.3" y="501" width="0.7" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="488.31" y="511.5" ></text>
</g>
<g >
<title>`llvm::computeOverflowForSignedAdd(llvm::Value const*, llvm::Val (1 samples, 0.05%)</title><rect x="1152.4" y="501" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="1155.41" y="511.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (1 samples, 0.05%)</title><rect x="619.1" y="149" width="0.7" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="622.11" y="159.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, unsi (3 samples, 0.16%)</title><rect x="769.5" y="485" width="1.9" height="15.0" fill="rgb(106,252,106)" rx="2" ry="2" />
<text  x="772.48" y="495.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;unsigned long long, llv (1 samples, 0.05%)</title><rect x="1189.4" y="757" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="1192.36" y="767.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::Instruction*, unsig (1 samples, 0.05%)</title><rect x="1125.6" y="389" width="0.7" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="1128.65" y="399.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="681.6" y="405" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="684.56" y="415.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="544.6" y="437" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="547.57" y="447.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std::__1:: (1 samples, 0.05%)</title><rect x="1163.9" y="485" width="0.6" height="15.0" fill="rgb(69,218,69)" rx="2" ry="2" />
<text  x="1166.88" y="495.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (2 samples, 0.11%)</title><rect x="319.0" y="485" width="1.3" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="322.02" y="495.5" ></text>
</g>
<g >
<title>`llvm::GetElementPtrInst::getIndexedType(llvm::Type*, llvm::Arra (1 samples, 0.05%)</title><rect x="1099.5" y="469" width="0.7" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="1102.52" y="479.5" ></text>
</g>
<g >
<title>`llvm::OperandBundleUser&lt;llvm::CallInst, llvm::Use*&gt;::getOperand (1 samples, 0.05%)</title><rect x="487.9" y="437" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="490.86" y="447.5" ></text>
</g>
<g >
<title>`llvm::JumpThreadingPass::runImpl(llvm::Function&amp;, llvm::TargetL (15 samples, 0.81%)</title><rect x="31.0" y="629" width="9.6" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="34.03" y="639.5" ></text>
</g>
<g >
<title>`small_free_list_remove_ptr_no_clear (1 samples, 0.05%)</title><rect x="1167.1" y="469" width="0.6" height="15.0" fill="rgb(184,184,53)" rx="2" ry="2" />
<text  x="1170.06" y="479.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldOpIntoPhi(llvm::Instruction&amp;, llvm::PHI (3 samples, 0.16%)</title><rect x="773.3" y="485" width="1.9" height="15.0" fill="rgb(65,213,65)" rx="2" ry="2" />
<text  x="776.30" y="495.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::~BasicBlock() (3 samples, 0.16%)</title><rect x="1176.0" y="693" width="1.9" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="1178.98" y="703.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="422.9" y="421" width="0.6" height="15.0" fill="rgb(192,192,56)" rx="2" ry="2" />
<text  x="425.87" y="431.5" ></text>
</g>
<g >
<title>`llvm::AAResultsWrapperPass::runOnFunction(llvm::Function&amp;) (2 samples, 0.11%)</title><rect x="738.9" y="549" width="1.3" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="741.90" y="559.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::add(llvm::LoadInst*) (3 samples, 0.16%)</title><rect x="133.6" y="581" width="1.9" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="136.61" y="591.5" ></text>
</g>
<g >
<title>`tiny_free_no_lock (1 samples, 0.05%)</title><rect x="158.5" y="501" width="0.6" height="15.0" fill="rgb(221,221,67)" rx="2" ry="2" />
<text  x="161.46" y="511.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldLoadFromConstPtr(llvm::Constant*, llvm::Type* (1 samples, 0.05%)</title><rect x="768.2" y="469" width="0.6" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="771.21" y="479.5" ></text>
</g>
<g >
<title>`free (1 samples, 0.05%)</title><rect x="501.2" y="325" width="0.7" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="504.24" y="335.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (2 samples, 0.11%)</title><rect x="512.7" y="469" width="1.3" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="515.71" y="479.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="29.1" y="565" width="0.7" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="32.11" y="575.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::BasicBlock*, llvm::DomTreeBuil (1 samples, 0.05%)</title><rect x="601.9" y="325" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="604.91" y="335.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::PoisoningVH&lt;llvm::B (1 samples, 0.05%)</title><rect x="373.8" y="453" width="0.6" height="15.0" fill="rgb(101,246,101)" rx="2" ry="2" />
<text  x="376.81" y="463.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (15 samples, 0.81%)</title><rect x="216.4" y="565" width="9.6" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="219.44" y="575.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::alias(llvm::MemoryLocation const&amp;, llvm: (1 samples, 0.05%)</title><rect x="646.5" y="245" width="0.6" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="649.51" y="255.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value*&gt;::find(llvm::Value const*) c (1 samples, 0.05%)</title><rect x="387.2" y="389" width="0.6" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="390.19" y="399.5" ></text>
</g>
<g >
<title>`ThreadCmpOverSelect(llvm::CmpInst::Predicate, llvm::Value*, llv (1 samples, 0.05%)</title><rect x="498.1" y="469" width="0.6" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="501.06" y="479.5" ></text>
</g>
<g >
<title>`llvm::SimplifyCall(llvm::ImmutableCallSite, llvm::SimplifyQuery (1 samples, 0.05%)</title><rect x="290.3" y="581" width="0.7" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="293.35" y="591.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="247.7" y="501" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="250.66" y="511.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm: (1 samples, 0.05%)</title><rect x="668.2" y="357" width="0.6" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="671.17" y="367.5" ></text>
</g>
<g >
<title>`llvm::BlockFrequencyInfoImpl&lt;llvm::BasicBlock&gt;::computeMassInFu (1 samples, 0.05%)</title><rect x="254.0" y="597" width="0.7" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="257.03" y="607.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="747.8" y="453" width="0.7" height="15.0" fill="rgb(82,230,82)" rx="2" ry="2" />
<text  x="750.82" y="463.5" ></text>
</g>
<g >
<title>`llvm::User::operator new(unsigned long, unsigned int) (1 samples, 0.05%)</title><rect x="572.0" y="485" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="574.97" y="495.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^181^TOP-COMPILE-FILE (1,830 samples, 98.81%)</title><rect x="10.0" y="821" width="1166.0" height="15.0" fill="rgb(92,203,203)" rx="2" ry="2" />
<text  x="13.00" y="831.5" >`compile-file.lsp-compile-file52^181^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::formLCSSAForInstructions(llvm::SmallVectorImpl&lt;llvm::Inst (2 samples, 0.11%)</title><rect x="425.4" y="453" width="1.3" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="428.42" y="463.5" ></text>
</g>
<g >
<title>`llvm::po_iterator&lt;llvm::BasicBlock*, llvm::SmallPtrSet&lt;llvm::Ba (1 samples, 0.05%)</title><rect x="226.0" y="565" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="228.99" y="575.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitGetElementPtrInst(llvm::GetElementPtrI (6 samples, 0.32%)</title><rect x="491.7" y="501" width="3.8" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="494.68" y="511.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="1168.3" y="469" width="0.7" height="15.0" fill="rgb(190,190,55)" rx="2" ry="2" />
<text  x="1171.34" y="479.5" ></text>
</g>
<g >
<title>`FUNWIND-PROTECT^CORE^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="1573" width="1180.0" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="13.00" y="1583.5" >`FUNWIND-PROTECT^CORE^FN^^</text>
</g>
<g >
<title>`llvm::iplist_impl&lt;llvm::simple_ilist&lt;llvm::Instruction&gt;, llvm:: (2 samples, 0.11%)</title><rect x="1176.6" y="677" width="1.3" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="1179.62" y="687.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObjects(llvm::Value*, llvm::SmallVectorImpl&lt; (1 samples, 0.05%)</title><rect x="295.4" y="517" width="0.7" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="298.44" y="527.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::BranchProbabilityIn (1 samples, 0.05%)</title><rect x="256.6" y="581" width="0.6" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="259.58" y="591.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (1 samples, 0.05%)</title><rect x="29.8" y="597" width="0.6" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="32.75" y="607.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="295.4" y="485" width="0.7" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="298.44" y="495.5" ></text>
</g>
<g >
<title>`llvm::GetElementPtrInst::Create(llvm::Type*, llvm::Value*, llvm (1 samples, 0.05%)</title><rect x="1092.5" y="485" width="0.7" height="15.0" fill="rgb(63,211,63)" rx="2" ry="2" />
<text  x="1095.52" y="495.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitLShr(llvm::BinaryOperator&amp;) (2 samples, 0.11%)</title><rect x="105.6" y="597" width="1.2" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="108.57" y="607.5" ></text>
</g>
<g >
<title>`SortNonLocalDepInfoCache(std::__1::vector&lt;llvm::NonLocalDepEntr (8 samples, 0.43%)</title><rect x="605.7" y="421" width="5.1" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="608.73" y="431.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;void const*, llvm::Pass*, llv (1 samples, 0.05%)</title><rect x="342.6" y="613" width="0.6" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="345.59" y="623.5" ></text>
</g>
<g >
<title>`FUNWIND-PROTECT^CORE^FN^^ (16 samples, 0.86%)</title><rect x="1179.8" y="837" width="10.2" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="1182.81" y="847.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="326.0" y="501" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="329.03" y="511.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="225.4" y="517" width="0.6" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="228.36" y="527.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::getModRefInfo(llvm::ImmutableCallSite, l (1 samples, 0.05%)</title><rect x="199.2" y="421" width="0.7" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="202.23" y="431.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (8 samples, 0.43%)</title><rect x="433.1" y="517" width="5.1" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="436.07" y="527.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (24 samples, 1.30%)</title><rect x="295.4" y="581" width="15.3" height="15.0" fill="rgb(64,212,64)" rx="2" ry="2" />
<text  x="298.44" y="591.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (2 samples, 0.11%)</title><rect x="71.2" y="469" width="1.2" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="74.17" y="479.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::MoveHelper(unsigned int, llvm::Small (1 samples, 0.05%)</title><rect x="183.3" y="437" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="186.30" y="447.5" ></text>
</g>
<g >
<title>`llvm::isInstructionTriviallyDead(llvm::Instruction*, llvm::Targ (2 samples, 0.11%)</title><rect x="1153.0" y="501" width="1.3" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="1156.05" y="511.5" ></text>
</g>
<g >
<title>`llvm::LazyValueInfo::getPredicateAt(unsigned int, llvm::Value*, (16 samples, 0.86%)</title><rect x="376.4" y="517" width="10.2" height="15.0" fill="rgb(101,246,101)" rx="2" ry="2" />
<text  x="379.36" y="527.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::GVN::Expression, unsign (1 samples, 0.05%)</title><rect x="589.2" y="389" width="0.6" height="15.0" fill="rgb(63,211,63)" rx="2" ry="2" />
<text  x="592.17" y="399.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (1 samples, 0.05%)</title><rect x="250.2" y="565" width="0.6" height="15.0" fill="rgb(89,235,89)" rx="2" ry="2" />
<text  x="253.21" y="575.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeBase&lt;llvm::BasicBlock, false&gt;::dominates(llv (1 samples, 0.05%)</title><rect x="562.4" y="517" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="565.41" y="527.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SCCPSolver::visitTerminatorInst(llvm::Te (1 samples, 0.05%)</title><rect x="709.0" y="517" width="0.6" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="711.95" y="527.5" ></text>
</g>
<g >
<title>`llvm::DominatorTree::dominates(llvm::BasicBlockEdge const&amp;, llv (5 samples, 0.27%)</title><rect x="675.2" y="437" width="3.2" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="678.18" y="447.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitAdd(llvm::BinaryOperator&amp;) (7 samples, 0.38%)</title><rect x="278.9" y="597" width="4.4" height="15.0" fill="rgb(52,201,52)" rx="2" ry="2" />
<text  x="281.88" y="607.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldCastInstruction(unsigned int, llvm::Constant* (1 samples, 0.05%)</title><rect x="451.5" y="469" width="0.7" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="454.54" y="479.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasSelect(llvm::SelectInst const*, unsig (1 samples, 0.05%)</title><rect x="596.2" y="277" width="0.6" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="599.18" y="287.5" ></text>
</g>
<g >
<title>`llvm::getObjectSize(llvm::Value const*, unsigned long long&amp;, ll (6 samples, 0.32%)</title><rect x="185.9" y="389" width="3.8" height="15.0" fill="rgb(83,231,83)" rx="2" ry="2" />
<text  x="188.85" y="399.5" ></text>
</g>
<g >
<title>`llvm::LazyValueInfo::getPredicateOnEdge(unsigned int, llvm::Val (5 samples, 0.27%)</title><rect x="37.4" y="581" width="3.2" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="40.40" y="591.5" ></text>
</g>
<g >
<title>`llvm::SimplifyCall(llvm::ImmutableCallSite, llvm::SimplifyQuery (1 samples, 0.05%)</title><rect x="656.7" y="261" width="0.6" height="15.0" fill="rgb(53,202,53)" rx="2" ry="2" />
<text  x="659.71" y="271.5" ></text>
</g>
<g >
<title>`simplifyICmpWithConstant(llvm::CmpInst::Predicate, llvm::Value* (3 samples, 0.16%)</title><rect x="99.8" y="565" width="1.9" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="102.84" y="575.5" ></text>
</g>
<g >
<title>`llvm::MemorySSAWrapperPass::runOnFunction(llvm::Function&amp;) (9 samples, 0.49%)</title><rect x="148.3" y="645" width="5.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="151.26" y="655.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="565.0" y="469" width="0.6" height="15.0" fill="rgb(94,241,94)" rx="2" ry="2" />
<text  x="567.96" y="479.5" ></text>
</g>
<g >
<title>`llvm::PredIteratorCache::GetNumPreds(llvm::BasicBlock*) const (1 samples, 0.05%)</title><rect x="205.6" y="517" width="0.6" height="15.0" fill="rgb(63,211,63)" rx="2" ry="2" />
<text  x="208.60" y="527.5" ></text>
</g>
<g >
<title>`OPTIMIZE-MODULE-FOR-COMPILE-FILE^COMPILER^FN^^ (562 samples, 30.35%)</title><rect x="10.0" y="773" width="358.1" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="13.00" y="783.5" >`OPTIMIZE-MODULE-FOR-COMPILE-FILE^COMPILER^FN^^</text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="225.4" y="501" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="228.36" y="511.5" ></text>
</g>
<g >
<title>`llvm::BlockFrequencyInfoImpl&lt;llvm::BasicBlock&gt;::computeMassInLo (1 samples, 0.05%)</title><rect x="254.7" y="597" width="0.6" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="257.67" y="607.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="119.6" y="517" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="122.59" y="527.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="338.1" y="597" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="341.13" y="607.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::removeDeadPasses(llvm::Pass*, llvm::String (4 samples, 0.22%)</title><rect x="342.6" y="645" width="2.5" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="345.59" y="655.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Va (7 samples, 0.38%)</title><rect x="379.5" y="437" width="4.5" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="382.55" y="447.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::BasicBlock*, llvm::Value*&gt;* ll (1 samples, 0.05%)</title><rect x="350.2" y="549" width="0.7" height="15.0" fill="rgb(63,211,63)" rx="2" ry="2" />
<text  x="353.24" y="559.5" ></text>
</g>
<g >
<title>`llvm::Value::getName() const (1 samples, 0.05%)</title><rect x="603.2" y="437" width="0.6" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="606.19" y="447.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="649.7" y="277" width="0.6" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="652.70" y="287.5" ></text>
</g>
<g >
<title>`llvm::InstCombineWorklist::AddInitialGroup(llvm::ArrayRef&lt;llvm: (1 samples, 0.05%)</title><rect x="455.4" y="517" width="0.6" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="458.37" y="527.5" ></text>
</g>
<g >
<title>`llvm::GVN::propagateEquality(llvm::Value*, llvm::Value*, llvm:: (7 samples, 0.38%)</title><rect x="212.0" y="565" width="4.4" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="214.98" y="575.5" ></text>
</g>
<g >
<title>`llvm::LoopBase&lt;llvm::BasicBlock, llvm::Loop&gt;::getExitBlocks(llv (1 samples, 0.05%)</title><rect x="558.6" y="485" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="561.59" y="495.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, unsigned long long, bool) (1 samples, 0.05%)</title><rect x="731.3" y="437" width="0.6" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="734.25" y="447.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (1 samples, 0.05%)</title><rect x="338.1" y="581" width="0.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="341.13" y="591.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="375.1" y="389" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="378.09" y="399.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="680.3" y="341" width="0.6" height="15.0" fill="rgb(191,191,55)" rx="2" ry="2" />
<text  x="683.28" y="351.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::BasicBlock*, std::__1::unique_ptr&lt;llvm::Do (1 samples, 0.05%)</title><rect x="1163.9" y="501" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="1166.88" y="511.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::ImmutableCallSite, llvm::M (1 samples, 0.05%)</title><rect x="597.5" y="373" width="0.6" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="600.45" y="383.5" ></text>
</g>
<g >
<title>`llvm::APInt::operator*(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="92.8" y="421" width="0.7" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="95.83" y="431.5" ></text>
</g>
<g >
<title>`llvm::LazyValueInfo::getPredicateAt(unsigned int, llvm::Value*, (6 samples, 0.32%)</title><rect x="18.9" y="613" width="3.8" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="21.92" y="623.5" ></text>
</g>
<g >
<title>`llvm::AssumptionCache::assumptionsFor(llvm::Value const*) (1 samples, 0.05%)</title><rect x="13.2" y="565" width="0.6" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="16.19" y="575.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (81 samples, 4.37%)</title><rect x="873.3" y="453" width="51.6" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="876.34" y="463.5" >`llvm..</text>
</g>
<g >
<title>`llvm::ConstantFoldLoadFromConstPtr(llvm::Constant*, llvm::Type* (2 samples, 0.11%)</title><rect x="690.5" y="437" width="1.2" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="693.48" y="447.5" ></text>
</g>
<g >
<title>`operator delete(void*) (1 samples, 0.05%)</title><rect x="443.3" y="437" width="0.6" height="15.0" fill="rgb(191,191,55)" rx="2" ry="2" />
<text  x="446.26" y="447.5" ></text>
</g>
<g >
<title>`llvm::IRBuilderBase::SetInsertPoint(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="721.7" y="469" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="724.70" y="479.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (13 samples, 0.70%)</title><rect x="498.7" y="437" width="8.3" height="15.0" fill="rgb(53,202,53)" rx="2" ry="2" />
<text  x="501.69" y="447.5" ></text>
</g>
<g >
<title>`llvm::ReplaceableMetadataImpl::getIfExists(llvm::Metadata&amp;) (1 samples, 0.05%)</title><rect x="771.4" y="469" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="774.39" y="479.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (2 samples, 0.11%)</title><rect x="92.2" y="501" width="1.3" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="95.19" y="511.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Va (5 samples, 0.27%)</title><rect x="13.8" y="549" width="3.2" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="16.82" y="559.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="596.2" y="293" width="0.6" height="15.0" fill="rgb(95,242,95)" rx="2" ry="2" />
<text  x="599.18" y="303.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv_ov(llvm::APInt const&amp;, bool&amp;) const (2 samples, 0.11%)</title><rect x="449.0" y="469" width="1.3" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="452.00" y="479.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="647.1" y="53" width="0.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="650.15" y="63.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::computeBackedgeTakenCount(llvm::Loop con (1 samples, 0.05%)</title><rect x="555.4" y="469" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="558.40" y="479.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::getOrCreate(llvm:: (1 samples, 0.05%)</title><rect x="684.7" y="357" width="0.7" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="687.74" y="367.5" ></text>
</g>
<g >
<title>`compiler-conditions.lsp-compiler-conditions125^205^TOP-COMPILE- (1,852 samples, 100.00%)</title><rect x="10.0" y="1237" width="1180.0" height="15.0" fill="rgb(102,213,213)" rx="2" ry="2" />
<text  x="13.00" y="1247.5" >`compiler-conditions.lsp-compiler-conditions125^205^TOP-COMPILE-</text>
</g>
<g >
<title>`llvm::GVN::ValueTable::phiTranslate(llvm::BasicBlock const*, ll (1 samples, 0.05%)</title><rect x="697.5" y="453" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="700.48" y="463.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getModule() const (1 samples, 0.05%)</title><rect x="528.0" y="453" width="0.6" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="531.00" y="463.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (5 samples, 0.27%)</title><rect x="110.7" y="517" width="3.2" height="15.0" fill="rgb(70,219,70)" rx="2" ry="2" />
<text  x="113.67" y="527.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::computeSCEVAtScope(llvm::SCEV const*, ll (1 samples, 0.05%)</title><rect x="250.8" y="373" width="0.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="253.84" y="383.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (1 samples, 0.05%)</title><rect x="544.6" y="485" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="547.57" y="495.5" ></text>
</g>
<g >
<title>`llvm::MetadataTracking::track(void*, llvm::Metadata&amp;, llvm::Poi (1 samples, 0.05%)</title><rect x="725.5" y="469" width="0.7" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="728.52" y="479.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::getOrCreate(llvm:: (1 samples, 0.05%)</title><rect x="265.5" y="533" width="0.6" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="268.50" y="543.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::Grow(unsigned int) (1 samples, 0.05%)</title><rect x="27.2" y="501" width="0.6" height="15.0" fill="rgb(99,244,99)" rx="2" ry="2" />
<text  x="30.20" y="511.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::~ScalarEvolution() (1 samples, 0.05%)</title><rect x="580.2" y="501" width="0.7" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="583.25" y="511.5" ></text>
</g>
<g >
<title>`runImpl(llvm::Function&amp;, llvm::LazyValueInfo*, llvm::SimplifyQu (25 samples, 1.35%)</title><rect x="373.2" y="533" width="15.9" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="376.17" y="543.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="758.7" y="421" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="761.65" y="431.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SCCPSolver::getLatticeValueFor(llvm::Val (1 samples, 0.05%)</title><rect x="367.4" y="645" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="370.44" y="655.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::FindBucketFor(void const*) const (1 samples, 0.05%)</title><rect x="27.2" y="485" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="30.20" y="495.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="357.9" y="565" width="0.6" height="15.0" fill="rgb(219,219,66)" rx="2" ry="2" />
<text  x="360.88" y="575.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="265.5" y="485" width="0.6" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="268.50" y="495.5" ></text>
</g>
<g >
<title>`ConstructSSAForLoadSet(llvm::LoadInst*, llvm::SmallVectorImpl&lt;l (1 samples, 0.05%)</title><rect x="598.7" y="453" width="0.7" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="601.73" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, unsigned long long, bool) (1 samples, 0.05%)</title><rect x="59.1" y="549" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="62.06" y="559.5" ></text>
</g>
<g >
<title>`llvm::getConstantStringInfo(llvm::Value const*, llvm::StringRef (1 samples, 0.05%)</title><rect x="224.7" y="501" width="0.7" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="227.72" y="511.5" ></text>
</g>
<g >
<title>`llvm::hashing::detail::hash_short(char const*, unsigned long, u (1 samples, 0.05%)</title><rect x="219.0" y="341" width="0.6" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="221.98" y="351.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (2 samples, 0.11%)</title><rect x="110.7" y="501" width="1.2" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="113.67" y="511.5" ></text>
</g>
<g >
<title>`llvm::CompositeType::getTypeAtIndex(llvm::Value const*) const (1 samples, 0.05%)</title><rect x="111.3" y="469" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="114.31" y="479.5" ></text>
</g>
<g >
<title>`deleteIfDead(llvm::GlobalValue&amp;, llvm::SmallSet&lt;llvm::Comdat co (1 samples, 0.05%)</title><rect x="241.9" y="645" width="0.7" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="244.92" y="655.5" ></text>
</g>
<g >
<title>`llvm::Value::stripPointerCasts() const (1 samples, 0.05%)</title><rect x="109.4" y="549" width="0.6" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="112.40" y="559.5" ></text>
</g>
<g >
<title>`llvm::sinkRegion(llvm::DomTreeNodeBase&lt;llvm::BasicBlock&gt;*, llvm (2 samples, 0.11%)</title><rect x="140.0" y="597" width="1.3" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="142.98" y="607.5" ></text>
</g>
<g >
<title>`std::__1::vector&lt;llvm::Constant*, std::__1::allocator&lt;llvm::Con (1 samples, 0.05%)</title><rect x="1111.0" y="325" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="1113.99" y="335.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldLoadFromConstPtr(llvm::Constant*, llvm::Type* (1 samples, 0.05%)</title><rect x="74.4" y="581" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="77.35" y="591.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="595.5" y="245" width="0.7" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="598.54" y="255.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&amp; (1 samples, 0.05%)</title><rect x="692.4" y="405" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="695.39" y="415.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="375.1" y="405" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="378.09" y="415.5" ></text>
</g>
<g >
<title>`llvm::JumpThreadingPass::ComputeValueKnownInPredecessors(llvm:: (2 samples, 0.11%)</title><rect x="406.3" y="469" width="1.3" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="409.31" y="479.5" ></text>
</g>
<g >
<title>`llvm::APInt::sextOrTrunc(unsigned int) const (1 samples, 0.05%)</title><rect x="248.3" y="517" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="251.29" y="527.5" ></text>
</g>
<g >
<title>`free (2 samples, 0.11%)</title><rect x="935.1" y="437" width="1.3" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="938.14" y="447.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::alias(llvm::MemoryLocation const&amp;, llvm: (1 samples, 0.05%)</title><rect x="173.7" y="389" width="0.7" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="176.75" y="399.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm: (3 samples, 0.16%)</title><rect x="665.6" y="405" width="1.9" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="668.63" y="415.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="1097.0" y="437" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="1099.98" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoCache::isOverdefined(llvm:: (2 samples, 0.11%)</title><rect x="377.6" y="437" width="1.3" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="380.63" y="447.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::Descale(llvm::Value*, llvm::APInt, bool&amp;) (1 samples, 0.05%)</title><rect x="293.5" y="581" width="0.7" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="296.53" y="591.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="142.5" y="597" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="145.53" y="607.5" ></text>
</g>
<g >
<title>`llvm::hashing::detail::hash_combine_recursive_helper::combine(u (1 samples, 0.05%)</title><rect x="72.4" y="469" width="0.7" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="75.44" y="479.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::Instruction*, unsig (1 samples, 0.05%)</title><rect x="1158.1" y="517" width="0.7" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="1161.14" y="527.5" ></text>
</g>
<g >
<title>`llvm::LoopBase&lt;llvm::BasicBlock, llvm::Loop&gt;::getExitBlocks(llv (1 samples, 0.05%)</title><rect x="736.3" y="485" width="0.7" height="15.0" fill="rgb(100,245,100)" rx="2" ry="2" />
<text  x="739.35" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::solve() (5 samples, 0.27%)</title><rect x="13.8" y="581" width="3.2" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="16.82" y="591.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (1 samples, 0.05%)</title><rect x="307.5" y="517" width="0.7" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="310.55" y="527.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (1 samples, 0.05%)</title><rect x="388.5" y="421" width="0.6" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="391.47" y="431.5" ></text>
</g>
<g >
<title>`llvm::IRBuilderBase::SetInsertPoint(llvm::Instruction*) (2 samples, 0.11%)</title><rect x="454.1" y="517" width="1.3" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="457.09" y="527.5" ></text>
</g>
<g >
<title>`std::__1::__split_buffer&lt;llvm::Constant*, std::__1::allocator&lt;l (1 samples, 0.05%)</title><rect x="765.0" y="405" width="0.7" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="768.02" y="415.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="95.4" y="373" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="98.38" y="383.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*) (1 samples, 0.05%)</title><rect x="1167.7" y="549" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="1170.70" y="559.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (2 samples, 0.11%)</title><rect x="759.3" y="437" width="1.3" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="762.29" y="447.5" ></text>
</g>
<g >
<title>`llvm::FoldingSetBase::FoldingSetBase(unsigned int) (1 samples, 0.05%)</title><rect x="347.1" y="613" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="350.05" y="623.5" ></text>
</g>
<g >
<title>`realloc (1 samples, 0.05%)</title><rect x="140.6" y="533" width="0.7" height="15.0" fill="rgb(188,188,54)" rx="2" ry="2" />
<text  x="143.62" y="543.5" ></text>
</g>
<g >
<title>`llvm::CallInst::paramHasAttr(unsigned int, llvm::Attribute::Att (1 samples, 0.05%)</title><rect x="285.9" y="581" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="288.89" y="591.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (2 samples, 0.11%)</title><rect x="193.5" y="357" width="1.3" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="196.50" y="367.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="498.1" y="405" width="0.6" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="501.06" y="415.5" ></text>
</g>
<g >
<title>`llvm::PMTopLevelManager::collectLastUses(llvm::SmallVectorImpl&lt; (1 samples, 0.05%)</title><rect x="344.5" y="629" width="0.6" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="347.50" y="639.5" ></text>
</g>
<g >
<title>`llvm::PopulateLoopsDFS&lt;llvm::BasicBlock, llvm::Loop&gt;::insertInt (2 samples, 0.11%)</title><rect x="143.8" y="597" width="1.3" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="146.80" y="607.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::tryOptimizeCall(llvm::CallInst*) (1 samples, 0.05%)</title><rect x="1093.8" y="469" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="1096.79" y="479.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::computeForAddSub(bool, bool, llvm::KnownBits c (1 samples, 0.05%)</title><rect x="124.0" y="517" width="0.7" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="127.05" y="527.5" ></text>
</g>
<g >
<title>`void llvm::SmallVectorImpl&lt;llvm::BasicBlock*&gt;::append&lt;llvm::Bas (1 samples, 0.05%)</title><rect x="670.1" y="421" width="0.6" height="15.0" fill="rgb(84,232,84)" rx="2" ry="2" />
<text  x="673.09" y="431.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::MapInfo::getHashVa (1 samples, 0.05%)</title><rect x="758.7" y="389" width="0.6" height="15.0" fill="rgb(53,202,53)" rx="2" ry="2" />
<text  x="761.65" y="399.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::MapInfo::getHashVa (1 samples, 0.05%)</title><rect x="66.1" y="485" width="0.6" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="69.07" y="495.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::PoisoningVH&lt;llvm:: (1 samples, 0.05%)</title><rect x="380.2" y="373" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="383.18" y="383.5" ></text>
</g>
<g >
<title>`llvm::iplist_impl&lt;llvm::simple_ilist&lt;llvm::MemoryAccess, llvm:: (1 samples, 0.05%)</title><rect x="158.5" y="533" width="0.6" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="161.46" y="543.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="132.3" y="453" width="0.7" height="15.0" fill="rgb(204,204,60)" rx="2" ry="2" />
<text  x="135.33" y="463.5" ></text>
</g>
<g >
<title>`tiny_free_list_remove_ptr (1 samples, 0.05%)</title><rect x="158.5" y="485" width="0.6" height="15.0" fill="rgb(192,192,56)" rx="2" ry="2" />
<text  x="161.46" y="495.5" ></text>
</g>
<g >
<title>`small_free_list_remove_ptr_no_clear (1 samples, 0.05%)</title><rect x="350.2" y="421" width="0.7" height="15.0" fill="rgb(200,200,59)" rx="2" ry="2" />
<text  x="353.24" y="431.5" ></text>
</g>
<g >
<title>`llvm::JumpThreadingPass::ProcessBlock(llvm::BasicBlock*) (28 samples, 1.51%)</title><rect x="403.1" y="517" width="17.9" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="406.12" y="527.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoCache::insertResult(llvm::V (2 samples, 0.11%)</title><rect x="18.9" y="549" width="1.3" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="21.92" y="559.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (18 samples, 0.97%)</title><rect x="185.9" y="453" width="11.4" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="188.85" y="463.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="350.2" y="469" width="0.7" height="15.0" fill="rgb(181,181,52)" rx="2" ry="2" />
<text  x="353.24" y="479.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, ll (1 samples, 0.05%)</title><rect x="1124.4" y="405" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="1127.37" y="415.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::Grow(unsigned int) (1 samples, 0.05%)</title><rect x="152.7" y="517" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="155.72" y="527.5" ></text>
</g>
<g >
<title>`isDereferenceableAndAlignedPointer(llvm::Value const*, unsigned (1 samples, 0.05%)</title><rect x="719.1" y="405" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="722.15" y="415.5" ></text>
</g>
<g >
<title>`llvm::GVN::processLoad(llvm::LoadInst*) (9 samples, 0.49%)</title><rect x="592.4" y="469" width="5.7" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="595.35" y="479.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm::Mem (1 samples, 0.05%)</title><rect x="619.8" y="245" width="0.6" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="622.75" y="255.5" ></text>
</g>
<g >
<title>`llvm::Function::getContext() const (1 samples, 0.05%)</title><rect x="140.0" y="581" width="0.6" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="142.98" y="591.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (2 samples, 0.11%)</title><rect x="627.4" y="213" width="1.3" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="630.40" y="223.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (1 samples, 0.05%)</title><rect x="731.9" y="469" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="734.89" y="479.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldLoadFromConstPtr(llvm::Constant*, llvm::Type* (1 samples, 0.05%)</title><rect x="1112.3" y="373" width="0.6" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="1115.27" y="383.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SimplifyCFGOpt::SimplifyCondBranch(llvm: (7 samples, 0.38%)</title><rect x="713.4" y="485" width="4.5" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="716.41" y="495.5" ></text>
</g>
<g >
<title>`llvm::Intrinsic::getName(llvm::Intrinsic::ID) (1 samples, 0.05%)</title><rect x="584.1" y="517" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="587.07" y="527.5" ></text>
</g>
<g >
<title>`iterativelySimplifyCFG(llvm::Function&amp;, llvm::TargetTransformIn (8 samples, 0.43%)</title><rect x="232.4" y="629" width="5.1" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="235.37" y="639.5" ></text>
</g>
<g >
<title>`llvm::APInt::APInt(llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="306.9" y="421" width="0.6" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="309.91" y="431.5" ></text>
</g>
<g >
<title>`llvm::APInt::sdiv(llvm::APInt const&amp;) const (1 samples, 0.05%)</title><rect x="559.9" y="405" width="0.6" height="15.0" fill="rgb(94,241,94)" rx="2" ry="2" />
<text  x="562.86" y="415.5" ></text>
</g>
<g >
<title>`llvm::buildModuleSummaryIndex(llvm::Module const&amp;, std::__1::fu (3 samples, 0.16%)</title><rect x="1187.5" y="757" width="1.9" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="1190.45" y="767.5" ></text>
</g>
<g >
<title>`llvm::CallSiteBase&lt;llvm::Function, llvm::BasicBlock, llvm::Valu (1 samples, 0.05%)</title><rect x="486.6" y="469" width="0.6" height="15.0" fill="rgb(82,230,82)" rx="2" ry="2" />
<text  x="489.59" y="479.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="83.9" y="501" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="86.91" y="511.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::computeExitLimit(llvm::Loop const*, llvm (1 samples, 0.05%)</title><rect x="1160.1" y="453" width="0.6" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="1163.05" y="463.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::getSCEV(llvm::Value*) (1 samples, 0.05%)</title><rect x="131.1" y="453" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="134.06" y="463.5" ></text>
</g>
<g >
<title>`llvm::VNCoercion::analyzeLoadFromClobberingStore(llvm::Type*, l (1 samples, 0.05%)</title><rect x="600.0" y="421" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="603.00" y="431.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::BasicBlock*, llvm::Value*, llvm::DenseMapI (1 samples, 0.05%)</title><rect x="350.2" y="533" width="0.7" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="353.24" y="543.5" ></text>
</g>
<g >
<title>`llvm::isAllocLikeFn(llvm::Value const*, llvm::TargetLibraryInfo (1 samples, 0.05%)</title><rect x="679.0" y="389" width="0.6" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="682.01" y="399.5" ></text>
</g>
<g >
<title>`llvm::MemorySSA::~MemorySSA() (2 samples, 0.11%)</title><rect x="579.0" y="501" width="1.2" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="581.97" y="511.5" ></text>
</g>
<g >
<title>`llvm::GVN::PerformLoadPRE(llvm::LoadInst*, llvm::SmallVector&lt;ll (2 samples, 0.11%)</title><rect x="176.9" y="549" width="1.3" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="179.93" y="559.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="265.5" y="549" width="0.6" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="268.50" y="559.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::addPointer(llvm::Value*, unsigned long l (3 samples, 0.16%)</title><rect x="133.6" y="565" width="1.9" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="136.61" y="575.5" ></text>
</g>
<g >
<title>`llvm::MetadataTracking::retrack(void*, llvm::Metadata&amp;, void*) (1 samples, 0.05%)</title><rect x="76.9" y="581" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="79.90" y="591.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SCCPSolver::getLatticeValueFor(llvm::Val (2 samples, 0.11%)</title><rect x="231.1" y="613" width="1.3" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="234.09" y="623.5" ></text>
</g>
<g >
<title>`llvm::GVN::addToLeaderTable(unsigned int, llvm::Value*, llvm::B (1 samples, 0.05%)</title><rect x="591.7" y="469" width="0.7" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="594.72" y="479.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (9 samples, 0.49%)</title><rect x="684.1" y="437" width="5.7" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="687.10" y="447.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="120.2" y="533" width="0.7" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="123.23" y="543.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitAdd(llvm::BinaryOperator&amp;) (2 samples, 0.11%)</title><rect x="777.1" y="501" width="1.3" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="780.13" y="511.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitCallInst(llvm::CallInst&amp;) (9 samples, 0.49%)</title><rect x="285.9" y="597" width="5.7" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="288.89" y="607.5" ></text>
</g>
<g >
<title>`llvm::GVN::Expression::operator==(llvm::GVN::Expression const&amp;) (2 samples, 0.11%)</title><rect x="164.2" y="501" width="1.3" height="15.0" fill="rgb(65,213,65)" rx="2" ry="2" />
<text  x="167.19" y="511.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::Instruction*, llvm::SmallPtrSe (1 samples, 0.05%)</title><rect x="612.7" y="389" width="0.7" height="15.0" fill="rgb(77,224,77)" rx="2" ry="2" />
<text  x="615.74" y="399.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="716.6" y="405" width="0.6" height="15.0" fill="rgb(214,214,64)" rx="2" ry="2" />
<text  x="719.60" y="415.5" ></text>
</g>
<g >
<title>`llvm::BlockFrequencyInfoImpl&lt;llvm::BasicBlock&gt;::initializeRPOT( (1 samples, 0.05%)</title><rect x="255.3" y="597" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="258.30" y="607.5" ></text>
</g>
<g >
<title>`llvm::APInt::clearUnusedBits() (1 samples, 0.05%)</title><rect x="225.4" y="373" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="228.36" y="383.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasSelect(llvm::SelectInst const*, unsig (1 samples, 0.05%)</title><rect x="192.2" y="373" width="0.7" height="15.0" fill="rgb(75,222,75)" rx="2" ry="2" />
<text  x="195.22" y="383.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (2 samples, 0.11%)</title><rect x="624.2" y="245" width="1.3" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="627.21" y="255.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitSwitchInst(llvm::SwitchInst&amp;) (1 samples, 0.05%)</title><rect x="544.6" y="501" width="0.6" height="15.0" fill="rgb(83,231,83)" rx="2" ry="2" />
<text  x="547.57" y="511.5" ></text>
</g>
<g >
<title>`llvm::simplifyCFG(llvm::BasicBlock*, llvm::TargetTransformInfo  (3 samples, 0.16%)</title><rect x="349.0" y="613" width="1.9" height="15.0" fill="rgb(60,210,60)" rx="2" ry="2" />
<text  x="351.96" y="623.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::ScalarEvolution(llvm::Function&amp;, llvm::T (2 samples, 0.11%)</title><rect x="346.4" y="629" width="1.3" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="349.41" y="639.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="397.4" y="421" width="0.6" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="400.39" y="431.5" ></text>
</g>
<g >
<title>`llvm::WriteBitcodeToFile(llvm::Module const*, llvm::raw_ostream (12 samples, 0.65%)</title><rect x="1179.8" y="757" width="7.7" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="1182.81" y="767.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;unsigned long long, llv (1 samples, 0.05%)</title><rect x="1189.4" y="661" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="1192.36" y="671.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="687.3" y="325" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="690.29" y="335.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="273.1" y="549" width="0.7" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="276.14" y="559.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, unsigned i (1 samples, 0.05%)</title><rect x="589.8" y="421" width="0.6" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="592.81" y="431.5" ></text>
</g>
<g >
<title>`llvm::APInt::operator-=(llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="686.0" y="405" width="0.7" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="689.02" y="415.5" ></text>
</g>
<g >
<title>`_platform_memset$VARIANT$Ivybridge (1 samples, 0.05%)</title><rect x="247.0" y="485" width="0.7" height="15.0" fill="rgb(182,182,52)" rx="2" ry="2" />
<text  x="250.02" y="495.5" ></text>
</g>
<g >
<title>`top.lsp-top130^378^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1893" width="1180.0" height="15.0" fill="rgb(104,215,215)" rx="2" ry="2" />
<text  x="13.00" y="1903.5" >`top.lsp-top130^378^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::Float2IntPass::findRoots(llvm::Function&amp;, llvm::SmallPtrS (1 samples, 0.05%)</title><rect x="262.3" y="629" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="265.31" y="639.5" ></text>
</g>
<g >
<title>`runSCCP(llvm::Function&amp;, llvm::DataLayout const&amp;, llvm::TargetL (4 samples, 0.22%)</title><rect x="709.0" y="549" width="2.5" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="711.95" y="559.5" ></text>
</g>
<g >
<title>`llvm::legacy::PassManagerImpl::run(llvm::Module&amp;) (562 samples, 30.35%)</title><rect x="10.0" y="693" width="358.1" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="13.00" y="703.5" >`llvm::legacy::PassManagerImpl::run(llvm::Module&amp;)</text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, llvm (1 samples, 0.05%)</title><rect x="182.7" y="501" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="185.67" y="511.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (7 samples, 0.38%)</title><rect x="730.6" y="517" width="4.5" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="733.62" y="527.5" ></text>
</g>
<g >
<title>`free_small (1 samples, 0.05%)</title><rect x="867.0" y="389" width="0.6" height="15.0" fill="rgb(184,184,53)" rx="2" ry="2" />
<text  x="869.97" y="399.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (5 samples, 0.27%)</title><rect x="442.6" y="485" width="3.2" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="445.62" y="495.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitICmpInst(llvm::ICmpInst&amp;) (34 samples, 1.84%)</title><rect x="294.2" y="597" width="21.6" height="15.0" fill="rgb(63,211,63)" rx="2" ry="2" />
<text  x="297.17" y="607.5" >`..</text>
</g>
<g >
<title>`llvm::GVN::processBlock(llvm::BasicBlock*) (100 samples, 5.40%)</title><rect x="162.3" y="597" width="63.7" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="165.28" y="607.5" >`llvm:..</text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm:: (1 samples, 0.05%)</title><rect x="315.8" y="549" width="0.7" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="318.83" y="559.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getPointerSize(unsigned int) const (1 samples, 0.05%)</title><rect x="635.7" y="325" width="0.6" height="15.0" fill="rgb(87,233,87)" rx="2" ry="2" />
<text  x="638.68" y="335.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (2 samples, 0.11%)</title><rect x="556.7" y="357" width="1.2" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="559.67" y="367.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&amp; (1 samples, 0.05%)</title><rect x="318.4" y="485" width="0.6" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="321.38" y="495.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::PoisoningVH&lt;llvm:: (1 samples, 0.05%)</title><rect x="13.8" y="485" width="0.7" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="16.82" y="495.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&amp; (1 samples, 0.05%)</title><rect x="1147.9" y="453" width="0.7" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="1150.95" y="463.5" ></text>
</g>
<g >
<title>`epilogue-cclasp.lisp-epilogue-cclasp460^1^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="2069" width="1180.0" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="13.00" y="2079.5" >`epilogue-cclasp.lisp-epilogue-cclasp460^1^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::IDFCalculator&lt;llvm::BasicBlock*, false&gt;::calculate(llvm:: (2 samples, 0.11%)</title><rect x="152.7" y="581" width="1.3" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="155.72" y="591.5" ></text>
</g>
<g >
<title>`llvm::MetadataTracking::retrack(void*, llvm::Metadata&amp;, void*) (1 samples, 0.05%)</title><rect x="120.9" y="581" width="0.6" height="15.0" fill="rgb(83,231,83)" rx="2" ry="2" />
<text  x="123.86" y="591.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (1 samples, 0.05%)</title><rect x="679.0" y="405" width="0.6" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="682.01" y="415.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::createNodeForSelectOrPHI(llvm::Instructi (1 samples, 0.05%)</title><rect x="131.1" y="357" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="134.06" y="367.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (2 samples, 0.11%)</title><rect x="617.2" y="213" width="1.3" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="620.20" y="223.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (1 samples, 0.05%)</title><rect x="361.7" y="645" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="364.71" y="655.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::BasicBlock*, llvm:: (1 samples, 0.05%)</title><rect x="422.9" y="501" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="425.87" y="511.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="503.8" y="293" width="0.6" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="506.79" y="303.5" ></text>
</g>
<g >
<title>`llvm::LLVMContext::getDiagHandlerPtr() const (1 samples, 0.05%)</title><rect x="599.4" y="405" width="0.6" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="602.36" y="415.5" ></text>
</g>
<g >
<title>`llvm::wouldInstructionBeTriviallyDead(llvm::Instruction*, llvm: (1 samples, 0.05%)</title><rect x="550.9" y="501" width="0.7" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="553.94" y="511.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="225.4" y="389" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="228.36" y="399.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::MapInfo::getHashVa (1 samples, 0.05%)</title><rect x="34.8" y="389" width="0.7" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="37.85" y="399.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::FoldReinterpretLoadFromConstPtr(llvm::Co (1 samples, 0.05%)</title><rect x="689.8" y="437" width="0.7" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="692.84" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (3 samples, 0.16%)</title><rect x="271.9" y="565" width="1.9" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="274.87" y="575.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (1 samples, 0.05%)</title><rect x="545.2" y="485" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="548.21" y="495.5" ></text>
</g>
<g >
<title>`llvm::formLCSSA(llvm::Loop&amp;, llvm::DominatorTree&amp;, llvm::LoopIn (2 samples, 0.11%)</title><rect x="425.4" y="469" width="1.3" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="428.42" y="479.5" ></text>
</g>
<g >
<title>`llvm::computeOverflowForSignedAdd(llvm::Value const*, llvm::Val (1 samples, 0.05%)</title><rect x="482.1" y="485" width="0.7" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="485.13" y="495.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="572.6" y="373" width="0.6" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="575.60" y="383.5" ></text>
</g>
<g >
<title>`llvm::AliasSet::aliasesPointer(llvm::Value const*, unsigned lon (2 samples, 0.11%)</title><rect x="556.7" y="421" width="1.2" height="15.0" fill="rgb(101,247,101)" rx="2" ry="2" />
<text  x="559.67" y="431.5" ></text>
</g>
<g >
<title>`bool llvm::CallInst::hasFnAttrImpl&lt;llvm::Attribute::AttrKind&gt;(l (1 samples, 0.05%)</title><rect x="743.4" y="501" width="0.6" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="746.36" y="511.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="649.7" y="213" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="652.70" y="223.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="765.0" y="389" width="0.7" height="15.0" fill="rgb(183,183,53)" rx="2" ry="2" />
<text  x="768.02" y="399.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;llvm::Constant*, true&gt;::push_back (1 samples, 0.05%)</title><rect x="405.0" y="373" width="0.7" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="408.03" y="383.5" ></text>
</g>
<g >
<title>`llvm::hoistRegion(llvm::DomTreeNodeBase&lt;llvm::BasicBlock&gt;*, llv (5 samples, 0.27%)</title><rect x="136.8" y="597" width="3.2" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="139.79" y="607.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedInstructionBits(llvm::Instr (1 samples, 0.05%)</title><rect x="524.2" y="469" width="0.6" height="15.0" fill="rgb(58,208,58)" rx="2" ry="2" />
<text  x="527.18" y="479.5" ></text>
</g>
<g >
<title>`llvm::SimplifySelectInst(llvm::Value*, llvm::Value*, llvm::Valu (1 samples, 0.05%)</title><rect x="219.6" y="469" width="0.7" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="222.62" y="479.5" ></text>
</g>
<g >
<title>`std::__1::vector&lt;llvm::Constant*, std::__1::allocator&lt;llvm::Con (1 samples, 0.05%)</title><rect x="271.9" y="517" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="274.87" y="527.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (3 samples, 0.16%)</title><rect x="624.2" y="277" width="1.9" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="627.21" y="287.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;unsigned long long, llv (1 samples, 0.05%)</title><rect x="1189.4" y="645" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="1192.36" y="655.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, unsi (5 samples, 0.27%)</title><rect x="477.0" y="485" width="3.2" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="480.03" y="495.5" ></text>
</g>
<g >
<title>`llvm::GVN::processNonLocalLoad(llvm::LoadInst*) (115 samples, 6.21%)</title><rect x="598.1" y="469" width="73.3" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="601.09" y="479.5" >`llvm::G..</text>
</g>
<g >
<title>`llvm::iterator_range&lt;llvm::po_iterator&lt;llvm::BasicBlock*, llvm: (1 samples, 0.05%)</title><rect x="145.1" y="597" width="0.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="148.08" y="607.5" ></text>
</g>
<g >
<title>`simplifyFunctionCFG(llvm::Function&amp;, llvm::TargetTransformInfo  (4 samples, 0.22%)</title><rect x="348.3" y="645" width="2.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="351.33" y="655.5" ></text>
</g>
<g >
<title>`llvm::Value::stripPointerCasts() const (2 samples, 0.11%)</title><rect x="531.8" y="469" width="1.3" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="534.83" y="479.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ModuleBitcodeWriter::writeFunction(llvm: (9 samples, 0.49%)</title><rect x="1179.8" y="709" width="5.7" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="1182.81" y="719.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitLShr(llvm::BinaryOperator&amp;) (1 samples, 0.05%)</title><rect x="1155.0" y="517" width="0.6" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="1157.96" y="527.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (5 samples, 0.27%)</title><rect x="646.5" y="277" width="3.2" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="649.51" y="287.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, ll (1 samples, 0.05%)</title><rect x="40.6" y="565" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="43.58" y="575.5" ></text>
</g>
<g >
<title>`iterativelySimplifyCFG(llvm::Function&amp;, llvm::TargetTransformIn (5 samples, 0.27%)</title><rect x="1169.0" y="533" width="3.2" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="1171.97" y="543.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1122.5" y="421" width="0.6" height="15.0" fill="rgb(71,220,71)" rx="2" ry="2" />
<text  x="1125.46" y="431.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::DecomposeGEPExpression(llvm::Value const*, (2 samples, 0.11%)</title><rect x="189.7" y="389" width="1.3" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="192.68" y="399.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::Instruction*, llvm: (1 samples, 0.05%)</title><rect x="707.7" y="405" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="710.68" y="415.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::GVN::Expression, unsign (3 samples, 0.16%)</title><rect x="587.9" y="437" width="1.9" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="590.89" y="447.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getTerminator() const (1 samples, 0.05%)</title><rect x="375.7" y="469" width="0.7" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="378.72" y="479.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="1147.3" y="501" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="1150.31" y="511.5" ></text>
</g>
<g >
<title>`_platform_memcmp (1 samples, 0.05%)</title><rect x="201.1" y="405" width="0.7" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="204.14" y="415.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="284.6" y="485" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="287.61" y="495.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeAllocSize(llvm::Type*) const (1 samples, 0.05%)</title><rect x="443.9" y="437" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="446.90" y="447.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (2 samples, 0.11%)</title><rect x="222.8" y="485" width="1.3" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="225.81" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp_big(void const*) (1 samples, 0.05%)</title><rect x="27.2" y="517" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="30.20" y="527.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (2 samples, 0.11%)</title><rect x="512.7" y="485" width="1.3" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="515.71" y="495.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (1 samples, 0.05%)</title><rect x="398.0" y="501" width="0.7" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="401.02" y="511.5" ></text>
</g>
<g >
<title>`llvm::MemoryLocation::get(llvm::StoreInst const*) (1 samples, 0.05%)</title><rect x="658.0" y="341" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="660.98" y="351.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getSimplePointerDependencyFrom(l (39 samples, 2.11%)</title><rect x="613.4" y="373" width="24.8" height="15.0" fill="rgb(53,202,53)" rx="2" ry="2" />
<text  x="616.38" y="383.5" >`..</text>
</g>
<g >
<title>`llvm::Twine::toStringRef(llvm::SmallVectorImpl&lt;char&gt;&amp;) const (1 samples, 0.05%)</title><rect x="530.6" y="437" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="533.55" y="447.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="652.2" y="197" width="0.7" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="655.25" y="207.5" ></text>
</g>
<g >
<title>`llvm::Value::setName(llvm::Twine const&amp;) (1 samples, 0.05%)</title><rect x="703.2" y="453" width="0.7" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="706.22" y="463.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (5 samples, 0.27%)</title><rect x="442.6" y="469" width="3.2" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="445.62" y="479.5" ></text>
</g>
<g >
<title>`llvm::ValueHandleBase::RemoveFromUseList() (1 samples, 0.05%)</title><rect x="352.8" y="437" width="0.6" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="355.79" y="447.5" ></text>
</g>
<g >
<title>`llvm::Module::getFunction(llvm::StringRef) const (1 samples, 0.05%)</title><rect x="38.7" y="485" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="41.67" y="495.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="1114.2" y="437" width="0.6" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="1117.18" y="447.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (1 samples, 0.05%)</title><rect x="295.4" y="469" width="0.7" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="298.44" y="479.5" ></text>
</g>
<g >
<title>`llvm::MetadataTracking::untrack(void*, llvm::Metadata&amp;) (1 samples, 0.05%)</title><rect x="1146.0" y="485" width="0.7" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="1149.04" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="532.5" y="437" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="535.46" y="447.5" ></text>
</g>
<g >
<title>`void std::__1::__insertion_sort_3&lt;std::__1::__less&lt;llvm::NonLoc (1 samples, 0.05%)</title><rect x="610.2" y="357" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="613.19" y="367.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ModuleBitcodeWriter::writeMDTuple(llvm:: (1 samples, 0.05%)</title><rect x="1180.4" y="677" width="0.7" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="1183.44" y="687.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="102.4" y="533" width="0.6" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="105.39" y="543.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="83.9" y="533" width="0.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="86.91" y="543.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedUseBits(llvm::Value*, llvm: (1 samples, 0.05%)</title><rect x="1091.9" y="437" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="1094.88" y="447.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::PointerIntPair&lt;llvm (1 samples, 0.05%)</title><rect x="660.5" y="389" width="0.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="663.53" y="399.5" ></text>
</g>
<g >
<title>`llvm::getObjectSize(llvm::Value const*, unsigned long long&amp;, ll (1 samples, 0.05%)</title><rect x="172.5" y="421" width="0.6" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="175.47" y="431.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm:: (3 samples, 0.16%)</title><rect x="107.5" y="533" width="1.9" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="110.48" y="543.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::freePass(llvm::Pass*, llvm::StringRef, llv (6 samples, 0.32%)</title><rect x="155.3" y="629" width="3.8" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="158.27" y="639.5" ></text>
</g>
<g >
<title>`tiny_free_no_lock (1 samples, 0.05%)</title><rect x="114.5" y="501" width="0.6" height="15.0" fill="rgb(181,181,52)" rx="2" ry="2" />
<text  x="117.49" y="511.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm: (1 samples, 0.05%)</title><rect x="659.9" y="373" width="0.6" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="662.89" y="383.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldConstant(llvm::Constant const*, llvm::DataLay (2 samples, 0.11%)</title><rect x="747.8" y="517" width="1.3" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="750.82" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantExprKeyType::getHash() const (1 samples, 0.05%)</title><rect x="265.5" y="501" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="268.50" y="511.5" ></text>
</g>
<g >
<title>`llvm::isInstructionTriviallyDead(llvm::Instruction*, llvm::Targ (1 samples, 0.05%)</title><rect x="1157.5" y="517" width="0.6" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="1160.51" y="527.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="260.4" y="565" width="0.6" height="15.0" fill="rgb(190,190,55)" rx="2" ry="2" />
<text  x="263.40" y="575.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::getOrCreate(llvm:: (1 samples, 0.05%)</title><rect x="59.7" y="565" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="62.70" y="575.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::BinaryOp_match&lt;llvm::PatternMatch::bin (1 samples, 0.05%)</title><rect x="1169.0" y="469" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="1171.97" y="479.5" ></text>
</g>
<g >
<title>`llvm::FunctionPass::skipFunction(llvm::Function const&amp;) const (1 samples, 0.05%)</title><rect x="245.1" y="629" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="248.11" y="639.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitSelectInst(llvm::SelectInst&amp;) (4 samples, 0.22%)</title><rect x="540.7" y="501" width="2.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="543.75" y="511.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasPHI(llvm::PHINode const*, unsigned lo (1 samples, 0.05%)</title><rect x="191.6" y="373" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="194.59" y="383.5" ></text>
</g>
<g >
<title>`computeUnsignedMinMaxValuesFromKnownBits(llvm::KnownBits const&amp; (1 samples, 0.05%)</title><rect x="1118.6" y="485" width="0.7" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="1121.64" y="495.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="102.4" y="581" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="105.39" y="591.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (2 samples, 0.11%)</title><rect x="111.9" y="501" width="1.3" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="114.94" y="511.5" ></text>
</g>
<g >
<title>`llvm::KnownBits::zextOrTrunc(unsigned int) (1 samples, 0.05%)</title><rect x="1124.4" y="245" width="0.6" height="15.0" fill="rgb(64,212,64)" rx="2" ry="2" />
<text  x="1127.37" y="255.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Va (5 samples, 0.27%)</title><rect x="407.6" y="405" width="3.2" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="410.58" y="415.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::IRBuilderPrefixedInserter::InsertHelper( (2 samples, 0.11%)</title><rect x="706.4" y="421" width="1.3" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="709.40" y="431.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (3 samples, 0.16%)</title><rect x="536.3" y="357" width="1.9" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="539.29" y="367.5" ></text>
</g>
<g >
<title>`llvm::VNCoercion::analyzeLoadFromClobberingWrite(llvm::Type*, l (1 samples, 0.05%)</title><rect x="600.6" y="421" width="0.7" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="603.64" y="431.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SimplifyCFGOpt::SimplifyCondBranch(llvm: (1 samples, 0.05%)</title><rect x="232.4" y="597" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="235.37" y="607.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeBase&lt;llvm::BasicBlock, false&gt;::dominates(llv (1 samples, 0.05%)</title><rect x="171.8" y="549" width="0.7" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="174.84" y="559.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LCSSAWrapperPass::runOnFunction(llvm::Fu (3 samples, 0.16%)</title><rect x="424.8" y="549" width="1.9" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="427.78" y="559.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::BasicBlock const*&gt;::insert(llvm::Ba (2 samples, 0.11%)</title><rect x="712.1" y="501" width="1.3" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="715.14" y="511.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::BasicBlock const*&gt;::find(llvm::Basi (1 samples, 0.05%)</title><rect x="736.3" y="469" width="0.7" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="739.35" y="479.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="295.4" y="405" width="0.7" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="298.44" y="415.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp_big(void const*) (1 samples, 0.05%)</title><rect x="241.3" y="597" width="0.6" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="244.29" y="607.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::BasicBlock const*&gt;::insert(llvm::Ba (2 samples, 0.11%)</title><rect x="31.0" y="581" width="1.3" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="34.03" y="591.5" ></text>
</g>
<g >
<title>`malloc_zone_calloc (1 samples, 0.05%)</title><rect x="347.1" y="565" width="0.6" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="350.05" y="575.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="177.6" y="453" width="0.6" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="180.57" y="463.5" ></text>
</g>
<g >
<title>`llvm::SimplifyGEPInst(llvm::Type*, llvm::ArrayRef&lt;llvm::Value*&gt; (2 samples, 0.11%)</title><rect x="85.8" y="581" width="1.3" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="88.82" y="591.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (2 samples, 0.11%)</title><rect x="522.3" y="405" width="1.2" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="525.27" y="415.5" ></text>
</g>
<g >
<title>`llvm::MapVector&lt;llvm::BasicBlock*, (anonymous namespace)::Block (1 samples, 0.05%)</title><rect x="11.9" y="613" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="14.91" y="623.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="679.6" y="405" width="0.7" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="682.64" y="415.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="157.2" y="581" width="0.6" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="160.18" y="591.5" ></text>
</g>
<g >
<title>`getAllocationDataForFunction(llvm::Function const*, AllocType,  (1 samples, 0.05%)</title><rect x="658.6" y="309" width="0.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="661.62" y="319.5" ></text>
</g>
<g >
<title>`llvm::isNoAliasFn(llvm::Value const*, llvm::TargetLibraryInfo c (3 samples, 0.16%)</title><rect x="636.3" y="357" width="1.9" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="639.32" y="367.5" ></text>
</g>
<g >
<title>`llvm::getConstantDataArrayInfo(llvm::Value const*, llvm::Consta (1 samples, 0.05%)</title><rect x="301.2" y="453" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="304.18" y="463.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeWrapperPass::releaseMemory() (6 samples, 0.32%)</title><rect x="575.2" y="517" width="3.8" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="578.15" y="527.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, llvm::Sma (1 samples, 0.05%)</title><rect x="183.3" y="501" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="186.30" y="511.5" ></text>
</g>
<g >
<title>`free_tiny (3 samples, 0.16%)</title><rect x="577.1" y="485" width="1.9" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="580.06" y="495.5" ></text>
</g>
<g >
<title>`getCalledFunction(llvm::Value const*, bool, bool&amp;) (2 samples, 0.11%)</title><rect x="637.0" y="325" width="1.2" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="639.95" y="335.5" ></text>
</g>
<g >
<title>`llvm::GEPOperator::accumulateConstantOffset(llvm::DataLayout co (2 samples, 0.11%)</title><rect x="452.2" y="453" width="1.3" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="455.18" y="463.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SimplifyCFGOpt::isValueEqualityCompariso (1 samples, 0.05%)</title><rect x="233.0" y="565" width="0.6" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="236.00" y="575.5" ></text>
</g>
<g >
<title>`llvm::Value::stripPointerCasts() const (1 samples, 0.05%)</title><rect x="733.2" y="437" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="736.16" y="447.5" ></text>
</g>
<g >
<title>`core::SingleDispatchCxxEffectiveMethodFunction_O::entry_point(c (1,268 samples, 68.47%)</title><rect x="368.1" y="645" width="807.9" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="371.08" y="655.5" >`core::SingleDispatchCxxEffectiveMethodFunction_O::entry_point(c</text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;unsigned int, llvm::GVN::LeaderTable (1 samples, 0.05%)</title><rect x="591.7" y="437" width="0.7" height="15.0" fill="rgb(53,202,53)" rx="2" ry="2" />
<text  x="594.72" y="447.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::BasicBlock*, std::__1::unique_ (1 samples, 0.05%)</title><rect x="435.0" y="485" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="437.98" y="495.5" ></text>
</g>
<g >
<title>`gctools::startupGarbageCollectorAndSystem(int (*)(int, char**,  (1,852 samples, 100.00%)</title><rect x="10.0" y="2229" width="1180.0" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="13.00" y="2239.5" >`gctools::startupGarbageCollectorAndSystem(int (*)(int, char**, </text>
</g>
<g >
<title>`llvm::ValueSymbolTable::createValueName(llvm::StringRef, llvm:: (1 samples, 0.05%)</title><rect x="703.2" y="421" width="0.7" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="706.22" y="431.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="1114.2" y="421" width="0.6" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="1117.18" y="431.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (1 samples, 0.05%)</title><rect x="507.6" y="453" width="0.7" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="510.61" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (2 samples, 0.11%)</title><rect x="461.1" y="421" width="1.3" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="464.10" y="431.5" ></text>
</g>
<g >
<title>`std::__1::__split_buffer&lt;std::__1::unique_ptr&lt;llvm::AAResults:: (1 samples, 0.05%)</title><rect x="431.8" y="517" width="0.6" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="434.79" y="527.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (86 samples, 4.64%)</title><rect x="870.2" y="469" width="54.7" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="873.15" y="479.5" >`llvm..</text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="219.0" y="421" width="0.6" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="221.98" y="431.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock const*, std: (1 samples, 0.05%)</title><rect x="567.5" y="485" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="570.51" y="495.5" ></text>
</g>
<g >
<title>`llvm::Type::isIntegerTy(unsigned int) const (1 samples, 0.05%)</title><rect x="26.6" y="581" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="29.57" y="591.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldLoadFromConstPtr(llvm::Constant*, llvm::Type* (3 samples, 0.16%)</title><rect x="452.2" y="501" width="1.9" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="455.18" y="511.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitPHINode(llvm::PHINode&amp;) (1 samples, 0.05%)</title><rect x="324.1" y="597" width="0.7" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="327.11" y="607.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::getBackedgeTakenCount(llvm::Loop const*) (1 samples, 0.05%)</title><rect x="555.4" y="501" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="558.40" y="511.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="217.7" y="325" width="0.6" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="220.71" y="335.5" ></text>
</g>
<g >
<title>`getAllocationDataForFunction(llvm::Function const*, AllocType,  (2 samples, 0.11%)</title><rect x="288.4" y="533" width="1.3" height="15.0" fill="rgb(59,209,59)" rx="2" ry="2" />
<text  x="291.43" y="543.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (15 samples, 0.81%)</title><rect x="614.7" y="309" width="9.5" height="15.0" fill="rgb(64,212,64)" rx="2" ry="2" />
<text  x="617.65" y="319.5" ></text>
</g>
<g >
<title>`free (1 samples, 0.05%)</title><rect x="639.5" y="389" width="0.6" height="15.0" fill="rgb(200,200,59)" rx="2" ry="2" />
<text  x="642.50" y="399.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="28.5" y="533" width="0.6" height="15.0" fill="rgb(70,219,70)" rx="2" ry="2" />
<text  x="31.48" y="543.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="177.6" y="421" width="0.6" height="15.0" fill="rgb(210,210,62)" rx="2" ry="2" />
<text  x="180.57" y="431.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (16 samples, 0.86%)</title><rect x="498.7" y="469" width="10.2" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="501.69" y="479.5" ></text>
</g>
<g >
<title>`llvm::ValueHandleBase::~ValueHandleBase() (25 samples, 1.35%)</title><rect x="939.0" y="437" width="15.9" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="941.96" y="447.5" ></text>
</g>
<g >
<title>`llvm::FindFunctionBackedges(llvm::Function const&amp;, llvm::SmallV (1 samples, 0.05%)</title><rect x="402.5" y="501" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="405.48" y="511.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (1 samples, 0.05%)</title><rect x="225.4" y="469" width="0.6" height="15.0" fill="rgb(95,242,95)" rx="2" ry="2" />
<text  x="228.36" y="479.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;(anonymous namespace)::Simple (1 samples, 0.05%)</title><rect x="391.0" y="501" width="0.7" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="394.02" y="511.5" ></text>
</g>
<g >
<title>`llvm::MemorySSA::createNewAccess(llvm::Instruction*) (2 samples, 0.11%)</title><rect x="151.4" y="597" width="1.3" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="154.45" y="607.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (2 samples, 0.11%)</title><rect x="18.9" y="517" width="1.3" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="21.92" y="527.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::Value*, llvm::ValueLatticeElem (1 samples, 0.05%)</title><rect x="382.1" y="373" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="385.10" y="383.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="134.2" y="469" width="0.7" height="15.0" fill="rgb(106,252,106)" rx="2" ry="2" />
<text  x="137.24" y="479.5" ></text>
</g>
<g >
<title>`llvm::CodeMetrics::analyzeBasicBlock(llvm::BasicBlock const*, l (1 samples, 0.05%)</title><rect x="141.3" y="613" width="0.6" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="144.25" y="623.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedUseBits(llvm::Value*, llvm: (1 samples, 0.05%)</title><rect x="1091.9" y="469" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="1094.88" y="479.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitSelectInst(llvm::SelectInst&amp;) (1 samples, 0.05%)</title><rect x="324.8" y="597" width="0.6" height="15.0" fill="rgb(94,241,94)" rx="2" ry="2" />
<text  x="327.75" y="607.5" ></text>
</g>
<g >
<title>`llvm::GetElementPtrConstantExpr::getSourceElementType() const (1 samples, 0.05%)</title><rect x="618.5" y="229" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="621.48" y="239.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getTerminator() const (1 samples, 0.05%)</title><rect x="1170.9" y="485" width="0.6" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="1173.89" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SCCPSolver::ResolvedUndefsIn(llvm::Funct (1 samples, 0.05%)</title><rect x="363.0" y="661" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="365.98" y="671.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="498.1" y="357" width="0.6" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="501.06" y="367.5" ></text>
</g>
<g >
<title>`void std::__1::list&lt;llvm::GlobalsAAResult::DeletionCallbackHand (1 samples, 0.05%)</title><rect x="1174.7" y="533" width="0.6" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="1177.71" y="543.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyAssociativeOrCommutative(llvm::Bina (1 samples, 0.05%)</title><rect x="115.1" y="581" width="0.7" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="118.13" y="591.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (1 samples, 0.05%)</title><rect x="677.7" y="421" width="0.7" height="15.0" fill="rgb(108,254,108)" rx="2" ry="2" />
<text  x="680.73" y="431.5" ></text>
</g>
<g >
<title>`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="412.7" y="341" width="0.6" height="15.0" fill="rgb(214,214,64)" rx="2" ry="2" />
<text  x="415.68" y="351.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getIndexedOffsetInType(llvm::Type*, llvm::Arr (1 samples, 0.05%)</title><rect x="679.6" y="325" width="0.7" height="15.0" fill="rgb(65,213,65)" rx="2" ry="2" />
<text  x="682.64" y="335.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1123.7" y="373" width="0.7" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="1126.74" y="383.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="507.0" y="405" width="0.6" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="509.98" y="415.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::BasicBlock const*, unsigned int, llvm::Den (1 samples, 0.05%)</title><rect x="257.2" y="533" width="0.7" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="260.21" y="543.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="475.8" y="421" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="478.76" y="431.5" ></text>
</g>
<g >
<title>`std::__1::__split_buffer&lt;llvm::NonLocalDepEntry, std::__1::allo (1 samples, 0.05%)</title><rect x="640.1" y="389" width="0.7" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="643.14" y="399.5" ></text>
</g>
<g >
<title>`llvm::FPPassManager::runOnFunction(llvm::Function&amp;) (698 samples, 37.69%)</title><rect x="730.0" y="565" width="444.7" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="732.98" y="575.5" >`llvm::FPPassManager::runOnFunction(llvm::Function&amp;)</text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::getOrCreate(llvm:: (1 samples, 0.05%)</title><rect x="461.7" y="405" width="0.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="464.74" y="415.5" ></text>
</g>
<g >
<title>`llvm::Instruction::getMetadataImpl(unsigned int) const (1 samples, 0.05%)</title><rect x="125.3" y="549" width="0.7" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="128.32" y="559.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="106.2" y="485" width="0.6" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="109.21" y="495.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::getModRefBehavior(llvm::ImmutableCallSite) (1 samples, 0.05%)</title><rect x="169.9" y="517" width="0.7" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="172.92" y="527.5" ></text>
</g>
<g >
<title>`llvm::isPotentiallyReachableFromMany(llvm::SmallVectorImpl&lt;llvm (1 samples, 0.05%)</title><rect x="543.3" y="405" width="0.6" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="546.29" y="415.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (8 samples, 0.43%)</title><rect x="534.4" y="421" width="5.1" height="15.0" fill="rgb(101,246,101)" rx="2" ry="2" />
<text  x="537.37" y="431.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;llvm::WeakTrackingVH, false&gt;::gro (72 samples, 3.89%)</title><rect x="930.0" y="453" width="45.9" height="15.0" fill="rgb(75,222,75)" rx="2" ry="2" />
<text  x="933.04" y="463.5" >`llv..</text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std:: (1 samples, 0.05%)</title><rect x="674.5" y="405" width="0.7" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="677.55" y="415.5" ></text>
</g>
<g >
<title>`llvm::MemorySSA::CachingWalker::getClobberingMemoryAccess(llvm: (5 samples, 0.27%)</title><rect x="568.1" y="469" width="3.2" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="571.14" y="479.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeWrapperPass::runOnFunction(llvm::Function&amp;) (2 samples, 0.11%)</title><rect x="745.9" y="549" width="1.3" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="748.91" y="559.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::BasicBlock*, unsign (1 samples, 0.05%)</title><rect x="177.6" y="517" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="180.57" y="527.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (16 samples, 0.86%)</title><rect x="758.0" y="485" width="10.2" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="761.01" y="495.5" ></text>
</g>
<g >
<title>`llvm::ConstantExprKeyType::getHash() const (1 samples, 0.05%)</title><rect x="450.3" y="405" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="453.27" y="415.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldTerminator(llvm::BasicBlock*, bool, llvm::Tar (1 samples, 0.05%)</title><rect x="725.5" y="517" width="0.7" height="15.0" fill="rgb(70,219,70)" rx="2" ry="2" />
<text  x="728.52" y="527.5" ></text>
</g>
<g >
<title>`llvm::TerminatorInst::getNumSuccessors() const (1 samples, 0.05%)</title><rect x="564.3" y="469" width="0.7" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="567.32" y="479.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getPointerSize(unsigned int) const (1 samples, 0.05%)</title><rect x="489.1" y="421" width="0.7" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="492.14" y="431.5" ></text>
</g>
<g >
<title>`llvm::ComputeNumSignBits(llvm::Value const*, llvm::DataLayout c (1 samples, 0.05%)</title><rect x="486.0" y="453" width="0.6" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="488.95" y="463.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromShiftOperator(llvm::Operator const*, llvm:: (1 samples, 0.05%)</title><rect x="548.4" y="437" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="551.39" y="447.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyMultipleUseDemandedBits(llvm::Instr (1 samples, 0.05%)</title><rect x="284.6" y="533" width="0.6" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="287.61" y="543.5" ></text>
</g>
<g >
<title>`top.lsp-top130^378^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="2053" width="1180.0" height="15.0" fill="rgb(68,181,181)" rx="2" ry="2" />
<text  x="13.00" y="2063.5" >`top.lsp-top130^378^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::InstCombiner::foldOpWithConstantIntoOperand(llvm::BinaryO (1 samples, 0.05%)</title><rect x="543.3" y="453" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="546.29" y="463.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (2 samples, 0.11%)</title><rect x="512.7" y="421" width="1.3" height="15.0" fill="rgb(76,223,76)" rx="2" ry="2" />
<text  x="515.71" y="431.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="386.6" y="485" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="389.56" y="495.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="323.5" y="485" width="0.6" height="15.0" fill="rgb(202,202,60)" rx="2" ry="2" />
<text  x="326.48" y="495.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;unsigned long long, llv (1 samples, 0.05%)</title><rect x="1189.4" y="677" width="0.6" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="1192.36" y="687.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::MapInfo::getHashVa (1 samples, 0.05%)</title><rect x="95.4" y="405" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="98.38" y="415.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getAlignment(llvm::Type*, bool) const (1 samples, 0.05%)</title><rect x="645.9" y="261" width="0.6" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="648.87" y="271.5" ></text>
</g>
<g >
<title>`llvm::APInt::APInt(unsigned int, unsigned long long, bool) (1 samples, 0.05%)</title><rect x="482.8" y="469" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="485.76" y="479.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;std::__1::pair&lt;unsigned  (1 samples, 0.05%)</title><rect x="695.6" y="469" width="0.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="698.57" y="479.5" ></text>
</g>
<g >
<title>`simplifyICmpWithConstant(llvm::CmpInst::Predicate, llvm::Value* (1 samples, 0.05%)</title><rect x="682.8" y="437" width="0.7" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="685.83" y="447.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (1 samples, 0.05%)</title><rect x="393.6" y="485" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="396.56" y="495.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1317" width="1180.0" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="13.00" y="1327.5" >`compile-file.lsp-compile-file52^262^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::Value::getPointerAlignment(llvm::DataLayout const&amp;) const (1 samples, 0.05%)</title><rect x="321.6" y="517" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="324.57" y="527.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="29.1" y="581" width="0.7" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="32.11" y="591.5" ></text>
</g>
<g >
<title>`llvm::AAResults::alias(llvm::MemoryLocation const&amp;, llvm::Memor (1 samples, 0.05%)</title><rect x="202.4" y="389" width="0.7" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="205.42" y="399.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getSimplePointerDependencyFrom(l (4 samples, 0.22%)</title><rect x="172.5" y="501" width="2.5" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="175.47" y="511.5" ></text>
</g>
<g >
<title>`llvm::LazyValueInfo::getConstantOnEdge(llvm::Value*, llvm::Basi (1 samples, 0.05%)</title><rect x="375.7" y="517" width="0.7" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="378.72" y="527.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="266.8" y="581" width="0.6" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="269.77" y="591.5" ></text>
</g>
<g >
<title>`llvm::PointerType::get(llvm::Type*, unsigned int) (1 samples, 0.05%)</title><rect x="1100.2" y="469" width="0.6" height="15.0" fill="rgb(65,213,65)" rx="2" ry="2" />
<text  x="1103.16" y="479.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="102.4" y="565" width="0.6" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="105.39" y="575.5" ></text>
</g>
<g >
<title>`combineInstructionsOverFunction(llvm::Function&amp;, llvm::InstComb (123 samples, 6.64%)</title><rect x="51.4" y="629" width="78.4" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="54.41" y="639.5" >`combineI..</text>
</g>
<g >
<title>`llvm::AAResults::pointsToConstantMemory(llvm::MemoryLocation co (1 samples, 0.05%)</title><rect x="1159.4" y="469" width="0.7" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="1162.42" y="479.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedUseBits(llvm::Value*, llvm: (1 samples, 0.05%)</title><rect x="1124.4" y="453" width="0.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="1127.37" y="463.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="442.6" y="357" width="0.7" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="445.62" y="367.5" ></text>
</g>
<g >
<title>`llvm::GVN::iterateOnFunction(llvm::Function&amp;) (172 samples, 9.29%)</title><rect x="584.7" y="517" width="109.6" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="587.71" y="527.5" >`llvm::GVN::i..</text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm (1 samples, 0.05%)</title><rect x="622.9" y="261" width="0.7" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="625.94" y="271.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::DomTreeNodeBase&lt;llvm::BasicBlock&gt; c (1 samples, 0.05%)</title><rect x="1161.3" y="501" width="0.7" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="1164.33" y="511.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="640.1" y="373" width="0.7" height="15.0" fill="rgb(221,221,67)" rx="2" ry="2" />
<text  x="643.14" y="383.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="734.4" y="469" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="737.44" y="479.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SimplifyCFGOpt::run(llvm::BasicBlock*) (5 samples, 0.27%)</title><rect x="1169.0" y="501" width="3.2" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="1171.97" y="511.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (1 samples, 0.05%)</title><rect x="241.9" y="597" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="244.92" y="607.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::alias(llvm::MemoryLocation const&amp;, llvm::M (27 samples, 1.46%)</title><rect x="614.7" y="341" width="17.2" height="15.0" fill="rgb(89,235,89)" rx="2" ry="2" />
<text  x="617.65" y="351.5" ></text>
</g>
<g >
<title>`llvm::objcarc::ObjCARCAAWrapperPass* llvm::Pass::getAnalysisIfA (1 samples, 0.05%)</title><rect x="738.9" y="533" width="0.6" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="741.90" y="543.5" ></text>
</g>
<g >
<title>`llvm::isDereferenceableAndAlignedPointer(llvm::Value const*, un (1 samples, 0.05%)</title><rect x="720.4" y="469" width="0.7" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="723.42" y="479.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoCache::isOverdefined(llvm:: (1 samples, 0.05%)</title><rect x="20.8" y="501" width="0.7" height="15.0" fill="rgb(69,218,69)" rx="2" ry="2" />
<text  x="23.83" y="511.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;(anonymous namespace)::S (2 samples, 0.11%)</title><rect x="389.7" y="501" width="1.3" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="392.74" y="511.5" ></text>
</g>
<g >
<title>`llvm::SplitCriticalEdge(llvm::TerminatorInst*, unsigned int, ll (1 samples, 0.05%)</title><rect x="601.9" y="421" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="604.91" y="431.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;llvm::Function const*,  (1 samples, 0.05%)</title><rect x="352.8" y="581" width="0.6" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="355.79" y="591.5" ></text>
</g>
<g >
<title>`llvm::isa_impl_wrap&lt;llvm::DbgInfoIntrinsic, llvm::ilist_iterato (1 samples, 0.05%)</title><rect x="716.0" y="453" width="0.6" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="718.96" y="463.5" ></text>
</g>
<g >
<title>`llvm::getOrEnforceKnownAlignment(llvm::Value*, unsigned int, ll (1 samples, 0.05%)</title><rect x="326.0" y="581" width="0.7" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="329.03" y="591.5" ></text>
</g>
<g >
<title>`llvm::DominatorTreeBase&lt;llvm::BasicBlock, false&gt;::dominates(llv (3 samples, 0.16%)</title><rect x="214.5" y="533" width="1.9" height="15.0" fill="rgb(94,241,94)" rx="2" ry="2" />
<text  x="217.52" y="543.5" ></text>
</g>
<g >
<title>`tiny_free_no_lock (1 samples, 0.05%)</title><rect x="24.7" y="597" width="0.6" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="27.65" y="607.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::BasicBlock*, unsigned int, llvm::DenseMapI (1 samples, 0.05%)</title><rect x="177.6" y="485" width="0.6" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="180.57" y="495.5" ></text>
</g>
<g >
<title>`llvm::APInt::setBits(unsigned int, unsigned int) (1 samples, 0.05%)</title><rect x="538.8" y="389" width="0.7" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="541.83" y="399.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getIndexedOffsetInType(llvm::Type*, llvm::Arr (1 samples, 0.05%)</title><rect x="136.8" y="517" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="139.79" y="527.5" ></text>
</g>
<g >
<title>`llvm::FindAvailablePtrLoadStore(llvm::Value*, llvm::Type*, bool (2 samples, 0.11%)</title><rect x="315.8" y="565" width="1.3" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="318.83" y="575.5" ></text>
</g>
<g >
<title>`llvm::StoreInst* llvm::IRBuilder&lt;llvm::TargetFolder, llvm::IRBu (1 samples, 0.05%)</title><rect x="1125.6" y="453" width="0.7" height="15.0" fill="rgb(90,237,90)" rx="2" ry="2" />
<text  x="1128.65" y="463.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getPreferredAlignment(llvm::GlobalVariable co (1 samples, 0.05%)</title><rect x="110.7" y="453" width="0.6" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="113.67" y="463.5" ></text>
</g>
<g >
<title>`gctools::initializeBoehm(int (*)(int, char**, bool&amp;, int&amp;, int&amp; (1,852 samples, 100.00%)</title><rect x="10.0" y="2213" width="1180.0" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="13.00" y="2223.5" >`gctools::initializeBoehm(int (*)(int, char**, bool&amp;, int&amp;, int&amp;</text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;unsigned long long, llv (1 samples, 0.05%)</title><rect x="1189.4" y="709" width="0.6" height="15.0" fill="rgb(106,251,106)" rx="2" ry="2" />
<text  x="1192.36" y="719.5" ></text>
</g>
<g >
<title>`llvm::GEPOperator::accumulateConstantOffset(llvm::DataLayout co (1 samples, 0.05%)</title><rect x="176.3" y="485" width="0.6" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="179.30" y="495.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^33^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1077" width="1180.0" height="15.0" fill="rgb(103,214,214)" rx="2" ry="2" />
<text  x="13.00" y="1087.5" >`compile-file.lsp-compile-file52^33^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="382.1" y="341" width="0.6" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="385.10" y="351.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1122.5" y="389" width="0.6" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="1125.46" y="399.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (2 samples, 0.11%)</title><rect x="34.2" y="565" width="1.3" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="37.21" y="575.5" ></text>
</g>
<g >
<title>`compiler-conditions.lsp-compiler-conditions125^193^TOP-COMPILE- (1,852 samples, 100.00%)</title><rect x="10.0" y="917" width="1180.0" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="13.00" y="927.5" >`compiler-conditions.lsp-compiler-conditions125^193^TOP-COMPILE-</text>
</g>
<g >
<title>`void llvm::SmallVectorImpl&lt;llvm::WeakTrackingVH&gt;::emplace_back&lt; (233 samples, 12.58%)</title><rect x="926.2" y="469" width="148.5" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="929.22" y="479.5" >`void llvm::SmallV..</text>
</g>
<g >
<title>`(anonymous namespace)::FoldReinterpretLoadFromConstPtr(llvm::Co (1 samples, 0.05%)</title><rect x="275.1" y="565" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="278.05" y="575.5" ></text>
</g>
<g >
<title>`llvm::CallInst::getReturnedArgOperand() const (1 samples, 0.05%)</title><rect x="123.4" y="501" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="126.41" y="511.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasPHI(llvm::PHINode const*, unsigned lo (9 samples, 0.49%)</title><rect x="616.6" y="277" width="5.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="619.57" y="287.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatticeElement, llvm::D (1 samples, 0.05%)</title><rect x="17.0" y="549" width="0.6" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="20.01" y="559.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ADCELegacyPass::runOnFunction(llvm::Func (2 samples, 0.11%)</title><rect x="11.3" y="645" width="1.2" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="14.27" y="655.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="570.7" y="357" width="0.6" height="15.0" fill="rgb(83,231,83)" rx="2" ry="2" />
<text  x="573.69" y="367.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Va (1 samples, 0.05%)</title><rect x="377.0" y="469" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="380.00" y="479.5" ></text>
</g>
<g >
<title>`void llvm::SmallPtrSetImpl&lt;llvm::BasicBlock*&gt;::insert&lt;llvm::Ter (1 samples, 0.05%)</title><rect x="1169.6" y="421" width="0.6" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="1172.61" y="431.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::add(llvm::BasicBlock&amp;) (1 samples, 0.05%)</title><rect x="1158.8" y="501" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="1161.78" y="511.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatt (1 samples, 0.05%)</title><rect x="406.3" y="325" width="0.6" height="15.0" fill="rgb(69,218,69)" rx="2" ry="2" />
<text  x="409.31" y="335.5" ></text>
</g>
<g >
<title>`llvm::po_iterator&lt;llvm::BasicBlock*, llvm::SmallPtrSet&lt;llvm::Ba (1 samples, 0.05%)</title><rect x="145.7" y="597" width="0.6" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="148.71" y="607.5" ></text>
</g>
<g >
<title>`llvm::CallGraphWrapperPass::releaseMemory() (1 samples, 0.05%)</title><rect x="352.8" y="645" width="0.6" height="15.0" fill="rgb(71,220,71)" rx="2" ry="2" />
<text  x="355.79" y="655.5" ></text>
</g>
<g >
<title>`llvm::DenseMapInfo&lt;llvm::MemoryLocation&gt;::getHashValue(llvm::Me (1 samples, 0.05%)</title><rect x="622.9" y="229" width="0.7" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="625.94" y="239.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldAddWithConstant(llvm::BinaryOperator&amp;) (1 samples, 0.05%)</title><rect x="279.5" y="581" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="282.51" y="591.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="413.3" y="405" width="0.7" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="416.32" y="415.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="295.4" y="421" width="0.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="298.44" y="431.5" ></text>
</g>
<g >
<title>`free (1 samples, 0.05%)</title><rect x="1189.4" y="581" width="0.6" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="1192.36" y="591.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::Grow(unsigned int) (1 samples, 0.05%)</title><rect x="638.2" y="357" width="0.7" height="15.0" fill="rgb(57,206,57)" rx="2" ry="2" />
<text  x="641.23" y="367.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (2 samples, 0.11%)</title><rect x="648.4" y="245" width="1.3" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="651.42" y="255.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (16 samples, 0.86%)</title><rect x="185.9" y="421" width="10.1" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="188.85" y="431.5" ></text>
</g>
<g >
<title>`llvm::formLCSSAForInstructions(llvm::SmallVectorImpl&lt;llvm::Inst (1 samples, 0.05%)</title><rect x="737.6" y="453" width="0.7" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="740.62" y="463.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::computeBackedgeTakenCount(llvm::Loop con (1 samples, 0.05%)</title><rect x="1160.1" y="469" width="0.6" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="1163.05" y="479.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (3 samples, 0.16%)</title><rect x="536.3" y="373" width="1.9" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="539.29" y="383.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="436.3" y="437" width="0.6" height="15.0" fill="rgb(182,182,52)" rx="2" ry="2" />
<text  x="439.25" y="447.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;llvm::Function*, (anonymous namespace)::CVPLat (1 samples, 0.05%)</title><rect x="361.1" y="645" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="364.07" y="655.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;llvm::Function const*,  (1 samples, 0.05%)</title><rect x="352.8" y="501" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="355.79" y="511.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoCache::insertResult(llvm::V (1 samples, 0.05%)</title><rect x="373.8" y="469" width="0.6" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="376.81" y="479.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::~ScalarEvolution() (1 samples, 0.05%)</title><rect x="1167.1" y="501" width="0.6" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="1170.06" y="511.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="507.6" y="405" width="0.7" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="510.61" y="415.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::BasicBlock const*&gt;::find(llvm::Basi (1 samples, 0.05%)</title><rect x="738.3" y="501" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="741.26" y="511.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatt (2 samples, 0.11%)</title><rect x="382.7" y="389" width="1.3" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="385.73" y="399.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="601.9" y="373" width="0.6" height="15.0" fill="rgb(82,230,82)" rx="2" ry="2" />
<text  x="604.91" y="383.5" ></text>
</g>
<g >
<title>`doCallSiteSplitting(llvm::Function&amp;, llvm::TargetLibraryInfo&amp;) (1 samples, 0.05%)</title><rect x="253.4" y="645" width="0.6" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="256.39" y="655.5" ></text>
</g>
<g >
<title>`llvm::SSAUpdaterImpl&lt;llvm::SSAUpdater&gt;::BuildBlockList(llvm::Ba (1 samples, 0.05%)</title><rect x="737.0" y="421" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="739.99" y="431.5" ></text>
</g>
<g >
<title>`llvm::FindAvailableLoadedValue(llvm::LoadInst*, llvm::BasicBloc (1 samples, 0.05%)</title><rect x="76.3" y="597" width="0.6" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="79.26" y="607.5" ></text>
</g>
<g >
<title>`llvm::APInt::operator-=(llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="500.6" y="357" width="0.6" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="503.60" y="367.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedBits(llvm::Instruction*, un (2 samples, 0.11%)</title><rect x="103.7" y="565" width="1.2" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="106.66" y="575.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldOpWithConstantIntoOperand(llvm::BinaryO (1 samples, 0.05%)</title><rect x="325.4" y="549" width="0.6" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="328.39" y="559.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedBits(llvm::Instruction*, un (2 samples, 0.11%)</title><rect x="1121.8" y="469" width="1.3" height="15.0" fill="rgb(69,218,69)" rx="2" ry="2" />
<text  x="1124.83" y="479.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;std::__1::pair&lt;llvm::Memo (1 samples, 0.05%)</title><rect x="651.6" y="197" width="0.6" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="654.61" y="207.5" ></text>
</g>
<g >
<title>`llvm::APInt::APInt(llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="1149.9" y="373" width="0.6" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="1152.86" y="383.5" ></text>
</g>
<g >
<title>`llvm::Value::getName() const (1 samples, 0.05%)</title><rect x="347.7" y="645" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="350.69" y="655.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Pass*, llvm::Small (1 samples, 0.05%)</title><rect x="159.1" y="613" width="0.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="162.09" y="623.5" ></text>
</g>
<g >
<title>`_platform_memcmp (1 samples, 0.05%)</title><rect x="658.6" y="293" width="0.7" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="661.62" y="303.5" ></text>
</g>
<g >
<title>`llvm::scc_iterator&lt;llvm::CallGraph*, llvm::GraphTraits&lt;llvm::Ca (1 samples, 0.05%)</title><rect x="1175.3" y="517" width="0.7" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="1178.35" y="527.5" ></text>
</g>
<g >
<title>`free_tiny (2 samples, 0.11%)</title><rect x="398.7" y="501" width="1.2" height="15.0" fill="rgb(179,179,51)" rx="2" ry="2" />
<text  x="401.66" y="511.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="34.8" y="421" width="0.7" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="37.85" y="431.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (1 samples, 0.05%)</title><rect x="392.9" y="437" width="0.7" height="15.0" fill="rgb(81,229,81)" rx="2" ry="2" />
<text  x="395.93" y="447.5" ></text>
</g>
<g >
<title>`llvm::PopulateLoopsDFS&lt;llvm::BasicBlock, llvm::Loop&gt;::traverse( (4 samples, 0.22%)</title><rect x="143.8" y="613" width="2.5" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="146.80" y="623.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (6 samples, 0.32%)</title><rect x="303.7" y="517" width="3.8" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="306.73" y="527.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="1119.9" y="437" width="0.7" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="1122.91" y="447.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::findAnalysisPass(void const*, bool) (1 samples, 0.05%)</title><rect x="738.9" y="485" width="0.6" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="741.90" y="495.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^181^TOP-COMPILE-FILE (1,268 samples, 68.47%)</title><rect x="368.1" y="773" width="807.9" height="15.0" fill="rgb(79,191,191)" rx="2" ry="2" />
<text  x="371.08" y="783.5" >`compile-file.lsp-compile-file52^181^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::GlobalValue const*&gt;::find(llvm::Glo (1 samples, 0.05%)</title><rect x="645.2" y="261" width="0.7" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="648.24" y="271.5" ></text>
</g>
<g >
<title>`free (1 samples, 0.05%)</title><rect x="566.9" y="469" width="0.6" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="569.87" y="479.5" ></text>
</g>
<g >
<title>`llvm::MemorySSA::CachingWalker::getClobberingMemoryAccess(llvm: (3 samples, 0.16%)</title><rect x="149.5" y="565" width="1.9" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="152.54" y="575.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="196.7" y="405" width="0.6" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="199.68" y="415.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (9 samples, 0.49%)</title><rect x="55.2" y="597" width="5.8" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="58.24" y="607.5" ></text>
</g>
<g >
<title>`llvm::LoadInst* llvm::IRBuilder&lt;llvm::TargetFolder, llvm::IRBui (1 samples, 0.05%)</title><rect x="530.6" y="485" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="533.55" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getBlockValue(llvm::V (1 samples, 0.05%)</title><rect x="417.1" y="405" width="0.7" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="420.14" y="415.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::BasicBlock*, llvm::Value*, llvm::DenseMapI (4 samples, 0.22%)</title><rect x="667.5" y="389" width="2.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="670.54" y="399.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&amp; (1 samples, 0.05%)</title><rect x="126.0" y="565" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="128.96" y="575.5" ></text>
</g>
<g >
<title>`free_small (1 samples, 0.05%)</title><rect x="386.6" y="437" width="0.6" height="15.0" fill="rgb(213,213,64)" rx="2" ry="2" />
<text  x="389.56" y="447.5" ></text>
</g>
<g >
<title>`llvm::AssumptionCache::assumptionsFor(llvm::Value const*) (1 samples, 0.05%)</title><rect x="15.1" y="517" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="18.10" y="527.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std::__1:: (1 samples, 0.05%)</title><rect x="575.2" y="485" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="578.15" y="495.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp_big(void const*) (1 samples, 0.05%)</title><rect x="31.7" y="549" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="34.66" y="559.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::getAliasSetForPointer(llvm::Value*, unsi (3 samples, 0.16%)</title><rect x="133.6" y="549" width="1.9" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="136.61" y="559.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (5 samples, 0.27%)</title><rect x="546.5" y="453" width="3.2" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="549.48" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldCastInstruction(unsigned int, llvm::Constant* (2 samples, 0.11%)</title><rect x="766.9" y="453" width="1.3" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="769.93" y="463.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::ValueHand (111 samples, 5.99%)</title><rect x="1000.8" y="437" width="70.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="1003.77" y="447.5" >`llvm::..</text>
</g>
<g >
<title>`llvm::df_iterator&lt;llvm::BasicBlock*, llvm::df_iterator_default_ (1 samples, 0.05%)</title><rect x="700.0" y="501" width="0.7" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="703.03" y="511.5" ></text>
</g>
<g >
<title>`llvm::raw_svector_ostream::raw_svector_ostream(llvm::SmallVecto (1 samples, 0.05%)</title><rect x="530.6" y="421" width="0.6" height="15.0" fill="rgb(60,210,60)" rx="2" ry="2" />
<text  x="533.55" y="431.5" ></text>
</g>
<g >
<title>`llvm::FindFunctionBackedges(llvm::Function const&amp;, llvm::SmallV (1 samples, 0.05%)</title><rect x="348.3" y="613" width="0.7" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="351.33" y="623.5" ></text>
</g>
<g >
<title>`top.lsp-top130^378^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1989" width="1180.0" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="13.00" y="1999.5" >`top.lsp-top130^378^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::IntegerType::get(llvm::LLVMContext&amp;, unsigned int) (1 samples, 0.05%)</title><rect x="444.5" y="437" width="0.7" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="447.54" y="447.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1124.4" y="373" width="0.6" height="15.0" fill="rgb(63,211,63)" rx="2" ry="2" />
<text  x="1127.37" y="383.5" ></text>
</g>
<g >
<title>`getValueFromCondition(llvm::Value*, llvm::Value*, bool, llvm::D (1 samples, 0.05%)</title><rect x="17.6" y="517" width="0.7" height="15.0" fill="rgb(82,230,82)" rx="2" ry="2" />
<text  x="20.65" y="527.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1123.7" y="309" width="0.7" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="1126.74" y="319.5" ></text>
</g>
<g >
<title>`getValueFromCondition(llvm::Value*, llvm::Value*, bool) (1 samples, 0.05%)</title><rect x="35.5" y="485" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="38.49" y="495.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm: (1 samples, 0.05%)</title><rect x="46.3" y="565" width="0.7" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="49.32" y="575.5" ></text>
</g>
<g >
<title>`llvm::hashing::detail::hash_short(char const*, unsigned long, u (1 samples, 0.05%)</title><rect x="461.7" y="357" width="0.7" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="464.74" y="367.5" ></text>
</g>
<g >
<title>`llvm::PopulateLoopsDFS&lt;llvm::BasicBlock, llvm::Loop&gt;::traverse( (1 samples, 0.05%)</title><rect x="1160.7" y="517" width="0.6" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="1163.69" y="527.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (1 samples, 0.05%)</title><rect x="366.8" y="629" width="0.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="369.80" y="639.5" ></text>
</g>
<g >
<title>`llvm::hashing::detail::hash_combine_recursive_helper::combine(u (1 samples, 0.05%)</title><rect x="462.4" y="357" width="0.6" height="15.0" fill="rgb(53,202,53)" rx="2" ry="2" />
<text  x="465.38" y="367.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="197.3" y="437" width="0.7" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="200.32" y="447.5" ></text>
</g>
<g >
<title>`llvm::OperandBundleUser&lt;llvm::CallInst, llvm::Use*&gt;::getNumOper (1 samples, 0.05%)</title><rect x="373.2" y="485" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="376.17" y="495.5" ></text>
</g>
<g >
<title>`small_free_list_find_by_ptr (1 samples, 0.05%)</title><rect x="136.2" y="549" width="0.6" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="139.16" y="559.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (3 samples, 0.16%)</title><rect x="222.8" y="549" width="1.9" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="225.81" y="559.5" ></text>
</g>
<g >
<title>`llvm::CallGraphWrapperPass::runOnModule(llvm::Module&amp;) (3 samples, 0.16%)</title><rect x="728.1" y="581" width="1.9" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="731.07" y="591.5" ></text>
</g>
<g >
<title>`simplifyICmpWithConstant(llvm::CmpInst::Predicate, llvm::Value* (1 samples, 0.05%)</title><rect x="1117.4" y="469" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="1120.37" y="479.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm (1 samples, 0.05%)</title><rect x="194.8" y="341" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="197.77" y="351.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="323.5" y="517" width="0.6" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="326.48" y="527.5" ></text>
</g>
<g >
<title>`llvm::PMTopLevelManager::findAnalysisPass(void const*) (1 samples, 0.05%)</title><rect x="738.9" y="501" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="741.90" y="511.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (1 samples, 0.05%)</title><rect x="498.1" y="453" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="501.06" y="463.5" ></text>
</g>
<g >
<title>`std::__1::__vector_base&lt;std::__1::unique_ptr&lt;clang::ast_matcher (1 samples, 0.05%)</title><rect x="739.5" y="533" width="0.7" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="742.54" y="543.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorBase::grow_pod(void*, unsigned long, unsigned  (1 samples, 0.05%)</title><rect x="699.4" y="469" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="702.40" y="479.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatticeElement, llvm::D (1 samples, 0.05%)</title><rect x="367.4" y="597" width="0.7" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="370.44" y="607.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;llvm::Function const*,  (1 samples, 0.05%)</title><rect x="352.8" y="549" width="0.6" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="355.79" y="559.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::AssumptionCache::A (1 samples, 0.05%)</title><rect x="533.7" y="389" width="0.7" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="536.74" y="399.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value*&gt;::insert(llvm::Value*) (1 samples, 0.05%)</title><rect x="27.2" y="549" width="0.6" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="30.20" y="559.5" ></text>
</g>
<g >
<title>`free_tiny (1 samples, 0.05%)</title><rect x="1177.3" y="613" width="0.6" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="1180.26" y="623.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm: (2 samples, 0.11%)</title><rect x="663.7" y="389" width="1.3" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="666.71" y="399.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm:: (1 samples, 0.05%)</title><rect x="315.8" y="533" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="318.83" y="543.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (1 samples, 0.05%)</title><rect x="649.7" y="261" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="652.70" y="271.5" ></text>
</g>
<g >
<title>`SimplifyFunction(llvm::Function*, llvm::CallGraph&amp;) (1 samples, 0.05%)</title><rect x="369.4" y="549" width="0.6" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="372.35" y="559.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::Value*, unsigned int&gt;* llvm::D (1 samples, 0.05%)</title><rect x="163.6" y="533" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="166.55" y="543.5" ></text>
</g>
<g >
<title>`llvm::OrderedBasicBlock::OrderedBasicBlock(llvm::BasicBlock con (1 samples, 0.05%)</title><rect x="199.9" y="453" width="0.6" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="202.87" y="463.5" ></text>
</g>
<g >
<title>`AllocateBuckets(unsigned int) (1 samples, 0.05%)</title><rect x="347.1" y="597" width="0.6" height="15.0" fill="rgb(216,216,65)" rx="2" ry="2" />
<text  x="350.05" y="607.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="259.8" y="597" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="262.76" y="607.5" ></text>
</g>
<g >
<title>`llvm::User::allocHungoffUses(unsigned int, bool) (1 samples, 0.05%)</title><rect x="572.6" y="453" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="575.60" y="463.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="777.8" y="437" width="0.6" height="15.0" fill="rgb(77,224,77)" rx="2" ry="2" />
<text  x="780.76" y="447.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (9 samples, 0.49%)</title><rect x="1107.2" y="437" width="5.7" height="15.0" fill="rgb(59,209,59)" rx="2" ry="2" />
<text  x="1110.17" y="447.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitAnd(llvm::BinaryOperator&amp;) (1 samples, 0.05%)</title><rect x="81.4" y="597" width="0.6" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="84.36" y="607.5" ></text>
</g>
<g >
<title>`getValueFromCondition(llvm::Value*, llvm::Value*, bool) (1 samples, 0.05%)</title><rect x="387.8" y="421" width="0.7" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="390.83" y="431.5" ></text>
</g>
<g >
<title>`llvm::Instruction::mayWriteToMemory() const (1 samples, 0.05%)</title><rect x="316.5" y="549" width="0.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="319.47" y="559.5" ></text>
</g>
<g >
<title>`llvm::User::allocHungoffUses(unsigned int, bool) (1 samples, 0.05%)</title><rect x="723.6" y="437" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="726.61" y="447.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::transformConstExprCastCall(llvm::CallSite) (1 samples, 0.05%)</title><rect x="82.6" y="565" width="0.7" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="85.63" y="575.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObjects(llvm::Value*, llvm::SmallVectorImpl&lt; (1 samples, 0.05%)</title><rect x="498.1" y="421" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="501.06" y="431.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (14 samples, 0.76%)</title><rect x="65.4" y="581" width="9.0" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="68.43" y="591.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;std::__1::pair&lt;llvm::Basi (2 samples, 0.11%)</title><rect x="364.9" y="613" width="1.3" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="367.89" y="623.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getPointerSize(unsigned int) const (1 samples, 0.05%)</title><rect x="626.1" y="197" width="0.7" height="15.0" fill="rgb(99,244,99)" rx="2" ry="2" />
<text  x="629.12" y="207.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::freePass(llvm::Pass*, llvm::StringRef, llv (1 samples, 0.05%)</title><rect x="352.8" y="661" width="0.6" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="355.79" y="671.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&amp; (1 samples, 0.05%)</title><rect x="284.6" y="453" width="0.6" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="287.61" y="463.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::Valu (1 samples, 0.05%)</title><rect x="250.8" y="261" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="253.84" y="271.5" ></text>
</g>
<g >
<title>`szone_size (1 samples, 0.05%)</title><rect x="272.5" y="517" width="0.6" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="275.51" y="527.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::Instruction*, unsig (1 samples, 0.05%)</title><rect x="61.6" y="597" width="0.6" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="64.61" y="607.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeAllocSize(llvm::Type*) const (1 samples, 0.05%)</title><rect x="1135.8" y="357" width="0.7" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="1138.84" y="367.5" ></text>
</g>
<g >
<title>`llvm::LoopInfoWrapperPass::runOnFunction(llvm::Function&amp;) (6 samples, 0.32%)</title><rect x="562.4" y="549" width="3.8" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="565.41" y="559.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="529.3" y="421" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="532.28" y="431.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="656.7" y="293" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="659.71" y="303.5" ></text>
</g>
<g >
<title>`stripAndComputeConstantOffsets(llvm::DataLayout const&amp;, llvm::V (1 samples, 0.05%)</title><rect x="731.9" y="437" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="734.89" y="447.5" ></text>
</g>
<g >
<title>`small_malloc_should_clear (1 samples, 0.05%)</title><rect x="357.9" y="533" width="0.6" height="15.0" fill="rgb(213,213,64)" rx="2" ry="2" />
<text  x="360.88" y="543.5" ></text>
</g>
<g >
<title>`isDereferenceableAndAlignedPointer(llvm::Value const*, unsigned (1 samples, 0.05%)</title><rect x="715.3" y="437" width="0.7" height="15.0" fill="rgb(101,246,101)" rx="2" ry="2" />
<text  x="718.32" y="447.5" ></text>
</g>
<g >
<title>`char* llvm::hashing::detail::hash_combine_recursive_helper::com (1 samples, 0.05%)</title><rect x="57.1" y="485" width="0.7" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="60.15" y="495.5" ></text>
</g>
<g >
<title>`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="716.6" y="341" width="0.6" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="719.60" y="351.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;void const*, llvm::Pass*, llv (1 samples, 0.05%)</title><rect x="154.6" y="629" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="157.63" y="639.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedUseBits(llvm::Value*, llvm: (2 samples, 0.11%)</title><rect x="314.6" y="549" width="1.2" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="317.56" y="559.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="191.6" y="357" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="194.59" y="367.5" ></text>
</g>
<g >
<title>`llvm::User::operator new(unsigned long, unsigned int) (1 samples, 0.05%)</title><rect x="1092.5" y="469" width="0.7" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="1095.52" y="479.5" ></text>
</g>
<g >
<title>`getValueFromCondition(llvm::Value*, llvm::Value*, bool, llvm::D (3 samples, 0.16%)</title><rect x="408.2" y="373" width="1.9" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="411.22" y="383.5" ></text>
</g>
<g >
<title>`llvm::DenseMapInfo&lt;llvm::MemoryLocation&gt;::getHashValue(llvm::Me (1 samples, 0.05%)</title><rect x="196.0" y="373" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="199.05" y="383.5" ></text>
</g>
<g >
<title>`llvm::LoopInfoBase&lt;llvm::BasicBlock, llvm::Loop&gt;::analyze(llvm: (8 samples, 0.43%)</title><rect x="143.2" y="629" width="5.1" height="15.0" fill="rgb(52,201,52)" rx="2" ry="2" />
<text  x="146.16" y="639.5" ></text>
</g>
<g >
<title>`llvm::isInstructionTriviallyDead(llvm::Instruction*, llvm::Targ (3 samples, 0.16%)</title><rect x="328.6" y="597" width="1.9" height="15.0" fill="rgb(87,233,87)" rx="2" ry="2" />
<text  x="331.57" y="607.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value const*, unsigned  (1 samples, 0.05%)</title><rect x="1182.4" y="677" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="1185.35" y="687.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::BinaryOp_match&lt;llvm::PatternMatch::api (1 samples, 0.05%)</title><rect x="1118.0" y="485" width="0.6" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="1121.00" y="495.5" ></text>
</g>
<g >
<title>`llvm::FoldBranchToCommonDest(llvm::BranchInst*, unsigned int) (1 samples, 0.05%)</title><rect x="1169.6" y="469" width="0.6" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="1172.61" y="479.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (2 samples, 0.11%)</title><rect x="747.8" y="501" width="1.3" height="15.0" fill="rgb(89,235,89)" rx="2" ry="2" />
<text  x="750.82" y="511.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::MapInfo::getHashVa (1 samples, 0.05%)</title><rect x="750.4" y="405" width="0.6" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="753.37" y="415.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (10 samples, 0.54%)</title><rect x="55.2" y="613" width="6.4" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="58.24" y="623.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldLoadFromConstPtr(llvm::Constant*, llvm::Type* (5 samples, 0.27%)</title><rect x="473.2" y="485" width="3.2" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="476.21" y="495.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::GetNonLocalInfoForBlock(llvm::In (47 samples, 2.54%)</title><rect x="610.8" y="421" width="30.0" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="613.83" y="431.5" >`l..</text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Instruction*, llvm (1 samples, 0.05%)</title><rect x="175.7" y="549" width="0.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="178.66" y="559.5" ></text>
</g>
<g >
<title>`void std::__1::vector&lt;llvm::DomTreeNodeBase&lt;llvm::BasicBlock&gt;*, (2 samples, 0.11%)</title><rect x="436.9" y="501" width="1.3" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="439.89" y="511.5" ></text>
</g>
<g >
<title>`llvm::IDFCalculator&lt;llvm::BasicBlock*, false&gt;::calculate(llvm:: (2 samples, 0.11%)</title><rect x="701.9" y="485" width="1.3" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="704.94" y="495.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;std::__1::pair&lt;unsigned i (1 samples, 0.05%)</title><rect x="697.5" y="437" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="700.48" y="447.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeAllocSize(llvm::Type*) const (2 samples, 0.11%)</title><rect x="627.4" y="197" width="1.3" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="630.40" y="207.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (1 samples, 0.05%)</title><rect x="159.7" y="581" width="0.7" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="162.73" y="591.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::EarlyCSE::run() (18 samples, 0.97%)</title><rect x="389.1" y="533" width="11.5" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="392.10" y="543.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="265.5" y="469" width="0.6" height="15.0" fill="rgb(102,247,102)" rx="2" ry="2" />
<text  x="268.50" y="479.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="324.1" y="581" width="0.7" height="15.0" fill="rgb(89,235,89)" rx="2" ry="2" />
<text  x="327.11" y="591.5" ></text>
</g>
<g >
<title>`llvm::AliasSet::aliasesPointer(llvm::Value const*, unsigned lon (2 samples, 0.11%)</title><rect x="134.2" y="517" width="1.3" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="137.24" y="527.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::createNodeForPHI(llvm::PHINode*) (1 samples, 0.05%)</title><rect x="131.7" y="517" width="0.6" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="134.70" y="527.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::StripPtrCastKeepAS(llvm::Constant*, llvm (1 samples, 0.05%)</title><rect x="68.6" y="549" width="0.7" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="71.62" y="559.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::getModRefBehavior(llvm::ImmutableCallSite) (2 samples, 0.11%)</title><rect x="631.9" y="325" width="1.2" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="634.86" y="335.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::initializeAnalysisImpl(llvm::Pass*) (1 samples, 0.05%)</title><rect x="1162.6" y="549" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="1165.60" y="559.5" ></text>
</g>
<g >
<title>`llvm::isDereferenceableAndAlignedPointer(llvm::Value const*, un (1 samples, 0.05%)</title><rect x="719.1" y="437" width="0.7" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text  x="722.15" y="447.5" ></text>
</g>
<g >
<title>`free (1 samples, 0.05%)</title><rect x="631.2" y="309" width="0.7" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="634.22" y="319.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::ImmutableCallSite, llvm::M (1 samples, 0.05%)</title><rect x="315.8" y="517" width="0.7" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="318.83" y="527.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::SimplifyCFGOpt::SimplifyCondBranch(llvm: (1 samples, 0.05%)</title><rect x="717.2" y="437" width="0.7" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="720.24" y="447.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="1119.9" y="469" width="0.7" height="15.0" fill="rgb(70,218,70)" rx="2" ry="2" />
<text  x="1122.91" y="479.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::createExpr(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="168.7" y="549" width="0.6" height="15.0" fill="rgb(100,245,100)" rx="2" ry="2" />
<text  x="171.65" y="559.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getModule() const (3 samples, 0.16%)</title><rect x="1132.0" y="453" width="1.9" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="1135.02" y="463.5" ></text>
</g>
<g >
<title>`tryToUnrollLoop(llvm::Loop*, llvm::DominatorTree&amp;, llvm::LoopIn (1 samples, 0.05%)</title><rect x="1160.1" y="517" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="1163.05" y="527.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::FoldReinterpretLoadFromConstPtr(llvm::Co (2 samples, 0.11%)</title><rect x="690.5" y="421" width="1.2" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="693.48" y="431.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::Value*, llvm::CallG (1 samples, 0.05%)</title><rect x="368.1" y="549" width="0.6" height="15.0" fill="rgb(89,235,89)" rx="2" ry="2" />
<text  x="371.08" y="559.5" ></text>
</g>
<g >
<title>`combineLoadToNewType(llvm::InstCombiner&amp;, llvm::LoadInst&amp;, llvm (2 samples, 0.11%)</title><rect x="524.8" y="485" width="1.3" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="527.82" y="495.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getPointerDependencyFrom(llvm::M (39 samples, 2.11%)</title><rect x="613.4" y="405" width="24.8" height="15.0" fill="rgb(52,201,52)" rx="2" ry="2" />
<text  x="616.38" y="415.5" >`..</text>
</g>
<g >
<title>`llvm::isKnownNonEqual(llvm::Value const*, llvm::Value const*, l (1 samples, 0.05%)</title><rect x="98.6" y="565" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="101.56" y="575.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolutionWrapperPass::runOnFunction(llvm::Function&amp; (2 samples, 0.11%)</title><rect x="346.4" y="645" width="1.3" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="349.41" y="655.5" ></text>
</g>
<g >
<title>`llvm::LoopBase&lt;llvm::BasicBlock, llvm::Loop&gt;::getExitingBlocks( (1 samples, 0.05%)</title><rect x="1160.1" y="421" width="0.6" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="1163.05" y="431.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm (1 samples, 0.05%)</title><rect x="333.7" y="405" width="0.6" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="336.67" y="415.5" ></text>
</g>
<g >
<title>`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="765.0" y="309" width="0.7" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="768.02" y="319.5" ></text>
</g>
<g >
<title>`llvm::PMDataManager::removeDeadPasses(llvm::Pass*, llvm::String (1 samples, 0.05%)</title><rect x="352.8" y="677" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="355.79" y="687.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (22 samples, 1.19%)</title><rect x="1104.0" y="485" width="14.0" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="1106.98" y="495.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (2 samples, 0.11%)</title><rect x="34.2" y="517" width="1.3" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="37.21" y="527.5" ></text>
</g>
<g >
<title>`small_malloc_should_clear (1 samples, 0.05%)</title><rect x="867.6" y="373" width="0.6" height="15.0" fill="rgb(219,219,66)" rx="2" ry="2" />
<text  x="870.60" y="383.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (6 samples, 0.32%)</title><rect x="263.6" y="613" width="3.8" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="266.59" y="623.5" ></text>
</g>
<g >
<title>`llvm::matchSelectPattern(llvm::Value*, llvm::Value*&amp;, llvm::Val (1 samples, 0.05%)</title><rect x="124.7" y="533" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="127.69" y="543.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasSelect(llvm::SelectInst const*, unsig (1 samples, 0.05%)</title><rect x="626.1" y="277" width="0.7" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="629.12" y="287.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm::DomT (1 samples, 0.05%)</title><rect x="433.7" y="501" width="0.6" height="15.0" fill="rgb(100,245,100)" rx="2" ry="2" />
<text  x="436.70" y="511.5" ></text>
</g>
<g >
<title>`llvm::BitstreamWriter::ExitBlock() (1 samples, 0.05%)</title><rect x="1181.1" y="693" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="1184.08" y="703.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (2 samples, 0.11%)</title><rect x="270.6" y="549" width="1.3" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="273.59" y="559.5" ></text>
</g>
<g >
<title>`llvm::DenseMapInfo&lt;(anonymous namespace)::SimpleValue&gt;::isEqual (1 samples, 0.05%)</title><rect x="389.7" y="485" width="0.7" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="392.74" y="495.5" ></text>
</g>
<g >
<title>`llvm::computePeelCount(llvm::Loop*, unsigned int, llvm::TargetT (1 samples, 0.05%)</title><rect x="561.8" y="501" width="0.6" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="564.77" y="511.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::GVN::Expression, u (1 samples, 0.05%)</title><rect x="587.9" y="421" width="0.6" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="590.89" y="431.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1091.9" y="325" width="0.6" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text  x="1094.88" y="335.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::find_imp(void const*) const (1 samples, 0.05%)</title><rect x="426.1" y="405" width="0.6" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="429.06" y="415.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (9 samples, 0.49%)</title><rect x="296.1" y="501" width="5.7" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="299.08" y="511.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (4 samples, 0.22%)</title><rect x="1095.1" y="469" width="2.5" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="1098.06" y="479.5" ></text>
</g>
<g >
<title>`llvm::Type::getPrimitiveSizeInBits() const (1 samples, 0.05%)</title><rect x="282.1" y="549" width="0.6" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="285.06" y="559.5" ></text>
</g>
<g >
<title>`default_zone_realloc (1 samples, 0.05%)</title><rect x="1076.0" y="437" width="0.6" height="15.0" fill="rgb(188,188,54)" rx="2" ry="2" />
<text  x="1078.95" y="447.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::InstSimplifier::runOnFunction(llvm::Func (8 samples, 0.43%)</title><rect x="730.6" y="549" width="5.1" height="15.0" fill="rgb(105,250,105)" rx="2" ry="2" />
<text  x="733.62" y="559.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoCache::hasCachedValueInfo(l (1 samples, 0.05%)</title><rect x="407.6" y="389" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="410.58" y="399.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;(anonymous namespace)::S (1 samples, 0.05%)</title><rect x="391.0" y="469" width="0.7" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="394.02" y="479.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::find_imp(void const*) const (1 samples, 0.05%)</title><rect x="417.1" y="357" width="0.7" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="420.14" y="367.5" ></text>
</g>
<g >
<title>`llvm::DemandedBits::determineLiveOperandBits(llvm::Instruction  (1 samples, 0.05%)</title><rect x="40.6" y="597" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="43.58" y="607.5" ></text>
</g>
<g >
<title>`getValueFromCondition(llvm::Value*, llvm::Value*, bool, llvm::D (1 samples, 0.05%)</title><rect x="419.7" y="389" width="0.6" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="422.69" y="399.5" ></text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="634.4" y="261" width="0.6" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="637.41" y="271.5" ></text>
</g>
<g >
<title>`llvm::TrackingMDRef::~TrackingMDRef() (1 samples, 0.05%)</title><rect x="238.7" y="597" width="0.7" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="241.74" y="607.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::GetNonLocalInfoForBlock(llvm::In (28 samples, 1.51%)</title><rect x="641.4" y="405" width="17.9" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="644.41" y="415.5" ></text>
</g>
<g >
<title>`small_size (1 samples, 0.05%)</title><rect x="631.2" y="293" width="0.7" height="15.0" fill="rgb(191,191,55)" rx="2" ry="2" />
<text  x="634.22" y="303.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::getModRefInfo(llvm::ImmutableCallSite, llv (1 samples, 0.05%)</title><rect x="656.7" y="309" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="659.71" y="319.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1115.5" y="437" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="1118.45" y="447.5" ></text>
</g>
<g >
<title>`llvm::LoopInfoWrapperPass* llvm::Pass::getAnalysisIfAvailable&lt;l (2 samples, 0.11%)</title><rect x="44.4" y="629" width="1.3" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="47.41" y="639.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitAllocSite(llvm::Instruction&amp;) (453 samples, 24.46%)</title><rect x="786.0" y="485" width="288.7" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="789.05" y="495.5" >`llvm::InstCombiner::visitAllocSite(ll..</text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="374.4" y="421" width="0.7" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="377.45" y="431.5" ></text>
</g>
<g >
<title>`llvm::LazyValueInfo::threadEdge(llvm::BasicBlock*, llvm::BasicB (1 samples, 0.05%)</title><rect x="412.7" y="469" width="0.6" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="415.68" y="479.5" ></text>
</g>
<g >
<title>`llvm::DemandedBits::isInstructionDead(llvm::Instruction*) (1 samples, 0.05%)</title><rect x="429.2" y="533" width="0.7" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="432.24" y="543.5" ></text>
</g>
<g >
<title>`small_free_list_remove_ptr_no_clear (2 samples, 0.11%)</title><rect x="668.8" y="277" width="1.3" height="15.0" fill="rgb(214,214,64)" rx="2" ry="2" />
<text  x="671.81" y="287.5" ></text>
</g>
<g >
<title>`llvm::TargetLibraryInfoImpl::getLibFunc(llvm::Function const&amp;,  (1 samples, 0.05%)</title><rect x="127.2" y="565" width="0.7" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="130.24" y="575.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="28.5" y="517" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="31.48" y="527.5" ></text>
</g>
<g >
<title>`llvm::isNoAliasFn(llvm::Value const*, llvm::TargetLibraryInfo c (1 samples, 0.05%)</title><rect x="205.0" y="437" width="0.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="207.97" y="447.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^181^TOP-COMPILE-FILE (1,830 samples, 98.81%)</title><rect x="10.0" y="789" width="1166.0" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="13.00" y="799.5" >`compile-file.lsp-compile-file52^181^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::SmallVectorTemplateBase&lt;llvm::Instruction*, true&gt;::push_b (1 samples, 0.05%)</title><rect x="333.0" y="629" width="0.7" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text  x="336.03" y="639.5" ></text>
</g>
<g >
<title>`llvm::ConstantUniqueMap&lt;llvm::ConstantExpr&gt;::getOrCreate(llvm:: (1 samples, 0.05%)</title><rect x="450.3" y="437" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="453.27" y="447.5" ></text>
</g>
<g >
<title>`llvm::LowerDbgDeclare(llvm::Function&amp;) (1 samples, 0.05%)</title><rect x="1156.2" y="517" width="0.7" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="1159.23" y="527.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (2 samples, 0.11%)</title><rect x="522.3" y="421" width="1.2" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="525.27" y="431.5" ></text>
</g>
<g >
<title>`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="260.4" y="501" width="0.6" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="263.40" y="511.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasPHI(llvm::PHINode const*, unsigned lo (1 samples, 0.05%)</title><rect x="649.7" y="293" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="652.70" y="303.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::BasicBlock const*, std::__1::unique_ptr&lt;ll (1 samples, 0.05%)</title><rect x="158.5" y="581" width="0.6" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="161.46" y="591.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getValueOnEdge(llvm:: (3 samples, 0.16%)</title><rect x="17.0" y="597" width="1.9" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="20.01" y="607.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="152.7" y="549" width="0.7" height="15.0" fill="rgb(62,211,62)" rx="2" ry="2" />
<text  x="155.72" y="559.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::alias(llvm::MemoryLocation const&amp;, llvm::M (2 samples, 0.11%)</title><rect x="333.7" y="485" width="1.2" height="15.0" fill="rgb(88,234,88)" rx="2" ry="2" />
<text  x="336.67" y="495.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="752.3" y="453" width="0.6" height="15.0" fill="rgb(104,249,104)" rx="2" ry="2" />
<text  x="755.28" y="463.5" ></text>
</g>
<g >
<title>`llvm::ReplaceableMetadataImpl::getOrCreate(llvm::Metadata&amp;) (1 samples, 0.05%)</title><rect x="772.7" y="485" width="0.6" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="775.67" y="495.5" ></text>
</g>
<g >
<title>`core::SingleDispatchMethodFunction_O::entry_point(core::T_O*, u (562 samples, 30.35%)</title><rect x="10.0" y="725" width="358.1" height="15.0" fill="rgb(77,225,77)" rx="2" ry="2" />
<text  x="13.00" y="735.5" >`core::SingleDispatchMethodFunction_O::entry_poi..</text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (1 samples, 0.05%)</title><rect x="252.1" y="597" width="0.7" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="255.12" y="607.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::StripPtrCastKeepAS(llvm::Constant*, llvm (1 samples, 0.05%)</title><rect x="73.7" y="565" width="0.7" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="76.71" y="575.5" ></text>
</g>
<g >
<title>`default_zone_malloc (1 samples, 0.05%)</title><rect x="196.7" y="357" width="0.6" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="199.68" y="367.5" ></text>
</g>
<g >
<title>`llvm::GetUnderlyingObject(llvm::Value*, llvm::DataLayout const&amp; (1 samples, 0.05%)</title><rect x="18.3" y="533" width="0.6" height="15.0" fill="rgb(65,213,65)" rx="2" ry="2" />
<text  x="21.28" y="543.5" ></text>
</g>
<g >
<title>`llvm::ReplaceableMetadataImpl::getIfExists(llvm::Metadata&amp;) (1 samples, 0.05%)</title><rect x="1146.7" y="485" width="0.6" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="1149.67" y="495.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::StructType*, llvm: (1 samples, 0.05%)</title><rect x="85.2" y="533" width="0.6" height="15.0" fill="rgb(53,202,53)" rx="2" ry="2" />
<text  x="88.18" y="543.5" ></text>
</g>
<g >
<title>`llvm::AliasSetTracker::mergeAliasSetsForPointer(llvm::Value con (2 samples, 0.11%)</title><rect x="333.7" y="533" width="1.2" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="336.67" y="543.5" ></text>
</g>
<g >
<title>`std::__1::vector&lt;llvm::Constant*, std::__1::allocator&lt;llvm::Con (1 samples, 0.05%)</title><rect x="55.2" y="533" width="0.7" height="15.0" fill="rgb(63,212,63)" rx="2" ry="2" />
<text  x="58.24" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LegacyLICMPass::runOnLoop(llvm::Loop*, l (5 samples, 0.27%)</title><rect x="333.7" y="629" width="3.2" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="336.67" y="639.5" ></text>
</g>
<g >
<title>`llvm::BasicAAWrapperPass::runOnFunction(llvm::Function&amp;) (2 samples, 0.11%)</title><rect x="44.4" y="645" width="1.3" height="15.0" fill="rgb(100,245,100)" rx="2" ry="2" />
<text  x="47.41" y="655.5" ></text>
</g>
<g >
<title>`default_zone_free_definite_size (1 samples, 0.05%)</title><rect x="1138.4" y="437" width="0.6" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="1141.39" y="447.5" ></text>
</g>
<g >
<title>`llvm::isNoAliasCall(llvm::Value const*) (1 samples, 0.05%)</title><rect x="620.4" y="229" width="0.6" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="623.39" y="239.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedUseBits(llvm::Value*, llvm: (2 samples, 0.11%)</title><rect x="284.0" y="565" width="1.2" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="286.97" y="575.5" ></text>
</g>
<g >
<title>`llvm::FindFunctionBackedges(llvm::Function const&amp;, llvm::SmallV (3 samples, 0.16%)</title><rect x="711.5" y="517" width="1.9" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="714.50" y="527.5" ></text>
</g>
<g >
<title>`llvm::FindAvailableLoadedValue(llvm::LoadInst*, llvm::BasicBloc (4 samples, 0.22%)</title><rect x="107.5" y="581" width="2.5" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="110.48" y="591.5" ></text>
</g>
<g >
<title>`SimplifyWithOpReplaced(llvm::Value*, llvm::Value*, llvm::Value* (1 samples, 0.05%)</title><rect x="1112.3" y="389" width="0.6" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text  x="1115.27" y="399.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="29.1" y="517" width="0.7" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="32.11" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="27.8" y="549" width="0.7" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="30.84" y="559.5" ></text>
</g>
<g >
<title>`tiny_size (1 samples, 0.05%)</title><rect x="501.2" y="309" width="0.7" height="15.0" fill="rgb(203,203,60)" rx="2" ry="2" />
<text  x="504.24" y="319.5" ></text>
</g>
<g >
<title>`llvm::detail::DenseMapPair&lt;llvm::BasicBlock const*, unsigned in (1 samples, 0.05%)</title><rect x="257.2" y="549" width="0.7" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="260.21" y="559.5" ></text>
</g>
<g >
<title>`llvm::generic_gep_type_iterator&lt;llvm::Use const*&gt;::operator+ (1 samples, 0.05%)</title><rect x="474.5" y="437" width="0.6" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text  x="477.48" y="447.5" ></text>
</g>
<g >
<title>`void std::__1::__sift_down&lt;llvm::less_second&amp;, std::__1::pair&lt;l (1 samples, 0.05%)</title><rect x="153.4" y="565" width="0.6" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text  x="156.36" y="575.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value const*&gt;::insert(llvm::Value c (1 samples, 0.05%)</title><rect x="1100.8" y="485" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="1103.80" y="495.5" ></text>
</g>
<g >
<title>`llvm::GlobalsAAResult::alias(llvm::MemoryLocation const&amp;, llvm: (1 samples, 0.05%)</title><rect x="134.2" y="373" width="0.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="137.24" y="383.5" ></text>
</g>
<g >
<title>`llvm::ConstantRange::ConstantRange(unsigned int, bool) (1 samples, 0.05%)</title><rect x="100.5" y="549" width="0.6" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="103.48" y="559.5" ></text>
</g>
<g >
<title>`std::__1::vector&lt;llvm::Constant*, std::__1::allocator&lt;llvm::Con (1 samples, 0.05%)</title><rect x="685.4" y="357" width="0.6" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="688.38" y="367.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorImpl&lt;llvm::WeakTrackingVH&gt;::~SmallVectorImpl() (88 samples, 4.75%)</title><rect x="809.0" y="469" width="56.1" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="811.98" y="479.5" >`llvm..</text>
</g>
<g >
<title>`malloc_zone_realloc (1 samples, 0.05%)</title><rect x="259.8" y="533" width="0.6" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="262.76" y="543.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant  (1 samples, 0.05%)</title><rect x="1105.9" y="357" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="1108.90" y="367.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="405.7" y="389" width="0.6" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="408.67" y="399.5" ></text>
</g>
<g >
<title>`llvm::LoopBase&lt;llvm::BasicBlock, llvm::Loop&gt;::getExitingBlock() (1 samples, 0.05%)</title><rect x="1160.1" y="437" width="0.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="1163.05" y="447.5" ></text>
</g>
<g >
<title>`llvm::MemorySSA::createNewAccess(llvm::Instruction*) (2 samples, 0.11%)</title><rect x="571.3" y="501" width="1.3" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="574.33" y="511.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="257.2" y="517" width="0.7" height="15.0" fill="rgb(188,188,54)" rx="2" ry="2" />
<text  x="260.21" y="527.5" ></text>
</g>
<g >
<title>`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="412.7" y="373" width="0.6" height="15.0" fill="rgb(190,190,55)" rx="2" ry="2" />
<text  x="415.68" y="383.5" ></text>
</g>
<g >
<title>`llvm::User::operator new(unsigned long, unsigned int) (1 samples, 0.05%)</title><rect x="716.6" y="437" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="719.60" y="447.5" ></text>
</g>
<g >
<title>`llvm::Use::getImpliedUser() const (1 samples, 0.05%)</title><rect x="340.7" y="597" width="0.6" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="343.68" y="607.5" ></text>
</g>
<g >
<title>`computeKnownBitsAddSub(bool, llvm::Value const*, llvm::Value co (1 samples, 0.05%)</title><rect x="537.6" y="309" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="540.56" y="319.5" ></text>
</g>
<g >
<title>`llvm::InstCombineWorklist::AddInitialGroup(llvm::ArrayRef&lt;llvm: (2 samples, 0.11%)</title><rect x="267.4" y="613" width="1.3" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="270.41" y="623.5" ></text>
</g>
<g >
<title>`malloc (1 samples, 0.05%)</title><rect x="436.3" y="485" width="0.6" height="15.0" fill="rgb(200,200,59)" rx="2" ry="2" />
<text  x="439.25" y="495.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::EarlyCSE::run() (11 samples, 0.59%)</title><rect x="23.4" y="629" width="7.0" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="26.38" y="639.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::SmallDenseMap&lt;std::__1::pair&lt;llvm::Mem (1 samples, 0.05%)</title><rect x="622.3" y="277" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="625.30" y="287.5" ></text>
</g>
<g >
<title>`bool llvm::PatternMatch::BinaryOp_match&lt;llvm::PatternMatch::bin (1 samples, 0.05%)</title><rect x="310.7" y="581" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="313.73" y="591.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::u (1 samples, 0.05%)</title><rect x="405.7" y="373" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="408.67" y="383.5" ></text>
</g>
<g >
<title>`llvm::FoldBranchToCommonDest(llvm::BranchInst*, unsigned int) (1 samples, 0.05%)</title><rect x="349.6" y="581" width="0.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="352.60" y="591.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (2 samples, 0.11%)</title><rect x="396.1" y="437" width="1.3" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="399.11" y="447.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm: (1 samples, 0.05%)</title><rect x="438.2" y="501" width="0.6" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="441.16" y="511.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (3 samples, 0.16%)</title><rect x="384.6" y="485" width="2.0" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="387.64" y="495.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="204.3" y="341" width="0.7" height="15.0" fill="rgb(96,243,96)" rx="2" ry="2" />
<text  x="207.33" y="351.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (1 samples, 0.05%)</title><rect x="1105.9" y="373" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="1108.90" y="383.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="1111.0" y="261" width="0.6" height="15.0" fill="rgb(182,182,52)" rx="2" ry="2" />
<text  x="1113.99" y="271.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;unsigned int, llvm::PHINode*, (1 samples, 0.05%)</title><rect x="227.9" y="549" width="0.6" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="230.90" y="559.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::run() (629 samples, 33.96%)</title><rect x="754.2" y="517" width="400.8" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="757.19" y="527.5" >`llvm::InstCombiner::run()</text>
</g>
<g >
<title>`llvm::TargetLibraryInfoImpl::getLibFunc(llvm::StringRef, llvm:: (1 samples, 0.05%)</title><rect x="491.0" y="469" width="0.7" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="494.05" y="479.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::LLVMContext&amp;, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="410.1" y="373" width="0.7" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="413.13" y="383.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::ValueHand (1 samples, 0.05%)</title><rect x="729.3" y="501" width="0.7" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="732.34" y="511.5" ></text>
</g>
<g >
<title>`llvm::APInt::clearUnusedBits() (1 samples, 0.05%)</title><rect x="519.1" y="405" width="0.6" height="15.0" fill="rgb(101,246,101)" rx="2" ry="2" />
<text  x="522.08" y="415.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="120.2" y="501" width="0.7" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="123.23" y="511.5" ></text>
</g>
<g >
<title>`llvm::TrackingMDRef::~TrackingMDRef() (1 samples, 0.05%)</title><rect x="1156.9" y="517" width="0.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="1159.87" y="527.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldLoadFromConstPtr(llvm::Constant*, llvm::Type* (1 samples, 0.05%)</title><rect x="301.2" y="485" width="0.6" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="304.18" y="495.5" ></text>
</g>
<g >
<title>`llvm::LazyValueInfo::getConstant(llvm::Value*, llvm::BasicBlock (3 samples, 0.16%)</title><rect x="373.8" y="517" width="1.9" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="376.81" y="527.5" ></text>
</g>
<g >
<title>`_platform_memset$VARIANT$Ivybridge (1 samples, 0.05%)</title><rect x="347.1" y="533" width="0.6" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="350.05" y="543.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLay (6 samples, 0.32%)</title><rect x="93.5" y="501" width="3.8" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="96.47" y="511.5" ></text>
</g>
<g >
<title>`llvm::computeKnownBits(llvm::Value const*, llvm::DataLayout con (3 samples, 0.16%)</title><rect x="691.7" y="453" width="2.0" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="694.75" y="463.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="247.7" y="517" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="250.66" y="527.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (1 samples, 0.05%)</title><rect x="679.0" y="421" width="0.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text  x="682.01" y="431.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImplBase::insert_imp(void const*) (1 samples, 0.05%)</title><rect x="638.9" y="405" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="641.87" y="415.5" ></text>
</g>
<g >
<title>`CCLASP-EVAL^CLASP-CLEAVIR^FN^^ (1,852 samples, 100.00%)</title><rect x="10.0" y="1557" width="1180.0" height="15.0" fill="rgb(92,203,203)" rx="2" ry="2" />
<text  x="13.00" y="1567.5" >`CCLASP-EVAL^CLASP-CLEAVIR^FN^^</text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1122.5" y="293" width="0.6" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="1125.46" y="303.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Va (6 samples, 0.32%)</title><rect x="417.1" y="421" width="3.9" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="420.14" y="431.5" ></text>
</g>
<g >
<title>`top.lsp-top130^522^TOP-COMPILE-FILE (1,852 samples, 100.00%)</title><rect x="10.0" y="1749" width="1180.0" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="13.00" y="1759.5" >`top.lsp-top130^522^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatt (2 samples, 0.11%)</title><rect x="408.9" y="357" width="1.2" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="411.86" y="367.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (2 samples, 0.11%)</title><rect x="385.3" y="469" width="1.3" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="388.28" y="479.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeAllocSize(llvm::Type*) const (1 samples, 0.05%)</title><rect x="110.7" y="437" width="0.6" height="15.0" fill="rgb(78,225,78)" rx="2" ry="2" />
<text  x="113.67" y="447.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (5 samples, 0.27%)</title><rect x="464.9" y="437" width="3.2" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="467.92" y="447.5" ></text>
</g>
<g >
<title>`isKnownNonZero(llvm::Value const*, unsigned int, (anonymous nam (1 samples, 0.05%)</title><rect x="392.9" y="453" width="0.7" height="15.0" fill="rgb(89,235,89)" rx="2" ry="2" />
<text  x="395.93" y="463.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="748.5" y="389" width="0.6" height="15.0" fill="rgb(67,215,67)" rx="2" ry="2" />
<text  x="751.46" y="399.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (9 samples, 0.49%)</title><rect x="463.0" y="469" width="5.7" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="466.01" y="479.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldTerminator(llvm::BasicBlock*, bool, llvm::Tar (1 samples, 0.05%)</title><rect x="236.8" y="581" width="0.7" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="239.83" y="591.5" ></text>
</g>
<g >
<title>`operator new(unsigned long) (1 samples, 0.05%)</title><rect x="572.6" y="437" width="0.6" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="575.60" y="447.5" ></text>
</g>
<g >
<title>`llvm::Use::getUser() const (20 samples, 1.08%)</title><rect x="1077.9" y="485" width="12.7" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="1080.86" y="495.5" ></text>
</g>
<g >
<title>`llvm::ConstantInt::get(llvm::Type*, llvm::APInt const&amp;) (1 samples, 0.05%)</title><rect x="96.0" y="453" width="0.7" height="15.0" fill="rgb(91,238,91)" rx="2" ry="2" />
<text  x="99.02" y="463.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="217.7" y="389" width="0.6" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="220.71" y="399.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="1122.5" y="341" width="0.6" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="1125.46" y="351.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::SimplifyDemandedInstructionBits(llvm::Instr (1 samples, 0.05%)</title><rect x="81.4" y="581" width="0.6" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="84.36" y="591.5" ></text>
</g>
<g >
<title>`llvm::ScalarEvolution::createSCEV(llvm::Value*) (1 samples, 0.05%)</title><rect x="131.1" y="501" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="134.06" y="511.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldLoadFromConstPtr(llvm::Constant*, llvm::Type* (2 samples, 0.11%)</title><rect x="733.2" y="485" width="1.2" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="736.16" y="495.5" ></text>
</g>
<g >
<title>`llvm::JumpThreadingPass::runImpl(llvm::Function&amp;, llvm::TargetL (36 samples, 1.94%)</title><rect x="401.8" y="533" width="23.0" height="15.0" fill="rgb(85,232,85)" rx="2" ry="2" />
<text  x="404.85" y="543.5" >`..</text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="640.1" y="341" width="0.7" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="643.14" y="351.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::Value*, llvm::ValueLatticeElement, llvm::D (1 samples, 0.05%)</title><rect x="382.1" y="357" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="385.10" y="367.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitCallSite(llvm::CallSite) (5 samples, 0.27%)</title><rect x="287.2" y="581" width="3.1" height="15.0" fill="rgb(51,201,51)" rx="2" ry="2" />
<text  x="290.16" y="591.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::APInt, std::__1::unique (1 samples, 0.05%)</title><rect x="96.0" y="421" width="0.7" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="99.02" y="431.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::visitGetElementPtrInst(llvm::GetElementPtrI (7 samples, 0.38%)</title><rect x="1098.3" y="501" width="4.4" height="15.0" fill="rgb(76,224,76)" rx="2" ry="2" />
<text  x="1101.25" y="511.5" ></text>
</g>
<g >
<title>`llvm::SSAUpdaterImpl&lt;llvm::SSAUpdater&gt;::GetValue(llvm::BasicBlo (1 samples, 0.05%)</title><rect x="601.3" y="389" width="0.6" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="604.27" y="399.5" ></text>
</g>
<g >
<title>`llvm::ConstantFoldLoadFromConstPtr(llvm::Constant*, llvm::Type* (2 samples, 0.11%)</title><rect x="275.1" y="581" width="1.2" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="278.05" y="591.5" ></text>
</g>
<g >
<title>`llvm::MemoryPhi::addIncoming(llvm::MemoryAccess*, llvm::BasicBl (1 samples, 0.05%)</title><rect x="573.9" y="469" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="576.88" y="479.5" ></text>
</g>
<g >
<title>`compile-file.lsp-compile-file52^181^TOP-COMPILE-FILE (1,830 samples, 98.81%)</title><rect x="10.0" y="869" width="1166.0" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="13.00" y="879.5" >`compile-file.lsp-compile-file52^181^TOP-COMPILE-FILE</text>
</g>
<g >
<title>`llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQue (1 samples, 0.05%)</title><rect x="204.3" y="309" width="0.7" height="15.0" fill="rgb(53,202,53)" rx="2" ry="2" />
<text  x="207.33" y="319.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::SCEV const*, llvm::SmallVector&lt;llvm::Point (1 samples, 0.05%)</title><rect x="346.4" y="613" width="0.7" height="15.0" fill="rgb(66,215,66)" rx="2" ry="2" />
<text  x="349.41" y="623.5" ></text>
</g>
<g >
<title>`llvm::LazyValueInfo::getPredicateOnEdge(unsigned int, llvm::Val (6 samples, 0.32%)</title><rect x="18.9" y="597" width="3.8" height="15.0" fill="rgb(96,243,96)" rx="2" ry="2" />
<text  x="21.92" y="607.5" ></text>
</g>
<g >
<title>`llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm:: (1 samples, 0.05%)</title><rect x="571.3" y="485" width="0.7" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="574.33" y="495.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::ConstantExpr*, llv (1 samples, 0.05%)</title><rect x="684.7" y="341" width="0.7" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="687.74" y="351.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::GlobalDCELegacyPass::runOnModule(llvm::M (1 samples, 0.05%)</title><rect x="241.3" y="677" width="0.6" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="244.29" y="687.5" ></text>
</g>
<g >
<title>`llvm::BranchProbabilityInfo::setEdgeProbability(llvm::BasicBloc (1 samples, 0.05%)</title><rect x="256.6" y="597" width="0.6" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="259.58" y="607.5" ></text>
</g>
<g >
<title>`llvm::SmallVectorImpl&lt;llvm::OperandBundleDefT&lt;llvm::Value*&gt; &gt;:: (1 samples, 0.05%)</title><rect x="1093.8" y="437" width="0.6" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="1096.79" y="447.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::assignExpNewValueNum(llvm::GVN::Expressi (1 samples, 0.05%)</title><rect x="212.6" y="533" width="0.7" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text  x="215.61" y="543.5" ></text>
</g>
<g >
<title>`llvm::GEPOperator::hasAllZeroIndices() const (1 samples, 0.05%)</title><rect x="733.2" y="421" width="0.6" height="15.0" fill="rgb(99,245,99)" rx="2" ry="2" />
<text  x="736.16" y="431.5" ></text>
</g>
<g >
<title>`llvm::Instruction::getMetadataImpl(unsigned int) const (1 samples, 0.05%)</title><rect x="385.3" y="437" width="0.6" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="388.28" y="447.5" ></text>
</g>
<g >
<title>`llvm::AttributeList::hasAttribute(unsigned int, llvm::Attribute (1 samples, 0.05%)</title><rect x="290.3" y="517" width="0.7" height="15.0" fill="rgb(86,233,86)" rx="2" ry="2" />
<text  x="293.35" y="527.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, std::__1:: (1 samples, 0.05%)</title><rect x="774.6" y="421" width="0.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="777.58" y="431.5" ></text>
</g>
<g >
<title>`llvm::formLCSSARecursively(llvm::Loop&amp;, llvm::DominatorTree&amp;, l (1 samples, 0.05%)</title><rect x="737.6" y="517" width="0.7" height="15.0" fill="rgb(76,223,76)" rx="2" ry="2" />
<text  x="740.62" y="527.5" ></text>
</g>
<g >
<title>`llvm::GVN::ValueTable::lookupOrAddCmp(unsigned int, llvm::CmpIn (1 samples, 0.05%)</title><rect x="672.6" y="453" width="0.7" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="675.63" y="463.5" ></text>
</g>
<g >
<title>`computePointerICmp(llvm::DataLayout const&amp;, llvm::TargetLibrary (2 samples, 0.11%)</title><rect x="27.2" y="581" width="1.3" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="30.20" y="591.5" ></text>
</g>
<g >
<title>`llvm::isNoAliasFn(llvm::Value const*, llvm::TargetLibraryInfo c (2 samples, 0.11%)</title><rect x="200.5" y="453" width="1.3" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="203.51" y="463.5" ></text>
</g>
<g >
<title>`llvm::AnalysisResolver::addAnalysisImplsPair(void const*, llvm: (1 samples, 0.05%)</title><rect x="432.4" y="549" width="0.7" height="15.0" fill="rgb(72,221,72)" rx="2" ry="2" />
<text  x="435.43" y="559.5" ></text>
</g>
<g >
<title>`llvm::DomTreeBuilder::SemiNCAInfo&lt;llvm::DominatorTreeBase&lt;llvm: (5 samples, 0.27%)</title><rect x="257.9" y="613" width="3.1" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text  x="260.85" y="623.5" ></text>
</g>
<g >
<title>`llvm::CallInst::isNoBuiltin() const (1 samples, 0.05%)</title><rect x="617.8" y="133" width="0.7" height="15.0" fill="rgb(87,233,87)" rx="2" ry="2" />
<text  x="620.84" y="143.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasGEP(llvm::GEPOperator const*, unsigne (1 samples, 0.05%)</title><rect x="629.3" y="325" width="0.6" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="632.31" y="335.5" ></text>
</g>
<g >
<title>`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const (1 samples, 0.05%)</title><rect x="615.9" y="213" width="0.7" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="618.93" y="223.5" ></text>
</g>
<g >
<title>`SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm (1 samples, 0.05%)</title><rect x="731.3" y="469" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="734.25" y="479.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (1 samples, 0.05%)</title><rect x="748.5" y="453" width="0.6" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="751.46" y="463.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::getModRefInfo(llvm::ImmutableCallSite, llv (1 samples, 0.05%)</title><rect x="570.1" y="373" width="0.6" height="15.0" fill="rgb(78,226,78)" rx="2" ry="2" />
<text  x="573.05" y="383.5" ></text>
</g>
<g >
<title>`void llvm::BitstreamWriter::EmitRecord&lt;llvm::SmallVector&lt;unsign (1 samples, 0.05%)</title><rect x="1183.6" y="693" width="0.7" height="15.0" fill="rgb(61,210,61)" rx="2" ry="2" />
<text  x="1186.63" y="703.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (2 samples, 0.11%)</title><rect x="110.7" y="485" width="1.2" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="113.67" y="495.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getPointerDependencyFrom(llvm::M (4 samples, 0.22%)</title><rect x="172.5" y="533" width="2.5" height="15.0" fill="rgb(105,251,105)" rx="2" ry="2" />
<text  x="175.47" y="543.5" ></text>
</g>
<g >
<title>`computeKnownBits(llvm::Value const*, llvm::KnownBits&amp;, unsigned (1 samples, 0.05%)</title><rect x="1122.5" y="325" width="0.6" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="1125.46" y="335.5" ></text>
</g>
<g >
<title>`llvm::APInt llvm::function_ref&lt;llvm::APInt (llvm::APInt const&amp;, (1 samples, 0.05%)</title><rect x="548.4" y="421" width="0.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="551.39" y="431.5" ></text>
</g>
<g >
<title>`llvm::IRBuilder&lt;llvm::ConstantFolder, llvm::IRBuilderDefaultIns (1 samples, 0.05%)</title><rect x="725.5" y="501" width="0.7" height="15.0" fill="rgb(53,203,53)" rx="2" ry="2" />
<text  x="728.52" y="511.5" ></text>
</g>
<g >
<title>`getValueFromCondition(llvm::Value*, llvm::Value*, bool) (5 samples, 0.27%)</title><rect x="417.8" y="405" width="3.2" height="15.0" fill="rgb(57,207,57)" rx="2" ry="2" />
<text  x="420.78" y="415.5" ></text>
</g>
<g >
<title>`llvm::Twine::toVector(llvm::SmallVectorImpl&lt;char&gt;&amp;) const (1 samples, 0.05%)</title><rect x="705.8" y="421" width="0.6" height="15.0" fill="rgb(90,236,90)" rx="2" ry="2" />
<text  x="708.77" y="431.5" ></text>
</g>
<g >
<title>`llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constan (2 samples, 0.11%)</title><rect x="271.9" y="533" width="1.2" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="274.87" y="543.5" ></text>
</g>
<g >
<title>`llvm::formLCSSARecursively(llvm::Loop&amp;, llvm::DominatorTree&amp;, l (4 samples, 0.22%)</title><rect x="735.7" y="533" width="2.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="738.71" y="543.5" ></text>
</g>
<g >
<title>`free_tiny (1 samples, 0.05%)</title><rect x="1181.1" y="677" width="0.6" height="15.0" fill="rgb(225,225,68)" rx="2" ry="2" />
<text  x="1184.08" y="687.5" ></text>
</g>
<g >
<title>`llvm::isKnownNonZero(llvm::Value const*, llvm::DataLayout const (1 samples, 0.05%)</title><rect x="1113.5" y="453" width="0.7" height="15.0" fill="rgb(88,235,88)" rx="2" ry="2" />
<text  x="1116.54" y="463.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (1 samples, 0.05%)</title><rect x="612.7" y="325" width="0.7" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="615.74" y="335.5" ></text>
</g>
<g >
<title>`llvm::FindAvailablePtrLoadStore(llvm::Value*, llvm::Type*, bool (4 samples, 0.22%)</title><rect x="107.5" y="565" width="2.5" height="15.0" fill="rgb(79,226,79)" rx="2" ry="2" />
<text  x="110.48" y="575.5" ></text>
</g>
<g >
<title>`llvm::recognizeBSwapOrBitReverseIdiom(llvm::Instruction*, bool, (1 samples, 0.05%)</title><rect x="1138.4" y="469" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="1141.39" y="479.5" ></text>
</g>
<g >
<title>`std::__1::pair&lt;llvm::DenseMapIterator&lt;llvm::ScalarEvolution::SC (1 samples, 0.05%)</title><rect x="131.7" y="485" width="0.6" height="15.0" fill="rgb(96,242,96)" rx="2" ry="2" />
<text  x="134.70" y="495.5" ></text>
</g>
<g >
<title>`llvm::GlobalDCEPass::run(llvm::Module&amp;, llvm::AnalysisManager&lt;l (1 samples, 0.05%)</title><rect x="241.3" y="661" width="0.6" height="15.0" fill="rgb(50,200,50)" rx="2" ry="2" />
<text  x="244.29" y="671.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::LazyValueInfoCache::hasCachedValueInfo(l (2 samples, 0.11%)</title><rect x="13.8" y="533" width="1.3" height="15.0" fill="rgb(83,230,83)" rx="2" ry="2" />
<text  x="16.82" y="543.5" ></text>
</g>
<g >
<title>`llvm::isa_impl_wrap&lt;llvm::DbgInfoIntrinsic, llvm::ilist_iterato (1 samples, 0.05%)</title><rect x="236.2" y="549" width="0.6" height="15.0" fill="rgb(80,227,80)" rx="2" ry="2" />
<text  x="239.19" y="559.5" ></text>
</g>
<g >
<title>`std::__1::__tree&lt;std::__1::__value_type&lt;llvm::Function const*,  (1 samples, 0.05%)</title><rect x="352.8" y="629" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="355.79" y="639.5" ></text>
</g>
<g >
<title>`bool llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::BasicBlock*, llvm: (1 samples, 0.05%)</title><rect x="737.0" y="341" width="0.6" height="15.0" fill="rgb(107,252,107)" rx="2" ry="2" />
<text  x="739.99" y="351.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::GVN::Expression, unsign (1 samples, 0.05%)</title><rect x="167.4" y="485" width="0.6" height="15.0" fill="rgb(58,208,58)" rx="2" ry="2" />
<text  x="170.38" y="495.5" ></text>
</g>
<g >
<title>`llvm::hash_code llvm::hashing::detail::hash_combine_recursive_h (1 samples, 0.05%)</title><rect x="750.4" y="357" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="753.37" y="367.5" ></text>
</g>
<g >
<title>`llvm::BasicBlock::getFirstNonPHI() const (1 samples, 0.05%)</title><rect x="226.6" y="597" width="0.7" height="15.0" fill="rgb(100,245,100)" rx="2" ry="2" />
<text  x="229.63" y="607.5" ></text>
</g>
<g >
<title>`realloc (1 samples, 0.05%)</title><rect x="1076.0" y="469" width="0.6" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="1078.95" y="479.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromOperator(llvm::Operator const*, llvm::Known (1 samples, 0.05%)</title><rect x="326.0" y="485" width="0.7" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="329.03" y="495.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasCheck(llvm::Value const*, unsigned lo (1 samples, 0.05%)</title><rect x="203.7" y="373" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="206.69" y="383.5" ></text>
</g>
<g >
<title>`llvm::DenseMap&lt;llvm::Instruction*, llvm::SmallPtrSet&lt;llvm::Poin (1 samples, 0.05%)</title><rect x="612.7" y="373" width="0.7" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="615.74" y="383.5" ></text>
</g>
<g >
<title>`(anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value (4 samples, 0.22%)</title><rect x="758.0" y="453" width="2.6" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text  x="761.01" y="463.5" ></text>
</g>
<g >
<title>`llvm::JumpThreadingPass::ProcessImpliedCondition(llvm::BasicBlo (1 samples, 0.05%)</title><rect x="33.6" y="597" width="0.6" height="15.0" fill="rgb(97,243,97)" rx="2" ry="2" />
<text  x="36.57" y="607.5" ></text>
</g>
<g >
<title>`core::core__catch_function(gctools::smart_ptr&lt;core::T_O&gt;, gctoo (1,852 samples, 100.00%)</title><rect x="10.0" y="1637" width="1180.0" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="13.00" y="1647.5" >`core::core__catch_function(gctools::smart_ptr&lt;core::T_O&gt;, gctoo</text>
</g>
<g >
<title>`llvm::InstCombiner::foldSelectIntoOp(llvm::SelectInst&amp;, llvm::V (1 samples, 0.05%)</title><rect x="324.8" y="581" width="0.6" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="327.75" y="591.5" ></text>
</g>
<g >
<title>`std::__1::vector&lt;llvm::Constant*, std::__1::allocator&lt;llvm::Con (1 samples, 0.05%)</title><rect x="224.1" y="469" width="0.6" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="227.08" y="479.5" ></text>
</g>
<g >
<title>`computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&amp; (1 samples, 0.05%)</title><rect x="99.2" y="533" width="0.6" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text  x="102.20" y="543.5" ></text>
</g>
<g >
<title>`llvm::DenseMapBase&lt;llvm::DenseMap&lt;llvm::GVN::Expression, unsign (6 samples, 0.32%)</title><rect x="164.2" y="533" width="3.8" height="15.0" fill="rgb(100,246,100)" rx="2" ry="2" />
<text  x="167.19" y="543.5" ></text>
</g>
<g >
<title>`llvm::SmallPtrSetImpl&lt;llvm::Value const*&gt;::insert(llvm::Value c (2 samples, 0.11%)</title><rect x="531.8" y="453" width="1.3" height="15.0" fill="rgb(65,214,65)" rx="2" ry="2" />
<text  x="534.83" y="463.5" ></text>
</g>
<g >
<title>`small_malloc_should_clear (1 samples, 0.05%)</title><rect x="177.6" y="405" width="0.6" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="180.57" y="415.5" ></text>
</g>
<g >
<title>`intersect(llvm::ValueLatticeElement const&amp;, llvm::ValueLatticeE (1 samples, 0.05%)</title><rect x="21.5" y="517" width="0.6" height="15.0" fill="rgb(74,222,74)" rx="2" ry="2" />
<text  x="24.47" y="527.5" ></text>
</g>
<g >
<title>`llvm::InstCombiner::foldSelectInstWithICmp(llvm::SelectInst&amp;, l (3 samples, 0.16%)</title><rect x="540.7" y="485" width="2.0" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="543.75" y="495.5" ></text>
</g>
<g >
<title>`llvm::BasicAAResult::aliasSelect(llvm::SelectInst const*, unsig (1 samples, 0.05%)</title><rect x="619.1" y="245" width="0.7" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text  x="622.11" y="255.5" ></text>
</g>
<g >
<title>`llvm::Value::setNameImpl(llvm::Twine const&amp;) (1 samples, 0.05%)</title><rect x="703.2" y="437" width="0.7" height="15.0" fill="rgb(91,237,91)" rx="2" ry="2" />
<text  x="706.22" y="447.5" ></text>
</g>
<g >
<title>`malloc_zone_malloc (2 samples, 0.11%)</title><rect x="1074.7" y="453" width="1.3" height="15.0" fill="rgb(217,217,65)" rx="2" ry="2" />
<text  x="1077.68" y="463.5" ></text>
</g>
<g >
<title>`llvm::wouldInstructionBeTriviallyDead(llvm::Instruction*, llvm: (1 samples, 0.05%)</title><rect x="129.1" y="613" width="0.7" height="15.0" fill="rgb(95,241,95)" rx="2" ry="2" />
<text  x="132.15" y="623.5" ></text>
</g>
<g >
<title>`llvm::BitstreamWriter::Emit(unsigned int, unsigned int) (1 samples, 0.05%)</title><rect x="1183.6" y="661" width="0.7" height="15.0" fill="rgb(68,217,68)" rx="2" ry="2" />
<text  x="1186.63" y="671.5" ></text>
</g>
<g >
<title>`llvm::MemoryDependenceResults::getSimplePointerDependencyFrom(l (28 samples, 1.51%)</title><rect x="183.9" y="485" width="17.9" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="186.94" y="495.5" ></text>
</g>
</g>
</svg>
