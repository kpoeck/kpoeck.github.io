<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="726.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="709" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="709" > </text>
<g id="frames">
<g >
<title>`GC_mark_local (1,175 samples, 9.12%)</title><rect x="115.1" y="85" width="107.6" height="15.0" fill="rgb(249,121,121)" rx="2" ry="2" />
<text  x="118.09" y="95.5" >`GC_mark_local</text>
</g>
<g >
<title>`GC_clear_marks (127 samples, 0.99%)</title><rect x="86.3" y="133" width="11.7" height="15.0" fill="rgb(209,64,64)" rx="2" ry="2" />
<text  x="89.35" y="143.5" ></text>
</g>
<g >
<title>`fread (7 samples, 0.05%)</title><rect x="387.1" y="213" width="0.6" height="15.0" fill="rgb(223,223,67)" rx="2" ry="2" />
<text  x="390.07" y="223.5" ></text>
</g>
<g >
<title>`_platform_bzero$VARIANT$Ivybridge (2 samples, 0.02%)</title><rect x="96.6" y="101" width="0.2" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="99.60" y="111.5" ></text>
</g>
<g >
<title>`GC_add_map_entry (9 samples, 0.07%)</title><rect x="81.6" y="117" width="0.8" height="15.0" fill="rgb(209,64,64)" rx="2" ry="2" />
<text  x="84.59" y="127.5" ></text>
</g>
<g >
<title>`GC_wait_marker (3 samples, 0.02%)</title><rect x="1189.4" y="565" width="0.2" height="15.0" fill="rgb(248,120,120)" rx="2" ry="2" />
<text  x="1192.36" y="575.5" ></text>
</g>
<g >
<title>`READ-LINE^COMMON-LISP^FN^^ (10 samples, 0.08%)</title><rect x="10.4" y="261" width="0.9" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="13.37" y="271.5" ></text>
</g>
<g >
<title>`GC_allochblk (279 samples, 2.16%)</title><rect x="58.8" y="165" width="25.5" height="15.0" fill="rgb(200,50,50)" rx="2" ry="2" />
<text  x="61.79" y="175.5" >`..</text>
</g>
<g >
<title>`core::core__catch_function(gctools::smart_ptr&lt;core::T_O&gt;, gctoo (4,409 samples, 34.20%)</title><rect x="10.0" y="405" width="403.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >`core::core__catch_function(gctools::smart_ptr&lt;core::T_..</text>
</g>
<g >
<title>`GC_push_marked (15 samples, 0.12%)</title><rect x="236.6" y="85" width="1.3" height="15.0" fill="rgb(242,111,111)" rx="2" ry="2" />
<text  x="239.57" y="95.5" ></text>
</g>
<g >
<title>`core::core__catch_function(gctools::smart_ptr&lt;core::T_O&gt;, gctoo (4,409 samples, 34.20%)</title><rect x="10.0" y="453" width="403.6" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >`core::core__catch_function(gctools::smart_ptr&lt;core::T_..</text>
</g>
<g >
<title>`GC_finish_collection (180 samples, 1.40%)</title><rect x="98.0" y="133" width="16.5" height="15.0" fill="rgb(247,118,118)" rx="2" ry="2" />
<text  x="100.97" y="143.5" ></text>
</g>
<g >
<title>`DYLD-STUB$$__dynamic_cast (5 samples, 0.04%)</title><rect x="312.1" y="213" width="0.5" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="315.09" y="223.5" ></text>
</g>
<g >
<title>`GC_install_header (44 samples, 0.34%)</title><rect x="74.9" y="117" width="4.0" height="15.0" fill="rgb(239,108,108)" rx="2" ry="2" />
<text  x="77.90" y="127.5" ></text>
</g>
<g >
<title>`cc_invoke_byte_code_interpreter (4,409 samples, 34.20%)</title><rect x="10.0" y="517" width="403.6" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >`cc_invoke_byte_code_interpreter</text>
</g>
<g >
<title>`core::MDArray_O::MDArray_O(core::Rank1, unsigned long, gctools: (4 samples, 0.03%)</title><rect x="270.4" y="213" width="0.3" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="273.35" y="223.5" ></text>
</g>
<g >
<title>`GC_allochblk_nth (239 samples, 1.85%)</title><rect x="62.1" y="149" width="21.9" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="65.09" y="159.5" >`..</text>
</g>
<g >
<title>`GC_clear_stack_inner (19 samples, 0.15%)</title><rect x="53.6" y="149" width="1.7" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="56.57" y="159.5" ></text>
</g>
<g >
<title>`rand (9 samples, 0.07%)</title><rect x="271.7" y="229" width="0.8" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="274.72" y="239.5" ></text>
</g>
<g >
<title>`GC_do_local_mark (4 samples, 0.03%)</title><rect x="413.7" y="581" width="0.4" height="15.0" fill="rgb(201,51,51)" rx="2" ry="2" />
<text  x="416.71" y="591.5" ></text>
</g>
<g >
<title>`_pthread_mutex_firstfit_unlock_slow (141 samples, 1.09%)</title><rect x="349.5" y="165" width="12.9" height="15.0" fill="rgb(189,189,55)" rx="2" ry="2" />
<text  x="352.54" y="175.5" ></text>
</g>
<g >
<title>`_pthread_mutex_firstfit_lock_slow (2 samples, 0.02%)</title><rect x="333.7" y="181" width="0.2" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="336.70" y="191.5" ></text>
</g>
<g >
<title>`__dynamic_cast (228 samples, 1.77%)</title><rect x="283.1" y="213" width="20.8" height="15.0" fill="rgb(224,224,67)" rx="2" ry="2" />
<text  x="286.08" y="223.5" ></text>
</g>
<g >
<title>`GC_mark_from (2 samples, 0.02%)</title><rect x="1189.2" y="565" width="0.2" height="15.0" fill="rgb(202,53,53)" rx="2" ry="2" />
<text  x="1192.18" y="575.5" ></text>
</g>
<g >
<title>`_platform_bzero$VARIANT$Ivybridge (5 samples, 0.04%)</title><rect x="55.8" y="165" width="0.4" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="58.77" y="175.5" ></text>
</g>
<g >
<title>`GC_unmap_old (2 samples, 0.02%)</title><rect x="114.3" y="117" width="0.2" height="15.0" fill="rgb(230,94,94)" rx="2" ry="2" />
<text  x="117.27" y="127.5" ></text>
</g>
<g >
<title>`GC_notify_all_marker (2 samples, 0.02%)</title><rect x="1180.8" y="549" width="0.1" height="15.0" fill="rgb(217,75,75)" rx="2" ry="2" />
<text  x="1183.75" y="559.5" ></text>
</g>
<g >
<title>`GC_clear_stack_inner (3 samples, 0.02%)</title><rect x="53.6" y="69" width="0.2" height="15.0" fill="rgb(236,102,102)" rx="2" ry="2" />
<text  x="56.57" y="79.5" ></text>
</g>
<g >
<title>`RUN-ALL/Users/karstenpoeck/lisp/compiler/clasp2/src/lisp/kernel (4,409 samples, 34.20%)</title><rect x="10.0" y="533" width="403.6" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >`RUN-ALL/Users/karstenpoeck/lisp/compiler/clasp2/src/li..</text>
</g>
<g >
<title>`SIMPLE-EVAL^CLASP-CLEAVIR^FN^^ (4,409 samples, 34.20%)</title><rect x="10.0" y="357" width="403.6" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >`SIMPLE-EVAL^CLASP-CLEAVIR^FN^^</text>
</g>
<g >
<title>`GC_is_marked (8 samples, 0.06%)</title><rect x="98.3" y="101" width="0.8" height="15.0" fill="rgb(201,52,52)" rx="2" ry="2" />
<text  x="101.34" y="111.5" ></text>
</g>
<g >
<title>`core::stream_dispatch_table(gctools::smart_ptr&lt;core::T_O&gt;) (241 samples, 1.87%)</title><rect x="365.0" y="213" width="22.1" height="15.0" fill="rgb(92,238,92)" rx="2" ry="2" />
<text  x="368.01" y="223.5" >`..</text>
</g>
<g >
<title>`GC_malloc_kind_global (2,022 samples, 15.69%)</title><rect x="56.9" y="213" width="185.1" height="15.0" fill="rgb(247,119,119)" rx="2" ry="2" />
<text  x="59.87" y="223.5" >`GC_malloc_kind_global</text>
</g>
<g >
<title>`DYLD-STUB$$__bzero (3 samples, 0.02%)</title><rect x="81.3" y="117" width="0.3" height="15.0" fill="rgb(205,205,60)" rx="2" ry="2" />
<text  x="84.31" y="127.5" ></text>
</g>
<g >
<title>`TEST^COMMON-LISP-USER^FN^^ (4,409 samples, 34.20%)</title><rect x="10.0" y="309" width="403.6" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >`TEST^COMMON-LISP-USER^FN^^</text>
</g>
<g >
<title>`funlockfile (170 samples, 1.32%)</title><rect x="348.2" y="181" width="15.5" height="15.0" fill="rgb(192,192,56)" rx="2" ry="2" />
<text  x="351.16" y="191.5" ></text>
</g>
<g >
<title>`TPL^CORE^FN^^ (4,409 samples, 34.20%)</title><rect x="10.0" y="421" width="403.6" height="15.0" fill="rgb(69,182,182)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >`TPL^CORE^FN^^</text>
</g>
<g >
<title>`__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1:: (15 samples, 0.12%)</title><rect x="366.8" y="197" width="1.4" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="369.84" y="207.5" ></text>
</g>
<g >
<title>`DYLD-STUB$$__error (10 samples, 0.08%)</title><rect x="319.4" y="181" width="0.9" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="322.42" y="191.5" ></text>
</g>
<g >
<title>`tlv_get_addr (6 samples, 0.05%)</title><rect x="264.0" y="213" width="0.6" height="15.0" fill="rgb(204,204,60)" rx="2" ry="2" />
<text  x="267.03" y="223.5" ></text>
</g>
<g >
<title>`_fwalk (2 samples, 0.02%)</title><rect x="329.9" y="149" width="0.2" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="332.95" y="159.5" ></text>
</g>
<g >
<title>`GC_allochblk (2 samples, 0.02%)</title><rect x="238.6" y="181" width="0.2" height="15.0" fill="rgb(206,58,58)" rx="2" ry="2" />
<text  x="241.58" y="191.5" ></text>
</g>
<g >
<title>`GC_find_header (19 samples, 0.15%)</title><rect x="234.6" y="85" width="1.8" height="15.0" fill="rgb(222,82,82)" rx="2" ry="2" />
<text  x="237.65" y="95.5" ></text>
</g>
<g >
<title>`GC_clear_hdr_marks (34 samples, 0.26%)</title><rect x="93.4" y="101" width="3.1" height="15.0" fill="rgb(224,84,84)" rx="2" ry="2" />
<text  x="96.40" y="111.5" ></text>
</g>
<g >
<title>`core::byte_code_interpreter(gctools::GCRootsInModule*, gctools: (4,409 samples, 34.20%)</title><rect x="10.0" y="501" width="403.6" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >`core::byte_code_interpreter(gctools::GCRootsInModule*,..</text>
</g>
<g >
<title>`GC_apply_to_all_blocks (164 samples, 1.27%)</title><rect x="99.2" y="101" width="15.0" height="15.0" fill="rgb(212,67,67)" rx="2" ry="2" />
<text  x="102.16" y="111.5" ></text>
</g>
<g >
<title>`tlv_get_addr (3 samples, 0.02%)</title><rect x="271.4" y="213" width="0.3" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="274.45" y="223.5" ></text>
</g>
<g >
<title>`GC_do_local_mark (8,412 samples, 65.26%)</title><rect x="419.1" y="565" width="770.1" height="15.0" fill="rgb(231,95,95)" rx="2" ry="2" />
<text  x="422.11" y="575.5" >`GC_do_local_mark</text>
</g>
<g >
<title>`core::input_stream_read_byte8(gctools::smart_ptr&lt;core::T_O&gt;, un (565 samples, 4.38%)</title><rect x="313.3" y="213" width="51.7" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="316.28" y="223.5" >`core..</text>
</g>
<g >
<title>`core::Str8Ns_O::vectorPushExtend_claspChar(unsigned char, unsig (4 samples, 0.03%)</title><rect x="11.3" y="261" width="0.3" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="14.28" y="271.5" ></text>
</g>
<g >
<title>`_platform_memmove$VARIANT$Ivybridge (3 samples, 0.02%)</title><rect x="330.4" y="165" width="0.3" height="15.0" fill="rgb(185,185,53)" rx="2" ry="2" />
<text  x="333.40" y="175.5" ></text>
</g>
<g >
<title>`core::stream_dispatch_table(gctools::smart_ptr&lt;core::T_O&gt;) (236 samples, 1.83%)</title><rect x="388.5" y="245" width="21.6" height="15.0" fill="rgb(102,248,102)" rx="2" ry="2" />
<text  x="391.53" y="255.5" >`..</text>
</g>
<g >
<title>`core::coerce::inputStreamDesignator(gctools::smart_ptr&lt;core::T_ (6 samples, 0.05%)</title><rect x="410.6" y="261" width="0.5" height="15.0" fill="rgb(81,228,81)" rx="2" ry="2" />
<text  x="413.60" y="271.5" ></text>
</g>
<g >
<title>`flockfile (144 samples, 1.12%)</title><rect x="335.0" y="181" width="13.2" height="15.0" fill="rgb(200,200,59)" rx="2" ry="2" />
<text  x="337.98" y="191.5" ></text>
</g>
<g >
<title>`CCLASP-EVAL^CLASP-CLEAVIR^FN^^ (4,409 samples, 34.20%)</title><rect x="10.0" y="373" width="403.6" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >`CCLASP-EVAL^CLASP-CLEAVIR^FN^^</text>
</g>
<g >
<title>all (12,890 samples, 100%)</title><rect x="10.0" y="677" width="1180.0" height="15.0" fill="rgb(182,182,52)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>`thread-local wrapper routine for my_thread_low_level (2 samples, 0.02%)</title><rect x="272.9" y="229" width="0.2" height="15.0" fill="rgb(182,182,52)" rx="2" ry="2" />
<text  x="275.91" y="239.5" ></text>
</g>
<g >
<title>`_pthread_mutex_lock_init_slow (16 samples, 0.12%)</title><rect x="346.7" y="165" width="1.5" height="15.0" fill="rgb(214,214,64)" rx="2" ry="2" />
<text  x="349.70" y="175.5" ></text>
</g>
<g >
<title>`GC_approx_sp (2 samples, 0.02%)</title><rect x="53.3" y="213" width="0.2" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="56.30" y="223.5" ></text>
</g>
<g >
<title>`_platform_bzero$VARIANT$Ivybridge (13 samples, 0.10%)</title><rect x="82.5" y="101" width="1.2" height="15.0" fill="rgb(200,200,59)" rx="2" ry="2" />
<text  x="85.50" y="111.5" ></text>
</g>
<g >
<title>`__srefill0 (2 samples, 0.02%)</title><rect x="329.9" y="165" width="0.2" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="332.95" y="175.5" ></text>
</g>
<g >
<title>`_platform_bzero$VARIANT$Ivybridge (3 samples, 0.02%)</title><rect x="55.0" y="133" width="0.3" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="58.04" y="143.5" ></text>
</g>
<g >
<title>`GC_malloc_kind (35 samples, 0.27%)</title><rect x="266.6" y="213" width="3.2" height="15.0" fill="rgb(225,87,87)" rx="2" ry="2" />
<text  x="269.60" y="223.5" ></text>
</g>
<g >
<title>`core::Str8Ns_O::vectorPushExtend_claspChar(unsigned char, unsig (43 samples, 0.33%)</title><rect x="273.1" y="245" width="3.9" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="276.10" y="255.5" ></text>
</g>
<g >
<title>`core::eformat_read_char(gctools::smart_ptr&lt;core::T_O&gt;) (6 samples, 0.05%)</title><rect x="411.1" y="261" width="0.6" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="414.15" y="271.5" ></text>
</g>
<g >
<title>`GC_clear_stack_inner (4 samples, 0.03%)</title><rect x="53.6" y="85" width="0.3" height="15.0" fill="rgb(230,93,93)" rx="2" ry="2" />
<text  x="56.57" y="95.5" ></text>
</g>
<g >
<title>`_platform_bzero$VARIANT$Ivybridge (2 samples, 0.02%)</title><rect x="54.9" y="117" width="0.1" height="15.0" fill="rgb(213,213,63)" rx="2" ry="2" />
<text  x="57.86" y="127.5" ></text>
</g>
<g >
<title>`_platform_bzero$VARIANT$Ivybridge (7 samples, 0.05%)</title><rect x="16.7" y="229" width="0.6" height="15.0" fill="rgb(184,184,53)" rx="2" ry="2" />
<text  x="19.68" y="239.5" ></text>
</g>
<g >
<title>`GC_do_local_mark (2 samples, 0.02%)</title><rect x="114.9" y="85" width="0.2" height="15.0" fill="rgb(238,105,105)" rx="2" ry="2" />
<text  x="117.91" y="95.5" ></text>
</g>
<g >
<title>`_platform_bzero$VARIANT$Ivybridge (4 samples, 0.03%)</title><rect x="55.4" y="149" width="0.4" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="58.41" y="159.5" ></text>
</g>
<g >
<title>`_platform_memmove$VARIANT$Nehalem (21 samples, 0.16%)</title><rect x="330.7" y="165" width="1.9" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="333.68" y="175.5" ></text>
</g>
<g >
<title>`GC_clear_stack_inner (24 samples, 0.19%)</title><rect x="53.6" y="165" width="2.2" height="15.0" fill="rgb(210,64,64)" rx="2" ry="2" />
<text  x="56.57" y="175.5" ></text>
</g>
<g >
<title>`GC_clear_hdr_marks (14 samples, 0.11%)</title><rect x="82.4" y="117" width="1.3" height="15.0" fill="rgb(226,87,87)" rx="2" ry="2" />
<text  x="85.41" y="127.5" ></text>
</g>
<g >
<title>`DYLD-STUB$$sigvec__ (5 samples, 0.04%)</title><rect x="321.2" y="181" width="0.4" height="15.0" fill="rgb(177,177,50)" rx="2" ry="2" />
<text  x="324.16" y="191.5" ></text>
</g>
<g >
<title>`core::parse_ltvc_toplevel_funcall(gctools::GCRootsInModule*, gc (4,409 samples, 34.20%)</title><rect x="10.0" y="485" width="403.6" height="15.0" fill="rgb(94,240,94)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >`core::parse_ltvc_toplevel_funcall(gctools::GCRootsInMo..</text>
</g>
<g >
<title>`GC_reclaim_generic (13 samples, 0.10%)</title><rect x="268.2" y="181" width="1.2" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text  x="271.25" y="191.5" ></text>
</g>
<g >
<title>`__fread (86 samples, 0.67%)</title><rect x="324.7" y="181" width="7.9" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="327.73" y="191.5" ></text>
</g>
<g >
<title>`__dynamic_cast (4 samples, 0.03%)</title><rect x="14.9" y="245" width="0.3" height="15.0" fill="rgb(213,213,64)" rx="2" ry="2" />
<text  x="17.85" y="255.5" ></text>
</g>
<g >
<title>`DYLD-STUB$$pthread_mutex_unlock (2 samples, 0.02%)</title><rect x="321.0" y="181" width="0.2" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="323.97" y="191.5" ></text>
</g>
<g >
<title>`GC_header_cache_miss (53 samples, 0.41%)</title><rect x="115.6" y="53" width="4.9" height="15.0" fill="rgb(210,64,64)" rx="2" ry="2" />
<text  x="118.64" y="63.5" ></text>
</g>
<g >
<title>`_platform_bzero$VARIANT$Ivybridge (5 samples, 0.04%)</title><rect x="53.9" y="85" width="0.5" height="15.0" fill="rgb(214,214,64)" rx="2" ry="2" />
<text  x="56.94" y="95.5" ></text>
</g>
<g >
<title>`core::General_O::initialize() (4 samples, 0.03%)</title><rect x="15.2" y="245" width="0.4" height="15.0" fill="rgb(68,216,68)" rx="2" ry="2" />
<text  x="18.22" y="255.5" ></text>
</g>
<g >
<title>`funlockfile (7 samples, 0.05%)</title><rect x="364.4" y="197" width="0.6" height="15.0" fill="rgb(225,225,68)" rx="2" ry="2" />
<text  x="367.37" y="207.5" ></text>
</g>
<g >
<title>`_platform_memmove$VARIANT$Nehalem (4 samples, 0.03%)</title><rect x="333.3" y="181" width="0.4" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="336.33" y="191.5" ></text>
</g>
<g >
<title>`GC_start_reclaim (166 samples, 1.29%)</title><rect x="99.1" y="117" width="15.2" height="15.0" fill="rgb(249,121,121)" rx="2" ry="2" />
<text  x="102.07" y="127.5" ></text>
</g>
<g >
<title>`pthread_mutex_unlock (2 samples, 0.02%)</title><rect x="364.2" y="181" width="0.2" height="15.0" fill="rgb(183,183,52)" rx="2" ry="2" />
<text  x="367.18" y="191.5" ></text>
</g>
<g >
<title>`pthread_mutex_lock (5 samples, 0.04%)</title><rect x="363.7" y="181" width="0.5" height="15.0" fill="rgb(204,204,60)" rx="2" ry="2" />
<text  x="366.73" y="191.5" ></text>
</g>
<g >
<title>`clear_marks_for_block (9 samples, 0.07%)</title><rect x="96.8" y="101" width="0.8" height="15.0" fill="rgb(224,224,67)" rx="2" ry="2" />
<text  x="99.78" y="111.5" ></text>
</g>
<g >
<title>`GC_get_first_part (55 samples, 0.43%)</title><rect x="74.2" y="133" width="5.0" height="15.0" fill="rgb(250,123,123)" rx="2" ry="2" />
<text  x="77.17" y="143.5" ></text>
</g>
<g >
<title>`GC_push_contents_hdr (7 samples, 0.05%)</title><rect x="222.0" y="53" width="0.7" height="15.0" fill="rgb(218,77,77)" rx="2" ry="2" />
<text  x="225.02" y="63.5" ></text>
</g>
<g >
<title>`GC_generic_malloc_many (22 samples, 0.17%)</title><rect x="267.5" y="197" width="2.0" height="15.0" fill="rgb(245,116,116)" rx="2" ry="2" />
<text  x="270.51" y="207.5" ></text>
</g>
<g >
<title>`GC_mark_thread (8,481 samples, 65.80%)</title><rect x="413.6" y="613" width="776.4" height="15.0" fill="rgb(237,104,104)" rx="2" ry="2" />
<text  x="416.62" y="623.5" >`GC_mark_thread</text>
</g>
<g >
<title>`_pthread_mutex_unlock_init_slow (14 samples, 0.11%)</title><rect x="362.4" y="165" width="1.3" height="15.0" fill="rgb(213,213,64)" rx="2" ry="2" />
<text  x="365.44" y="175.5" ></text>
</g>
<g >
<title>`GC_add_to_fl (4 samples, 0.03%)</title><rect x="74.5" y="117" width="0.4" height="15.0" fill="rgb(222,82,82)" rx="2" ry="2" />
<text  x="77.54" y="127.5" ></text>
</g>
<g >
<title>`pthread_mutex_unlock (23 samples, 0.18%)</title><rect x="239.9" y="197" width="2.1" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="242.87" y="207.5" ></text>
</g>
<g >
<title>`gctools::smart_ptr&lt;core::SimpleBaseString_O&gt; gctools::GCObjectA (2,672 samples, 20.73%)</title><rect x="20.0" y="229" width="244.6" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text  x="22.98" y="239.5" >`gctools::smart_ptr&lt;core::Simple..</text>
</g>
<g >
<title>`GC_allochblk_nth (22 samples, 0.17%)</title><rect x="84.3" y="165" width="2.0" height="15.0" fill="rgb(250,123,123)" rx="2" ry="2" />
<text  x="87.33" y="175.5" ></text>
</g>
<g >
<title>`core::lisp_multipleValues() (9 samples, 0.07%)</title><rect x="387.7" y="245" width="0.8" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text  x="390.71" y="255.5" ></text>
</g>
<g >
<title>`GC_mark_local (8,473 samples, 65.73%)</title><rect x="414.1" y="581" width="775.6" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text  x="417.07" y="591.5" >`GC_mark_local</text>
</g>
<g >
<title>`rand (7 samples, 0.05%)</title><rect x="270.7" y="213" width="0.7" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="273.72" y="223.5" ></text>
</g>
<g >
<title>`core::Str8Ns_O::make(unsigned long, unsigned char, bool, gctool (2,813 samples, 21.82%)</title><rect x="15.6" y="245" width="257.5" height="15.0" fill="rgb(72,220,72)" rx="2" ry="2" />
<text  x="18.58" y="255.5" >`core::Str8Ns_O::make(unsigned lon..</text>
</g>
<g >
<title>`_platform_bzero$VARIANT$Ivybridge (12 samples, 0.09%)</title><rect x="95.4" y="85" width="1.1" height="15.0" fill="rgb(181,181,52)" rx="2" ry="2" />
<text  x="98.41" y="95.5" ></text>
</g>
<g >
<title>`main (4,409 samples, 34.20%)</title><rect x="10.0" y="629" width="403.6" height="15.0" fill="rgb(176,176,50)" rx="2" ry="2" />
<text  x="13.00" y="639.5" >`main</text>
</g>
<g >
<title>`core::utf_8_decoder(gctools::smart_ptr&lt;core::T_O&gt;) (3 samples, 0.02%)</title><rect x="410.1" y="245" width="0.3" height="15.0" fill="rgb(59,208,59)" rx="2" ry="2" />
<text  x="413.14" y="255.5" ></text>
</g>
<g >
<title>`GC_reclaim_block (71 samples, 0.55%)</title><rect x="107.7" y="85" width="6.5" height="15.0" fill="rgb(240,108,108)" rx="2" ry="2" />
<text  x="110.68" y="95.5" ></text>
</g>
<g >
<title>`gctools::startupGarbageCollectorAndSystem(int (*)(int, char**,  (4,409 samples, 34.20%)</title><rect x="10.0" y="613" width="403.6" height="15.0" fill="rgb(84,231,84)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >`gctools::startupGarbageCollectorAndSystem(int (*)(int,..</text>
</g>
<g >
<title>`DYLD-STUB$$_platform_memmove (3 samples, 0.02%)</title><rect x="320.3" y="181" width="0.3" height="15.0" fill="rgb(179,179,51)" rx="2" ry="2" />
<text  x="323.33" y="191.5" ></text>
</g>
<g >
<title>`pthread_mutex_lock (3 samples, 0.02%)</title><rect x="269.5" y="197" width="0.3" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="272.53" y="207.5" ></text>
</g>
<g >
<title>`GC_install_counts (8 samples, 0.06%)</title><rect x="79.2" y="133" width="0.7" height="15.0" fill="rgb(219,79,79)" rx="2" ry="2" />
<text  x="82.21" y="143.5" ></text>
</g>
<g >
<title>`__srefill1 (2 samples, 0.02%)</title><rect x="330.1" y="165" width="0.2" height="15.0" fill="rgb(204,204,60)" rx="2" ry="2" />
<text  x="333.13" y="175.5" ></text>
</g>
<g >
<title>`GC_wait_marker (2 samples, 0.02%)</title><rect x="1189.7" y="581" width="0.2" height="15.0" fill="rgb(252,126,126)" rx="2" ry="2" />
<text  x="1192.73" y="591.5" ></text>
</g>
<g >
<title>`GC_clear_stack_inner (16 samples, 0.12%)</title><rect x="53.6" y="133" width="1.4" height="15.0" fill="rgb(212,67,67)" rx="2" ry="2" />
<text  x="56.57" y="143.5" ></text>
</g>
<g >
<title>`tlv_get_addr (5 samples, 0.04%)</title><rect x="388.1" y="229" width="0.4" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="391.08" y="239.5" ></text>
</g>
<g >
<title>`GC_alloc_large (1,965 samples, 15.24%)</title><rect x="58.7" y="181" width="179.9" height="15.0" fill="rgb(223,84,84)" rx="2" ry="2" />
<text  x="61.70" y="191.5" >`GC_alloc_large</text>
</g>
<g >
<title>`GC_remove_from_fl_at (2 samples, 0.02%)</title><rect x="107.5" y="69" width="0.2" height="15.0" fill="rgb(200,50,50)" rx="2" ry="2" />
<text  x="110.49" y="79.5" ></text>
</g>
<g >
<title>`GC_header_cache_miss (407 samples, 3.16%)</title><rect x="420.5" y="549" width="37.2" height="15.0" fill="rgb(212,68,68)" rx="2" ry="2" />
<text  x="423.48" y="559.5" >`GC..</text>
</g>
<g >
<title>`READ-MANY-LINES^COMMON-LISP-USER^FN^^ (4,408 samples, 34.20%)</title><rect x="10.0" y="277" width="403.5" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >`READ-MANY-LINES^COMMON-LISP-USER^FN^^</text>
</g>
<g >
<title>`GC_push_contents_hdr (85 samples, 0.66%)</title><rect x="1180.9" y="549" width="7.8" height="15.0" fill="rgb(221,81,81)" rx="2" ry="2" />
<text  x="1183.94" y="559.5" ></text>
</g>
<g >
<title>`GC_freehblk (53 samples, 0.41%)</title><rect x="102.8" y="85" width="4.9" height="15.0" fill="rgb(251,124,124)" rx="2" ry="2" />
<text  x="105.83" y="95.5" ></text>
</g>
<g >
<title>`GC_do_parallel_mark (1,177 samples, 9.13%)</title><rect x="114.9" y="101" width="107.8" height="15.0" fill="rgb(213,69,69)" rx="2" ry="2" />
<text  x="117.91" y="111.5" >`GC_do_parall..</text>
</g>
<g >
<title>`gctools::initializeBoehm(int (*)(int, char**, bool&amp;, int&amp;, int&amp; (4,409 samples, 34.20%)</title><rect x="10.0" y="597" width="403.6" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="13.00" y="607.5" >`gctools::initializeBoehm(int (*)(int, char**, bool&amp;, i..</text>
</g>
<g >
<title>`GC_clear_stack_inner (32 samples, 0.25%)</title><rect x="53.6" y="213" width="2.9" height="15.0" fill="rgb(253,127,127)" rx="2" ry="2" />
<text  x="56.57" y="223.5" ></text>
</g>
<g >
<title>`core::coerce::inputStreamDesignator(gctools::smart_ptr&lt;core::T_ (293 samples, 2.27%)</title><rect x="277.1" y="245" width="26.8" height="15.0" fill="rgb(55,205,55)" rx="2" ry="2" />
<text  x="280.12" y="255.5" >`..</text>
</g>
<g >
<title>`GC_finalize (12 samples, 0.09%)</title><rect x="98.0" y="117" width="1.1" height="15.0" fill="rgb(213,70,70)" rx="2" ry="2" />
<text  x="100.97" y="127.5" ></text>
</g>
<g >
<title>`setup_header (41 samples, 0.32%)</title><rect x="80.2" y="133" width="3.8" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="83.21" y="143.5" ></text>
</g>
<g >
<title>`ltvc_toplevel_funcall (4,409 samples, 34.20%)</title><rect x="10.0" y="469" width="403.6" height="15.0" fill="rgb(213,213,64)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >`ltvc_toplevel_funcall</text>
</g>
<g >
<title>`wrapped_cl__read_line_T_spT_spT_spT_sp (10 samples, 0.08%)</title><rect x="412.6" y="261" width="0.9" height="15.0" fill="rgb(176,176,50)" rx="2" ry="2" />
<text  x="415.61" y="271.5" ></text>
</g>
<g >
<title>`thread_start (8,481 samples, 65.80%)</title><rect x="413.6" y="661" width="776.4" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="416.62" y="671.5" >`thread_start</text>
</g>
<g >
<title>`__error (34 samples, 0.26%)</title><rect x="321.6" y="181" width="3.1" height="15.0" fill="rgb(202,202,59)" rx="2" ry="2" />
<text  x="324.62" y="191.5" ></text>
</g>
<g >
<title>`_platform_bzero$VARIANT$Ivybridge (3 samples, 0.02%)</title><rect x="83.7" y="117" width="0.3" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="86.69" y="127.5" ></text>
</g>
<g >
<title>`0x1 (4,409 samples, 34.20%)</title><rect x="10.0" y="661" width="403.6" height="15.0" fill="rgb(183,183,52)" rx="2" ry="2" />
<text  x="13.00" y="671.5" >`0x1</text>
</g>
<g >
<title>`_platform_bzero$VARIANT$Ivybridge (6 samples, 0.05%)</title><rect x="269.8" y="213" width="0.6" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="272.80" y="223.5" ></text>
</g>
<g >
<title>0x111abe0fd (4,409 samples, 34.20%)</title><rect x="10.0" y="325" width="403.6" height="15.0" fill="rgb(225,225,68)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >0x111abe0fd</text>
</g>
<g >
<title>`GC_return_mark_stack (2 samples, 0.02%)</title><rect x="1188.8" y="549" width="0.2" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="1191.81" y="559.5" ></text>
</g>
<g >
<title>`GC_mark_from (7,898 samples, 61.27%)</title><rect x="457.7" y="549" width="723.1" height="15.0" fill="rgb(218,76,76)" rx="2" ry="2" />
<text  x="460.74" y="559.5" >`GC_mark_from</text>
</g>
<g >
<title>`gctools::smart_ptr&lt;core::Str8Ns_O&gt; gctools::GCObjectAppropriate (2 samples, 0.02%)</title><rect x="410.4" y="245" width="0.2" height="15.0" fill="rgb(67,216,67)" rx="2" ry="2" />
<text  x="413.41" y="255.5" ></text>
</g>
<g >
<title>`get_index (5 samples, 0.04%)</title><rect x="79.5" y="117" width="0.4" height="15.0" fill="rgb(190,190,55)" rx="2" ry="2" />
<text  x="82.48" y="127.5" ></text>
</g>
<g >
<title>`_platform_memmove$VARIANT$Nehalem (2 samples, 0.02%)</title><rect x="1188.8" y="533" width="0.2" height="15.0" fill="rgb(202,202,60)" rx="2" ry="2" />
<text  x="1191.81" y="543.5" ></text>
</g>
<g >
<title>`GC_malloc_kind (4 samples, 0.03%)</title><rect x="16.2" y="229" width="0.4" height="15.0" fill="rgb(249,122,122)" rx="2" ry="2" />
<text  x="19.22" y="239.5" ></text>
</g>
<g >
<title>`GC_find_header (4 samples, 0.03%)</title><rect x="113.8" y="69" width="0.4" height="15.0" fill="rgb(243,112,112)" rx="2" ry="2" />
<text  x="116.81" y="79.5" ></text>
</g>
<g >
<title>`_pthread_mutex_unlock_init_slow (8 samples, 0.06%)</title><rect x="334.2" y="181" width="0.8" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="337.25" y="191.5" ></text>
</g>
<g >
<title>`GC_collect_or_expand (1,657 samples, 12.85%)</title><rect x="86.3" y="165" width="151.7" height="15.0" fill="rgb(227,90,90)" rx="2" ry="2" />
<text  x="89.35" y="175.5" >`GC_collect_or_expand</text>
</g>
<g >
<title>`RUN-SLURP-LINES^COMMON-LISP-USER^FN^^ (4,409 samples, 34.20%)</title><rect x="10.0" y="293" width="403.6" height="15.0" fill="rgb(78,191,191)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >`RUN-SLURP-LINES^COMMON-LISP-USER^FN^^</text>
</g>
<g >
<title>`GC_clear_stack_inner (29 samples, 0.22%)</title><rect x="53.6" y="181" width="2.6" height="15.0" fill="rgb(208,62,62)" rx="2" ry="2" />
<text  x="56.57" y="191.5" ></text>
</g>
<g >
<title>`tlv_get_addr (8 samples, 0.06%)</title><rect x="19.2" y="213" width="0.8" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="22.25" y="223.5" ></text>
</g>
<g >
<title>`__dynamic_cast (6 samples, 0.05%)</title><rect x="312.7" y="213" width="0.6" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="315.74" y="223.5" ></text>
</g>
<g >
<title>`GC_clear_stack_inner (2 samples, 0.02%)</title><rect x="268.0" y="181" width="0.2" height="15.0" fill="rgb(224,85,85)" rx="2" ry="2" />
<text  x="270.97" y="191.5" ></text>
</g>
<g >
<title>`core::stream_dispatch_table(gctools::smart_ptr&lt;core::T_O&gt;) (10 samples, 0.08%)</title><rect x="411.7" y="261" width="0.9" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="414.69" y="271.5" ></text>
</g>
<g >
<title>`GC_help_marker (8,481 samples, 65.80%)</title><rect x="413.6" y="597" width="776.4" height="15.0" fill="rgb(200,50,50)" rx="2" ry="2" />
<text  x="416.62" y="607.5" >`GC_help_marker</text>
</g>
<g >
<title>`GC_stopped_mark (1,345 samples, 10.43%)</title><rect x="114.9" y="133" width="123.1" height="15.0" fill="rgb(204,56,56)" rx="2" ry="2" />
<text  x="117.91" y="143.5" >`GC_stopped_mark</text>
</g>
<g >
<title>`CATCH-LAMBDA^CC-GENERATE-AST^FN^^ (4,409 samples, 34.20%)</title><rect x="10.0" y="437" width="403.6" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >`CATCH-LAMBDA^CC-GENERATE-AST^FN^^</text>
</g>
<g >
<title>`__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1:: (16 samples, 0.12%)</title><rect x="281.6" y="213" width="1.5" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="284.61" y="223.5" ></text>
</g>
<g >
<title>`GC_find_header (3 samples, 0.02%)</title><rect x="107.1" y="53" width="0.3" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text  x="110.13" y="63.5" ></text>
</g>
<g >
<title>`__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1:: (24 samples, 0.19%)</title><rect x="391.6" y="229" width="2.2" height="15.0" fill="rgb(66,214,66)" rx="2" ry="2" />
<text  x="394.65" y="239.5" ></text>
</g>
<g >
<title>`GC_clear_stack_inner (9 samples, 0.07%)</title><rect x="53.6" y="101" width="0.8" height="15.0" fill="rgb(203,54,54)" rx="2" ry="2" />
<text  x="56.57" y="111.5" ></text>
</g>
<g >
<title>`GC_header_cache_miss (178 samples, 1.38%)</title><rect x="165.0" y="37" width="16.3" height="15.0" fill="rgb(207,60,60)" rx="2" ry="2" />
<text  x="167.98" y="47.5" ></text>
</g>
<g >
<title>`__dynamic_cast (206 samples, 1.60%)</title><rect x="368.2" y="197" width="18.9" height="15.0" fill="rgb(210,210,62)" rx="2" ry="2" />
<text  x="371.21" y="207.5" ></text>
</g>
<g >
<title>`__dynamic_cast (5 samples, 0.04%)</title><rect x="279.3" y="229" width="0.5" height="15.0" fill="rgb(219,219,66)" rx="2" ry="2" />
<text  x="282.32" y="239.5" ></text>
</g>
<g >
<title>`_pthread_start (8,481 samples, 65.80%)</title><rect x="413.6" y="645" width="776.4" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="416.62" y="655.5" >`_pthread_start</text>
</g>
<g >
<title>`core::Lisp_O::run() (4,409 samples, 34.20%)</title><rect x="10.0" y="565" width="403.6" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >`core::Lisp_O::run()</text>
</g>
<g >
<title>`start (4,409 samples, 34.20%)</title><rect x="10.0" y="645" width="403.6" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >`start</text>
</g>
<g >
<title>`_pthread_body (8,481 samples, 65.80%)</title><rect x="413.6" y="629" width="776.4" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="416.62" y="639.5" >`_pthread_body</text>
</g>
<g >
<title>`_platform_bzero$VARIANT$Ivybridge (3 samples, 0.02%)</title><rect x="53.6" y="53" width="0.2" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="56.57" y="63.5" ></text>
</g>
<g >
<title>`pthread_mutex_lock (11 samples, 0.09%)</title><rect x="238.9" y="197" width="1.0" height="15.0" fill="rgb(180,180,52)" rx="2" ry="2" />
<text  x="241.86" y="207.5" ></text>
</g>
<g >
<title>`_pthread_mutex_firstfit_lock_slow (118 samples, 0.92%)</title><rect x="335.9" y="165" width="10.8" height="15.0" fill="rgb(188,188,54)" rx="2" ry="2" />
<text  x="338.90" y="175.5" ></text>
</g>
<g >
<title>`_platform_bzero$VARIANT$Ivybridge (237 samples, 1.84%)</title><rect x="242.0" y="213" width="21.7" height="15.0" fill="rgb(216,216,64)" rx="2" ry="2" />
<text  x="244.97" y="223.5" >`..</text>
</g>
<g >
<title>`GC_push_next_marked_uncollectable (166 samples, 1.29%)</title><rect x="222.7" y="101" width="15.2" height="15.0" fill="rgb(208,62,62)" rx="2" ry="2" />
<text  x="225.75" y="111.5" ></text>
</g>
<g >
<title>`GC_clear_stack_inner (2 samples, 0.02%)</title><rect x="268.0" y="165" width="0.2" height="15.0" fill="rgb(236,103,103)" rx="2" ry="2" />
<text  x="270.97" y="175.5" ></text>
</g>
<g >
<title>`__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1:: (124 samples, 0.96%)</title><rect x="398.8" y="213" width="11.3" height="15.0" fill="rgb(92,239,92)" rx="2" ry="2" />
<text  x="401.79" y="223.5" ></text>
</g>
<g >
<title>`startup(int, char**, bool&amp;, int&amp;, int&amp;) (4,409 samples, 34.20%)</title><rect x="10.0" y="581" width="403.6" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >`startup(int, char**, bool&amp;, int&amp;, int&amp;)</text>
</g>
<g >
<title>`get_index (2 samples, 0.02%)</title><rect x="78.7" y="101" width="0.2" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="81.75" y="111.5" ></text>
</g>
<g >
<title>`GC_push_contents_hdr (3,320 samples, 25.76%)</title><rect x="876.8" y="533" width="304.0" height="15.0" fill="rgb(211,67,67)" rx="2" ry="2" />
<text  x="879.83" y="543.5" >`GC_push_contents_hdr</text>
</g>
<g >
<title>`core::cl__read_line(gctools::smart_ptr&lt;core::T_O&gt;, gctools::sma (4,358 samples, 33.81%)</title><rect x="11.6" y="261" width="399.0" height="15.0" fill="rgb(104,250,104)" rx="2" ry="2" />
<text  x="14.65" y="271.5" >`core::cl__read_line(gctools::smart_ptr&lt;core::T_O&gt;, gc..</text>
</g>
<g >
<title>`core::eformat_read_char(gctools::smart_ptr&lt;core::T_O&gt;) (915 samples, 7.10%)</title><rect x="303.9" y="245" width="83.8" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="306.95" y="255.5" >`core::ef..</text>
</g>
<g >
<title>`_pthread_cond_wait (2 samples, 0.02%)</title><rect x="1189.5" y="549" width="0.1" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="1192.45" y="559.5" ></text>
</g>
<g >
<title>`GC_promote_black_lists (5 samples, 0.04%)</title><rect x="114.5" y="133" width="0.4" height="15.0" fill="rgb(237,104,104)" rx="2" ry="2" />
<text  x="117.45" y="143.5" ></text>
</g>
<g >
<title>`_platform_bzero$VARIANT$Ivybridge (3 samples, 0.02%)</title><rect x="56.2" y="181" width="0.3" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="59.23" y="191.5" ></text>
</g>
<g >
<title>`GC_add_to_fl (12 samples, 0.09%)</title><rect x="101.6" y="85" width="1.1" height="15.0" fill="rgb(219,79,79)" rx="2" ry="2" />
<text  x="104.64" y="95.5" ></text>
</g>
<g >
<title>`flockfile (5 samples, 0.04%)</title><rect x="317.4" y="197" width="0.5" height="15.0" fill="rgb(183,183,52)" rx="2" ry="2" />
<text  x="320.40" y="207.5" ></text>
</g>
<g >
<title>`core::utf_8_decoder(gctools::smart_ptr&lt;core::T_O&gt;) (855 samples, 6.63%)</title><rect x="309.4" y="229" width="78.3" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text  x="312.44" y="239.5" >`core::ut..</text>
</g>
<g >
<title>`__dynamic_cast (178 samples, 1.38%)</title><rect x="393.8" y="229" width="16.3" height="15.0" fill="rgb(199,199,59)" rx="2" ry="2" />
<text  x="396.84" y="239.5" ></text>
</g>
<g >
<title>`core::cl__streamp(gctools::smart_ptr&lt;core::T_O&gt;) (264 samples, 2.05%)</title><rect x="279.8" y="229" width="24.1" height="15.0" fill="rgb(80,228,80)" rx="2" ry="2" />
<text  x="282.78" y="239.5" >`..</text>
</g>
<g >
<title>`GC_clear_stack_inner (32 samples, 0.25%)</title><rect x="53.6" y="197" width="2.9" height="15.0" fill="rgb(248,121,121)" rx="2" ry="2" />
<text  x="56.57" y="207.5" ></text>
</g>
<g >
<title>`GC_malloc_kind (3 samples, 0.02%)</title><rect x="56.6" y="213" width="0.3" height="15.0" fill="rgb(211,66,66)" rx="2" ry="2" />
<text  x="59.60" y="223.5" ></text>
</g>
<g >
<title>`GC_should_collect (3 samples, 0.02%)</title><rect x="238.3" y="165" width="0.3" height="15.0" fill="rgb(212,67,67)" rx="2" ry="2" />
<text  x="241.31" y="175.5" ></text>
</g>
<g >
<title>`core::startup_functions_invoke() (4,409 samples, 34.20%)</title><rect x="10.0" y="549" width="403.6" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >`core::startup_functions_invoke()</text>
</g>
<g >
<title>`GC_reclaim_clear (12 samples, 0.09%)</title><rect x="268.3" y="165" width="1.1" height="15.0" fill="rgb(245,115,115)" rx="2" ry="2" />
<text  x="271.34" y="175.5" ></text>
</g>
<g >
<title>`DO-TIME^CORE^FN^^ (4,409 samples, 34.20%)</title><rect x="10.0" y="341" width="403.6" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >`DO-TIME^CORE^FN^^</text>
</g>
<g >
<title>`_pthread_mutex_lock_init_slow (4 samples, 0.03%)</title><rect x="333.9" y="181" width="0.3" height="15.0" fill="rgb(202,202,59)" rx="2" ry="2" />
<text  x="336.88" y="191.5" ></text>
</g>
<g >
<title>`clear_marks_for_block (3 samples, 0.02%)</title><rect x="97.7" y="117" width="0.3" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="100.70" y="127.5" ></text>
</g>
<g >
<title>`GC_merge_unmapped (3 samples, 0.02%)</title><rect x="238.0" y="165" width="0.3" height="15.0" fill="rgb(239,107,107)" rx="2" ry="2" />
<text  x="241.04" y="175.5" ></text>
</g>
<g >
<title>`fread (508 samples, 3.94%)</title><rect x="317.9" y="197" width="46.5" height="15.0" fill="rgb(200,200,59)" rx="2" ry="2" />
<text  x="320.86" y="207.5" >`fread</text>
</g>
<g >
<title>`_platform_memmove$VARIANT$Ivybridge (8 samples, 0.06%)</title><rect x="332.6" y="181" width="0.7" height="15.0" fill="rgb(194,194,56)" rx="2" ry="2" />
<text  x="335.60" y="191.5" ></text>
</g>
<g >
<title>`thread-local wrapper routine for my_thread (4 samples, 0.03%)</title><rect x="272.5" y="229" width="0.4" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="275.55" y="239.5" ></text>
</g>
<g >
<title>`__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1:: (158 samples, 1.23%)</title><rect x="289.5" y="197" width="14.4" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text  x="292.48" y="207.5" ></text>
</g>
<g >
<title>`GC_header_cache_miss (1,127 samples, 8.74%)</title><rect x="773.7" y="533" width="103.1" height="15.0" fill="rgb(225,86,86)" rx="2" ry="2" />
<text  x="776.66" y="543.5" >`GC_header_c..</text>
</g>
<g >
<title>`core::stream_dispatch_table(gctools::smart_ptr&lt;core::T_O&gt;) (9 samples, 0.07%)</title><rect x="308.6" y="229" width="0.8" height="15.0" fill="rgb(109,254,109)" rx="2" ry="2" />
<text  x="311.62" y="239.5" ></text>
</g>
<g >
<title>`GC_apply_to_all_blocks (123 samples, 0.95%)</title><rect x="86.3" y="117" width="11.3" height="15.0" fill="rgb(236,103,103)" rx="2" ry="2" />
<text  x="89.35" y="127.5" ></text>
</g>
<g >
<title>`DYLD-STUB$$pthread_mutex_lock (4 samples, 0.03%)</title><rect x="320.6" y="181" width="0.4" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="323.61" y="191.5" ></text>
</g>
<g >
<title>`DYLD-STUB$$fread (2 samples, 0.02%)</title><rect x="312.6" y="213" width="0.1" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="315.55" y="223.5" ></text>
</g>
<g >
<title>`GC_try_to_collect_inner (1,657 samples, 12.85%)</title><rect x="86.3" y="149" width="151.7" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="89.35" y="159.5" >`GC_try_to_collect_..</text>
</g>
<g >
<title>`GC_generic_malloc (1,986 samples, 15.41%)</title><rect x="57.1" y="197" width="181.8" height="15.0" fill="rgb(221,81,81)" rx="2" ry="2" />
<text  x="60.05" y="207.5" >`GC_generic_malloc</text>
</g>
<g >
<title>`GC_free_block_ending_at (44 samples, 0.34%)</title><rect x="103.4" y="69" width="4.0" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="106.37" y="79.5" ></text>
</g>
<g >
<title>`GC_find_header (4 samples, 0.03%)</title><rect x="97.2" y="85" width="0.4" height="15.0" fill="rgb(214,70,70)" rx="2" ry="2" />
<text  x="100.24" y="95.5" ></text>
</g>
<g >
<title>`GC_next_used_block (2 samples, 0.02%)</title><rect x="236.4" y="85" width="0.2" height="15.0" fill="rgb(239,107,107)" rx="2" ry="2" />
<text  x="239.39" y="95.5" ></text>
</g>
<g >
<title>`GC_remove_protection (3 samples, 0.02%)</title><rect x="84.0" y="149" width="0.2" height="15.0" fill="rgb(244,115,115)" rx="2" ry="2" />
<text  x="86.97" y="159.5" ></text>
</g>
<g >
<title>`_platform_bzero$VARIANT$Ivybridge (5 samples, 0.04%)</title><rect x="54.4" y="101" width="0.5" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="57.40" y="111.5" ></text>
</g>
<g >
<title>`GC_mark_some (1,345 samples, 10.43%)</title><rect x="114.9" y="117" width="123.1" height="15.0" fill="rgb(210,65,65)" rx="2" ry="2" />
<text  x="117.91" y="127.5" >`GC_mark_some</text>
</g>
<g >
<title>`GC_remove_from_fl_at (3 samples, 0.02%)</title><rect x="78.9" y="117" width="0.3" height="15.0" fill="rgb(205,58,58)" rx="2" ry="2" />
<text  x="81.93" y="127.5" ></text>
</g>
<g >
<title>`gctools::handle_all_queued_interrupts() (24 samples, 0.19%)</title><rect x="17.8" y="229" width="2.2" height="15.0" fill="rgb(89,236,89)" rx="2" ry="2" />
<text  x="20.78" y="239.5" ></text>
</g>
<g >
<title>`core::input_stream_read_byte8(gctools::smart_ptr&lt;core::T_O&gt;, un (7 samples, 0.05%)</title><rect x="308.0" y="229" width="0.6" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text  x="310.98" y="239.5" ></text>
</g>
<g >
<title>`GC_do_local_mark (1,171 samples, 9.08%)</title><rect x="115.5" y="69" width="107.2" height="15.0" fill="rgb(248,120,120)" rx="2" ry="2" />
<text  x="118.46" y="79.5" >`GC_do_local_..</text>
</g>
<g >
<title>`core::MDArray_O::MDArray_O(core::Rank1, unsigned long, gctools: (4 samples, 0.03%)</title><rect x="17.4" y="229" width="0.4" height="15.0" fill="rgb(103,249,103)" rx="2" ry="2" />
<text  x="20.42" y="239.5" ></text>
</g>
<g >
<title>`CATCH-LAMBDA^CC-GENERATE-AST^FN^^ (4,409 samples, 34.20%)</title><rect x="10.0" y="389" width="403.6" height="15.0" fill="rgb(92,204,204)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >`CATCH-LAMBDA^CC-GENERATE-AST^FN^^</text>
</g>
<g >
<title>`__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1:: (122 samples, 0.95%)</title><rect x="375.9" y="181" width="11.2" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text  x="378.90" y="191.5" ></text>
</g>
<g >
<title>`GC_mark_from (1,109 samples, 8.60%)</title><rect x="120.5" y="53" width="101.5" height="15.0" fill="rgb(216,74,74)" rx="2" ry="2" />
<text  x="123.49" y="63.5" >`GC_mark_from</text>
</g>
<g >
<title>`rand (4 samples, 0.03%)</title><rect x="263.7" y="213" width="0.3" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="266.67" y="223.5" ></text>
</g>
<g >
<title>`GC_clear_stack_inner (14 samples, 0.11%)</title><rect x="53.6" y="117" width="1.3" height="15.0" fill="rgb(248,120,120)" rx="2" ry="2" />
<text  x="56.57" y="127.5" ></text>
</g>
<g >
<title>`gctools::smart_ptr&lt;core::Str8Ns_O&gt; gctools::GCObjectAppropriate (78 samples, 0.61%)</title><rect x="264.6" y="229" width="7.1" height="15.0" fill="rgb(82,229,82)" rx="2" ry="2" />
<text  x="267.58" y="239.5" ></text>
</g>
<g >
<title>`GC_push_contents_hdr (445 samples, 3.45%)</title><rect x="181.3" y="37" width="40.7" height="15.0" fill="rgb(247,118,118)" rx="2" ry="2" />
<text  x="184.28" y="47.5" >`GC..</text>
</g>
</g>
</svg>
